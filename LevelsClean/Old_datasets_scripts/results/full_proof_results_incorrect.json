{"implication_world_val": [{"theorem": "exact_2_dev_1", "proof_is_correct": true, "full_proof": "theorem exact_2_dev_1_temp (x : \u2115) (h : 0 + x = 0 + y + 2) : x = y + 2 := by\n-- We simplify the hypothesis of 0 + x = 0 + y + 2 to x = 0 + x + 2.\nrw [zero_add] at h", "correct_step_errored": true}, {"theorem": "exact_2_dev_2", "proof_is_correct": true, "full_proof": "theorem exact_2_dev_2_temp (x : \u2115) (h : 0 + x = 0 + y + 2) : x = y + 2 := by\n-- 0 + x = 0 + y + 2 -> x = 0 + y + 2\nrw [zero_add] at h", "correct_step_errored": true}], "multiplication_world_val": [{"theorem": "zero_mul_dev_1", "proof_is_correct": true, "full_proof": "theorem zero_mul_dev_1_temp (m : \u2115) : 0 * m = 0 := by\n-- Proof by induction on m with base case 0 * 0 = 0 and inductive step 0 * d + 1 = 0\ninduction m with d hd\n-- First prove base case. Simplify LHS 0 * 0 to 0\nrw [mul_zero]\n-- Simplify the LHS 0 * d + 0 to 0 + 0 using the definition of addition\nrw [add_zero]-- error\n-- This is exactly the inductive hypothesis so we can complete the proof.\nrfl-- error", "correct_step_errored": true}, {"theorem": "zero_mul_dev_2", "proof_is_correct": true, "full_proof": "theorem zero_mul_dev_2_temp (m : \u2115) : 0 * m = 0 := by\n-- Proof by induction on m with base case 0 * 0 = 0 and inductive step 0 * d + 1 = 0\ninduction m with d hd\n-- That proves the base case.\nrfl-- error\n-- This is exactly the inductive hypothesis so we can complete the proof.\nrfl-- error", "correct_step_errored": true}], "AdvMultiplication_world_val": [{"theorem": "mul_left_ne_zero__dev_1", "proof_is_correct": true, "full_proof": "theorem mul_left_ne_zero__dev_1_temp (a b : \u2115) (h : a * b \u2260 0) : b \u2260 0 := by\n-- Assume that b equals 0.\nintro hd\n-- We use reflexivity to prove the goal of 0 = 0.\nrfl-- error", "correct_step_errored": true}, {"theorem": "mul_left_ne_zero__dev_2", "proof_is_correct": true, "full_proof": "theorem mul_left_ne_zero__dev_2_temp (a b : \u2115) (h : a * b \u2260 0) : b \u2260 0 := by\n-- Assume that b equals 0.\nintro hd\n-- We have 0 != 0 which is a contradiction.\ntrivial-- error", "correct_step_errored": true}], "algorithm_world_val": [{"theorem": "add_left_comm_dev_1", "proof_is_correct": false, "full_proof": "theorem add_left_comm_dev_1_temp (a b c : \u2115) : a + (b + c) = b + (a + c) := by\n-- By associativity of addition, can change a + (b + c) into (a + b) + c\nrw [add_assoc]-- error\n-- So we just need to show b + (a + c) = b + (a + c), which is true by reflexivity.\nrfl-- error", "correct_step_errored": true}, {"theorem": "add_left_comm_dev_2", "proof_is_correct": false, "full_proof": "theorem add_left_comm_dev_2_temp (a b c : \u2115) : a + (b + c) = b + (a + c) := by\n-- a + (b + c) = b + (a + c) -> (a + b) + c = b + (a + c)\nrw [add_assoc]-- error\n-- lhs = rhs\nrw [add_assoc]-- error", "correct_step_errored": true}], "less_or_equal_world_val": [{"theorem": "le_two_dev_1", "proof_is_correct": false, "full_proof": "theorem le_two_dev_1_temp (x : \u2115) (hx : x \u2264 2) : x = 0 \u2228 x = 1 \u2228 x = 2 := by\n-- Either x = 0 or x = succ y for some natural number y.\ncases x with y\n-- In the former case, we need to show 0 = 0 \u2228 0 = 1 \u2228 0 = 2, and we choose to show 0 = 0.\nleft\n-- This is clear by reflexivity.\nrfl\n-- In the latter case, either y = 0 or y = succ z for some natural number z.\ncases y with z\n-- In the former case, we must show succ 0 = 0 \u2228 succ 0 = 1 \u2228 succ 0 = 2, and we choose to prove succ 0 = 1 \u2228 succ 0 = _dev_2\nright\n-- To prove succ 0 = 1 \u2228 succ 0 = 2, we choose to prove succ 0 = _dev_1\nleft\n-- Rewriting using a theorem, need to show show succ 0 = succ 0.\nrfl-- error\n-- This is clear by reflexivity.\nrfl-- error\n-- In the latter case, we substitute 2 = succ 1 and 1 = succ 0 into what we know and what we have to show.\nrw [two_eq_succ_one, one_eq_succ_zero] at hx \u22a2-- error\n-- We know that succ (succ z) \u2264 succ (succ 0), so usinig a theorem we know succ z \u2264 succ 0.\napply succ_le_succ at hx-- error\n-- We know that succ z \u2264 succ 0, so using a theorem we know that z \u2264 0.\napply succ_le_succ at hx-- error\n-- Since z \u2264 0, using a theorem, z = 0.\napply le_zero at hx-- error\n-- So, we need to show that succ (succ 0) = 0 \u2228 succ (succ 0) = succ 0 \u2228 succ (succ 0) = succ (succ 0), so we choose to show that succ (succ 0) = succ 0 \u2228 succ (succ 0) = succ (succ 0)\nright-- error\n-- But LHS = RHS, so this follows by reflexivity.\nrfl-- error", "correct_step_errored": true}, {"theorem": "le_two_dev_2", "proof_is_correct": false, "full_proof": "theorem le_two_dev_2_temp (x : \u2115) (hx : x \u2264 2) : x = 0 \u2228 x = 1 \u2228 x = 2 := by\n-- x = 0 (case 1) or x = succ y (case 2) for some natural number y\ncases x with y\n-- 0 = 0 \u2228 0 = 1 \u2228 0 = 2 -> 0 = 0\nleft\nrfl\n-- lhs = rhs\nrw [\u2190 hx]\n-- y = 0 (case 1) or y = succ z (case 2) for some natural number z\ncases y with z\n-- succ 0 = 0 \u2228 succ 0 = 1 \u2228 succ 0 = 2 -> succ 0 = 1 \u2228 succ 0 = _dev_2\nright\n-- succ 0 = 1 \u2228 succ 0 = 2 -> succ 0 = _dev_1\nleft\n-- succ 0 = 1 -> succ 0 = succ 0\nrfl\n-- lhs = rhs\nrw [\u2190 hx]\n-- succ (succ z) \u2264 2 -> succ (succ z) \u2264 succ 1 -> succ (succ z) \u2264 succ (succ 0); ... = 0 \u2228 ... = 1 \u2228 ... = 2 -> ... = 0 \u2228 ... = 1 \u2228 ... = succ 1 -> ... = 0 \u2228 ... = succ 0 \u2228 ... = succ (succ 0)\nrw [le_succ_self, le_two]\n-- succ (succ z) \u2264 succ (succ 0) -> succ z \u2264 succ 0\napply succ_le_succ at hx\n-- succ z \u2264 succ 0 -> z \u2264 0\napply succ_le_succ\n-- z \u2264 0 -> z = 0\napply le_zero\n-- succ (succ 0) = 0 \u2228 succ (succ 0) = succ 0 \u2228 succ (succ 0) = succ (succ 0) -> succ (succ 0) = succ 0 \u2228 succ (succ 0) = succ (succ 0)\nright\n-- lhs = rhs\nrw [\u2190 hx]", "correct_step_errored": false}], "power_world_val": [{"theorem": "zero_pow_succ_dev_2", "proof_is_correct": true, "full_proof": "theorem zero_pow_succ_dev_2_temp (m : \u2115) : (0 : \u2115) ^ (succ m) = 0 := by\n-- We can use induction on m. For the base case, we want to show that 0^succ(0) = 0.\ninduction m with d hd", "correct_step_errored": true}], "tutorial_world_val": [{"theorem": "succ_eq_add_one_dev_1", "proof_is_correct": false, "full_proof": "theorem succ_eq_add_one_dev_1_d_temp n : succ n = n + 1 := by\n-- Rewrite on both RHS and LHS making n -> n + 0\nrw [add_zero]-- error\n-- Rewrite on RHS making n + 0 + succ(0) -> succ(n+0+0)\nrw [add_succ]-- error\n-- succ(n+0) = succ(n+0), QED\nrfl-- error", "correct_step_errored": true}, {"theorem": "succ_eq_add_one_dev_2", "proof_is_correct": false, "full_proof": "theorem succ_eq_add_one_dev_1_d2_temp : succ n = n + 1 := by\n-- Rewrite RHS 1 -> succ(0)\nrw [one_eq_succ_zero]\n-- Rewrite both RHS and LHS n -> n + 0\nrw [add_zero]-- error\n-- Rewrite RHS n + 0 + succ(0) -> succ(n + 0 + 0)\nrw [add_succ]-- error\n-- succ(n) = succ(n), QED\nrfl-- error", "correct_step_errored": true}], "AdvAddition_world_val": [{"theorem": "add_right_eq_zero_dev_1", "proof_is_correct": false, "full_proof": "theorem add_right_eq_zero_dev_1_temp (a b : \u2115) : a + b = 0 \u2192 a = 0 := by\n-- We have two cases: b = 0, or b = succ d for some natural number d.\ncases b with d\n-- In the former case, we must show that a + 0 = 0 \u2192 a = 0, so we start by assuming that a + 0 = 0.\nintro h\n-- We apply the theorem that n + 0 = n change a + 0 = 0 into a = 0.\nrw [add_zero] at h\n-- So, a = 0, which concludes this case of the theorem.\nexact h\n-- In the latter case, we must show that a + succ d = 0 \u2192 a = 0, so we start by assuming that a + succ d = 0.\nintro h\n-- By the symmetry of equality, we have that 0 = succ (a + d).\nsymm at h\n-- Since a contradiction/falsehood implies anything, we are done.\nexact h-- error", "correct_step_errored": false}, {"theorem": "add_right_eq_zero_dev_2", "proof_is_correct": false, "full_proof": "theorem add_right_eq_zero_dev_2_temp (a b : \u2115) : a + b = 0 \u2192 a = 0 := by\n-- either b = 0 or b = succ d for some natural number d\ncases b with d\n-- (case 1) assume a + 0 = 0\nintro h\n-- a + 0 = 0 -> a = 0\nexact h-- error\n-- a = 0, as desired\nexact h-- error\n-- succ (a + d) = 0 -> 0 = succ (a + d)\nsymm at h-- error\n-- 0 = succ (a + d) -> False\napply zero_ne_succ-- error\n-- False -> anything\ntrivial-- error", "correct_step_errored": true}], "addition_world_val": [{"theorem": "zero_add__dev_1", "proof_is_correct": false, "full_proof": "theorem zero_add__dev_1_temp (n : \u2115) : 0 + n = n := by\n-- Induct on n\ninduction n with d hd\n-- substitute 0 -> 0 + 0 into the RHS giving us 0 + 0 = 0 + 0\nrw [add_zero]\n-- 0 + 0 = 0 + 0, completing base case\nrfl\n-- succ d = succ d, QED\nrfl-- error", "correct_step_errored": true}, {"theorem": "zero_add__dev_2", "proof_is_correct": true, "full_proof": "theorem zero_add__dev_2_temp (n : \u2115) : 0 + n = n := by\n-- Begin by initiating induction on n\ninduction n with d hd\n-- Using the properties of addition by 0 we can rewrite 0 + 0 to 0 on the LHS\nrw [add_zero]\n-- Since both sides are equal, we are done with the base case\nrfl\n-- Since both sides are equal, we are done with the proof\nrfl-- error", "correct_step_errored": true}]}