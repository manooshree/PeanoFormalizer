theorem,NL,FL,filename
add_assoc_2,"Prove that the addition of natural numbers is associative, i.e., a + b + c = a + (b + c).",theorem add_assoc_2 (a b c : ℕ) : a + b + c = a + (b + c) := by,AdditionClean.lean
add_assoc_2,"Induct on c, with d = 0 as the base case and the inductive hypothesis a + b + d = a + (b + d). There are now two proof goals, prove base case: a + b + 0 = a + (b + 0), and inductive step: a + b + succ (d) = a + (b + succ (d)).",induction c with d hd,AdditionClean.lean
add_assoc_2,First we prove the base case. Simplify the LHS and RHS both to a + b,"· rw [add_zero, add_zero]",AdditionClean.lean
add_assoc_2,"Prove LHS and RHS are equal, a + b = a + b, completing the base case.",rfl,AdditionClean.lean
add_assoc_2,"Now prove the inductive step. Rewrite the LHS: a + b + succ (d) to succ (a + b + d) and then to succ (a + (b + d)), using the inductive hypothesis. Change the RHS: a + (b + succ d) to a + succ (b + d) to succ (a + (b + d))","· rw [add_succ, add_succ, hd, add_succ]",AdditionClean.lean
add_assoc_2,"Prove LHS and RHS are equal, succ (a + (b + d)) = succ (a + (b + d)), completing the proof",rfl,AdditionClean.lean
add_left_eq_self,Prove that x + y = y implies x = 0 for all natural numbers,theorem add_left_eq_self (x y : ℕ) : x + y = y → x = 0 := by,AdvAdditionClean.lean
add_left_eq_self,"Assume that x + y = y as our hypothesis h, and then prove that x = 0.",intro h,AdvAdditionClean.lean
add_left_eq_self,"Rewrite the second occurrence of the theorem 'zero_add y' in reverse in the hypothesis 'h', but the goal 'x = 0' remains unchanged.",nth_rewrite 2 [← zero_add y] at h,AdvAdditionClean.lean
add_left_eq_self,"If a + n = b + n, then a = b. So, in our case, if x + y = 0 + y, then x = 0.",apply add_right_cancel at h,AdvAdditionClean.lean
add_left_eq_self,h proves the goal x = 0 so we can use it to finish the proof,exact h,AdvAdditionClean.lean
twenty,Prove that 20 + 20 = 40,theorem twenty: (20 : ℕ) + 20 = 40 := by,Algorithm2Clean.lean
var_swap,"Prove (a + b) + (c + d) = ((a + c) + d) + b for natural numbers a, b, c, d",theorem var_swap (a b c d : ℕ) : a + b + (c + d) = a + c + d + b := by,AlgorithmClean.lean
var_swap,Apply the associative property of addition to both sides of the equation to regroup the terms to a + (b + (c + d)) = a + (c + (d + b)),repeat rw [add_assoc],AlgorithmClean.lean
var_swap,"Rewrite LHS, swapping b and c in the term b + c, to get a + (c + (b + d))",rw [add_left_comm b c],AlgorithmClean.lean
var_swap,Rewrite LHS from a + (c + (b + d)) to a + (c + (d + b)),rw [add_comm b d],AlgorithmClean.lean
var_swap,"Prove LHS and RHS are equal, a + (c + (d + b)) = a + (c + (d + b)), completing the proof",rfl,AlgorithmClean.lean
exact_6,"For some x, which is a natural number, given x + 1 = 4, prove that x = 3",theorem exact_6 (x : ℕ) (h : x + 1 = 4) : x = 3 := by,ImplicationClean.lean
exact_6,Change the proof goal to succ x = succ 3 using the injectivity of the successor function,apply succ_inj,ImplicationClean.lean
exact_6,"Rewrite the RHS, replacing 'succ x' with 'x + 1'.",rw [succ_eq_add_one],ImplicationClean.lean
exact_6,Simplify succ (3) to 4,rw [← four_eq_succ_three],ImplicationClean.lean
exact_6,"We can exactly show that x + 1 = 4 holds true, assuming x = 3, completing the proof",exact h,ImplicationClean.lean
le_antisymm1,"Prove that if x is less than or equal to y and y is less than or equal to x, then x equals y.",theorem le_antisymm1 (x y : ℕ) (hxy : x ≤ y) (hyx : y ≤ x) : x = y := by,LessOrEqualClean.lean
le_antisymm1,We consider the case where x is less than or equal to y so y = x + some natural number a.,cases hxy with a ha,LessOrEqualClean.lean
le_antisymm1,We consider the case where y is less than or equal to x so x = y + some natural number b.,cases hyx with b hb,LessOrEqualClean.lean
le_antisymm1,"We substitute y in the goal with x + a, changing our goal to prove that x equals x + a.",rw [ha],LessOrEqualClean.lean
le_antisymm1,"Using the equality y = x + a, we substitute y in the equation x = y + b with x + a. Then, we re-arrange the right side of the equation x = x + a + b to x = x + (a + b) using the property that addition is associative.","rw [ha, add_assoc] at hb",LessOrEqualClean.lean
le_antisymm1,We flip the equation so that it reads 'x + (a + b) = x' instead of 'x = x + (a + b)'.,symm at hb,LessOrEqualClean.lean
le_antisymm1,"If x + (a + b) = x, then a + b = 0 by since for all natural numbers a and n, n + a = n implies a = 0.",apply add_right_eq_self at hb,LessOrEqualClean.lean
le_antisymm1,"If a + b = 0, then a = 0 and b = 0 by since for all natural numbers a and n, n + a = 0 implies a = 0.",apply add_right_eq_zero at hb,LessOrEqualClean.lean
le_antisymm1,"We substitute a in the equation x = x + a with zero, as given shown above, changing our goal to prove that x equals x.","rw [hb, add_zero]",LessOrEqualClean.lean
le_antisymm1,"The goal is now to prove that x equals x, which is true by reflexivity.",rfl,LessOrEqualClean.lean
one_mul,"Prove that 1 * m = m, for all natural numbers",theorem one_mul (m : ℕ): 1 * m = m := by,MultiplicationClean.lean
one_mul,Apply the commutative property of multiplication to rewrite LHS from 1 * m to m * 1,rw [mul_comm],MultiplicationClean.lean
one_mul,Simplify m * 1 to m,rw [mul_one],MultiplicationClean.lean
one_mul,"Prove LHS and RHS are equal, m = m, completing the proof",rfl,MultiplicationClean.lean
zero_pow_succ,Prove that 0^(succ m) = 0,theorem zero_pow_succ (m : ℕ) : (0 : ℕ) ^ (succ m) = 0 := by,PowerClean.lean
zero_pow_succ,"Rewrite the left hand side using the identity that any natural number raised to the power of the successor of another natural number is equal to that number raised to the power of the other number, multiplied by the original number.",rw [pow_succ],PowerClean.lean
zero_pow_succ,Rewrite the left hand side using the identity that any natural number multiplied by 0 is 0,rw [mul_zero],PowerClean.lean
zero_pow_succ,"The goal is now to prove that 0 = 0, which is true by reflexivity",rfl,PowerClean.lean
rw_intro,"Prove 2 * y = 2 * (x + 7) for natural numbers x, y, given that y = x + 7",theorem rw_intro (x y : ℕ) (h : y = x + 7) : 2 * y = 2 * (x + 7) := by,TutorialClean.lean
rw_intro,Rewrite 2 * y in the LHS of the proof goal as 2 * (x + 7) using the fact that y = x + 7,rw [h],TutorialClean.lean
rw_intro,"Prove LHS and RHS are equal, 2 * (x + 7) = 2 * (x + 7), completing the proof",rfl,TutorialClean.lean
