[
  {
    "theorem": "add_right_cancel",
    "NL": "-- Theorem Declaration: Prove that a + n = b + n implies a = b for all natural numbers",
    "FL": "theorem add_right_cancel (a b n : \u2115) : a + n = b + n \u2192 a = b := by",
    "state": "a b n : \u2115\n\u22a2 a + n = b + n \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel",
    "NL": "-- Induct on n, with d = 0 as the base case and the inductive hypothesis a + d = b + d. There are now two proof goals, prove base case: a + 0 = b + 0 and inductive step: a + succ (d) = b + succ (d) implies a = b.",
    "FL": "induction n with d hd",
    "state": "case zero\na b : \u2115\n\u22a2 a + 0 = b + 0 \u2192 a = b\ncase succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel",
    "NL": "-- Assume that the hypothesis 'h' is true, that is, a + 0 = b + 0. The goal now is to prove that a = b.",
    "FL": "intro h",
    "state": "case zero\na b : \u2115\nh : a + 0 = b + 0\n\u22a2 a = b\ncase succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel",
    "NL": "-- Repeatedly apply the rewrite rule add_zero to the hypothesis h, which simplifies any terms of the form x + 0 in h to x. In this case",
    "FL": "repeat rw [add_zero] at h",
    "state": "case zero\na b : \u2115\nh : a = b\n\u22a2 a = b\ncase succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel",
    "NL": "-- Apply the hypothesis 'h' to the goal, changing it to: if 'a + succ d' equals 'b + succ d', then 'a' equals 'b'",
    "FL": "exact h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel",
    "NL": "-- Introduce a hypothesis h: a + succ d = b + succ d. Now the goal is to prove a = b given this hypothesis.",
    "FL": "intro h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : a + succ d = b + succ d\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel",
    "NL": "-- For any natural numbers x and y, x + succ y = succ (x + y). Applying this repeatedly simplifies the hypothesis but leaves the goal state a = b unchanged.",
    "FL": "repeat rw [add_succ] at h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : succ (a + d) = succ (b + d)\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel",
    "NL": "-- If succ a = succ b, then a = b which simplifies the hypotheses.",
    "FL": "apply succ_inj at h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : a + d = b + d\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel",
    "NL": "-- Apply the inductive hypothesis 'hd' at the hypothesis 'h'. This simplifies the hypothesis to a = b.",
    "FL": "apply hd at h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : a = b\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel",
    "NL": "-- h proves the goal a = b so we can use it to finish the proof",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_right_cancel_dev_1",
    "NL": "-- Theorem Declaration: Prove that a + n = b + n implies a = b for all natural numbers",
    "FL": "theorem add_right_cancel_dev_1 (a b n : \u2115) : a + n = b + n \u2192 a = b := by",
    "state": "a b n : \u2115\n\u22a2 a + n = b + n \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_1",
    "NL": "-- We start with induction on n.",
    "FL": "induction n with d hd",
    "state": "case zero\na b : \u2115\n\u22a2 a + 0 = b + 0 \u2192 a = b\ncase succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_1",
    "NL": "-- For the base case, to show that a + 0 = b + 0 \u2192 a = b, we first assume a + 0 = b + 0.",
    "FL": "intro h",
    "state": "case zero\na b : \u2115\nh : a + 0 = b + 0\n\u22a2 a = b\ncase succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_1",
    "NL": "-- We simplify a + 0 = b + 0 to a = b.",
    "FL": "repeat rw [add_zero] at h",
    "state": "case zero\na b : \u2115\nh : a = b\n\u22a2 a = b\ncase succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_1",
    "NL": "-- So a = b, which concludes the base case.",
    "FL": "exact h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_1",
    "NL": "-- For the inductive step, we must show that a + succ d = b + succ d \u2192 a = b, so we start by assuming a + succ d = b + succ d.",
    "FL": "intro h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : a + succ d = b + succ d\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_1",
    "NL": "-- We use the theorem that n + succ m = succ (n + m) to change a + succ d = b + succ d into succ (a + d) = succ (b + d).",
    "FL": "repeat rw [add_succ] at h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : succ (a + d) = succ (b + d)\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_1",
    "NL": "-- So, succ (a + d) = succ (b + d), but because succ is injective, we have that a + d = b + d.",
    "FL": "apply succ_inj at h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : a + d = b + d\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_1",
    "NL": "-- The inductive hypothesis states that a + d = b + d \u2192 a = b and we know a + d = b + d, so by modus ponens, a = b.",
    "FL": "apply hd at h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : a = b\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_1",
    "NL": "-- So a = b, which concludes the inductive step.",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_right_cancel_dev_2",
    "NL": "-- Theorem Declaration: Prove that a + n = b + n implies a = b for all natural numbers",
    "FL": "theorem add_right_cancel_dev_2 (a b n : \u2115) : a + n = b + n \u2192 a = b := by",
    "state": "a b n : \u2115\n\u22a2 a + n = b + n \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_2",
    "NL": "-- induct on n",
    "FL": "induction n with d hd",
    "state": "case zero\na b : \u2115\n\u22a2 a + 0 = b + 0 \u2192 a = b\ncase succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_2",
    "NL": "-- assume a + 0 = b + 0",
    "FL": "intro h",
    "state": "case zero\na b : \u2115\nh : a + 0 = b + 0\n\u22a2 a = b\ncase succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_2",
    "NL": "-- a + 0 = b + 0 -> a = b",
    "FL": "repeat rw [add_zero] at h",
    "state": "case zero\na b : \u2115\nh : a = b\n\u22a2 a = b\ncase succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_2",
    "NL": "-- a = b, as desired",
    "FL": "exact h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\n\u22a2 a + succ d = b + succ d \u2192 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_2",
    "NL": "-- assume a + succ d = b + succ d",
    "FL": "intro h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : a + succ d = b + succ d\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_2",
    "NL": "-- a + succ d = b + succ d -> succ (a + d) = succ (b + d)",
    "FL": "repeat rw [add_succ] at h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : succ (a + d) = succ (b + d)\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_2",
    "NL": "-- succ (a + d) = succ (b + d) -> a + d = b + d",
    "FL": "apply succ_inj at h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : a + d = b + d\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_2",
    "NL": "-- a + d = b + d -> a = b by inductive hypothesis",
    "FL": "apply hd at h",
    "state": "case succ\na b d : \u2115\nhd : a + d = b + d \u2192 a = b\nh : a = b\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_right_cancel_dev_2",
    "NL": "-- a = b, as desired",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_left_cancel",
    "NL": "-- Theorem Declaration: Prove that a + n = b + n implies a = b for all natural numbers",
    "FL": "theorem add_left_cancel (a b n : \u2115) : n + a = n + b \u2192 a = b := by",
    "state": "a b n : \u2115\n\u22a2 n + a = n + b \u2192 a = b\n"
  },
  {
    "theorem": "add_left_cancel",
    "NL": "-- Rewrite the goal by repeatedly swapping the addition operands in the left side of both equations, changing n + a = n + b to a + n = b + n.",
    "FL": "repeat rw [add_comm n]",
    "state": "a b n : \u2115\n\u22a2 a + n = b + n \u2192 a = b\n"
  },
  {
    "theorem": "add_left_cancel",
    "NL": "-- Assume that the statement 'a + n = b + n' is true and denote it as 'h'. Then, our new goal is to prove that 'a = b'.",
    "FL": "intro h",
    "state": "a b n : \u2115\nh : a + n = b + n\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_left_cancel",
    "NL": "-- Simplify the hypothesis 'h' using the theorem 'add_right_cancel' assuming the theorem is true, which leaves the goal state unchanged as 'a = b'",
    "FL": "apply add_right_cancel at h",
    "state": "a b n : \u2115\nh : a = b\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_left_cancel",
    "NL": "-- h proves the goal a = b so we can use it to finish the proof",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_left_cancel_dev_1",
    "NL": "-- Theorem Declaration: Prove that a + n = b + n implies a = b for all natural numbers",
    "FL": "theorem add_left_cancel_dev_1 (a b n : \u2115) : n + a = n + b \u2192 a = b := by",
    "state": "a b n : \u2115\n\u22a2 n + a = n + b \u2192 a = b\n"
  },
  {
    "theorem": "add_left_cancel_dev_1",
    "NL": "-- We use the commutativity of addition to change n + a = n + b into a + n = b + n.",
    "FL": "repeat rw [add_comm n]",
    "state": "a b n : \u2115\n\u22a2 a + n = b + n \u2192 a = b\n"
  },
  {
    "theorem": "add_left_cancel_dev_1",
    "NL": "-- So, we just need to show that a + n = b + n \u2192 a = b. We start by assuming a + n = b + n.",
    "FL": "intro h",
    "state": "a b n : \u2115\nh : a + n = b + n\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_left_cancel_dev_1",
    "NL": "-- By the theorem that a + n = b + n -> a = b, we have that a = b.",
    "FL": "apply add_right_cancel at h",
    "state": "a b n : \u2115\nh : a = b\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_left_cancel_dev_1",
    "NL": "-- So, a = b, as desired.",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_left_cancel_dev_2",
    "NL": "-- Theorem Declaration: Prove that a + n = b + n implies a = b for all natural numbers",
    "FL": "theorem add_left_cancel_dev_2 (a b n : \u2115) : n + a = n + b \u2192 a = b := by",
    "state": "a b n : \u2115\n\u22a2 n + a = n + b \u2192 a = b\n"
  },
  {
    "theorem": "add_left_cancel_dev_2",
    "NL": "-- (n + a = n + b \u2192 a = b) -> (a + n = b + n \u2192 a = b)",
    "FL": "repeat rw [add_comm n]",
    "state": "a b n : \u2115\n\u22a2 a + n = b + n \u2192 a = b\n"
  },
  {
    "theorem": "add_left_cancel_dev_2",
    "NL": "-- assume a + n = b + n",
    "FL": "intro h",
    "state": "a b n : \u2115\nh : a + n = b + n\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_left_cancel_dev_2",
    "NL": "-- a + n = b + n -> a = b",
    "FL": "apply add_right_cancel at h",
    "state": "a b n : \u2115\nh : a = b\n\u22a2 a = b\n"
  },
  {
    "theorem": "add_left_cancel_dev_2",
    "NL": "-- a = b, as desired",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_left_eq_self",
    "NL": "-- Theorem Declaration: Prove that x + y = y implies x = 0 for all natural numbers",
    "FL": "theorem add_left_eq_self (x y : \u2115) : x + y = y \u2192 x = 0 := by",
    "state": "x y : \u2115\n\u22a2 x + y = y \u2192 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self",
    "NL": "-- Assume that x + y = y as our hypothesis h, and then prove that x = 0.",
    "FL": "intro h",
    "state": "x y : \u2115\nh : x + y = y\n\u22a2 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self",
    "NL": "-- Rewrite the second occurrence of the theorem 'zero_add y' in reverse in the hypothesis 'h', but the goal 'x = 0' remains unchanged.",
    "FL": "nth_rewrite 2 [\u2190 zero_add y] at h",
    "state": "x y : \u2115\nh : x + y = 0 + y\n\u22a2 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self",
    "NL": "-- If a + n = b + n, then a = b. So, in our case, if x + y = 0 + y, then x = 0.",
    "FL": "apply add_right_cancel at h",
    "state": "x y : \u2115\nh : x = 0\n\u22a2 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self",
    "NL": "-- h proves the goal x = 0 so we can use it to finish the proof",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_left_eq_self_dev_1",
    "NL": "-- Theorem Declaration: Prove that x + y = y implies x = 0 for all natural numbers",
    "FL": "theorem add_left_eq_self_dev_1 (x y : \u2115) : x + y = y \u2192 x = 0 := by",
    "state": "x y : \u2115\n\u22a2 x + y = y \u2192 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self_dev_1",
    "NL": "-- To show x + y = y \u2192 x = 0, we begin by assuming x + y = y.",
    "FL": "intro h",
    "state": "x y : \u2115\nh : x + y = y\n\u22a2 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self_dev_1",
    "NL": "-- We use the fact that 0 + n = n to change x + y = y into x + y = 0 + y.",
    "FL": "nth_rewrite 2 [\u2190 zero_add y] at h",
    "state": "x y : \u2115\nh : x + y = 0 + y\n\u22a2 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self_dev_1",
    "NL": "-- We use the theorem that a + n = b + n \u2192 a = b on the fact x + y = 0 + y.",
    "FL": "apply add_right_cancel at h",
    "state": "x y : \u2115\nh : x = 0\n\u22a2 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self_dev_1",
    "NL": "-- So, x = 0, as desired.",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_left_eq_self_dev_2",
    "NL": "-- Theorem Declaration: Prove that x + y = y implies x = 0 for all natural numbers",
    "FL": "theorem add_left_eq_self_dev_2 (x y : \u2115) : x + y = y \u2192 x = 0 := by",
    "state": "x y : \u2115\n\u22a2 x + y = y \u2192 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self_dev_2",
    "NL": "-- assume x + y = y",
    "FL": "intro h",
    "state": "x y : \u2115\nh : x + y = y\n\u22a2 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self_dev_2",
    "NL": "-- x + y = y -> x + y = 0 + y",
    "FL": "nth_rewrite 2 [\u2190 zero_add y] at h",
    "state": "x y : \u2115\nh : x + y = 0 + y\n\u22a2 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self_dev_2",
    "NL": "-- x + y = 0 + y -> x = 0",
    "FL": "apply add_right_cancel at h",
    "state": "x y : \u2115\nh : x = 0\n\u22a2 x = 0\n"
  },
  {
    "theorem": "add_left_eq_self_dev_2",
    "NL": "-- x = 0, as desired",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_right_eq_self",
    "NL": "-- Theorem Declaration: Prove that x + y = x implies y = 0 for all natural numbers",
    "FL": "theorem add_right_eq_self (x y : \u2115) : x + y = x \u2192 y = 0 := by",
    "state": "x y : \u2115\n\u22a2 x + y = x \u2192 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self",
    "NL": "-- Assume that x + y = x is true, then we need to prove that y = 0.",
    "FL": "intro h",
    "state": "x y : \u2115\nh : x + y = x\n\u22a2 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self",
    "NL": "-- Rewrite the expression in hypothesis h using the add_comm theorem, which states that addition is commutative i.e., for all natural numbers a and b, a + b = b + a.",
    "FL": "rw [add_comm] at h",
    "state": "x y : \u2115\nh : y + x = x\n\u22a2 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self",
    "NL": "-- For any natural numbers x, y: x + y = y implies x = 0. So, in our case, it implies that if y = 0.",
    "FL": "apply add_left_eq_self at h",
    "state": "x y : \u2115\nh : y = 0\n\u22a2 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self",
    "NL": "-- h proves the goal y = 0 so we can use it to finish the proof",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_right_eq_self_dev_1",
    "NL": "-- Theorem Declaration: Prove that x + y = x implies y = 0 for all natural numbers",
    "FL": "theorem add_right_eq_self_dev_1 (x y : \u2115) : x + y = x \u2192 y = 0 := by",
    "state": "x y : \u2115\n\u22a2 x + y = x \u2192 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self_dev_1",
    "NL": "-- To show x + y = x \u2192 y = 0, we start by assuming x + y = x.",
    "FL": "intro h",
    "state": "x y : \u2115\nh : x + y = x\n\u22a2 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self_dev_1",
    "NL": "-- By the commutativity of addition, we know that y + x = x.",
    "FL": "rw [add_comm] at h",
    "state": "x y : \u2115\nh : y + x = x\n\u22a2 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self_dev_1",
    "NL": "-- We apply the theorem that a + b = b implies that a = 0.",
    "FL": "apply add_left_eq_self at h",
    "state": "x y : \u2115\nh : y = 0\n\u22a2 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self_dev_1",
    "NL": "-- So, y = 0, as desired.",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_right_eq_self_dev_2",
    "NL": "-- Theorem Declaration: Prove that x + y = x implies y = 0 for all natural numbers",
    "FL": "theorem add_right_eq_self_dev_2 (x y : \u2115) : x + y = x \u2192 y = 0 := by",
    "state": "x y : \u2115\n\u22a2 x + y = x \u2192 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self_dev_2",
    "NL": "-- assume x + y = x",
    "FL": "intro h",
    "state": "x y : \u2115\nh : x + y = x\n\u22a2 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self_dev_2",
    "NL": "-- x + y = x -> y + x = x",
    "FL": "rw [add_comm] at h",
    "state": "x y : \u2115\nh : y + x = x\n\u22a2 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self_dev_2",
    "NL": "-- y + x = x -> y = 0",
    "FL": "apply add_left_eq_self at h",
    "state": "x y : \u2115\nh : y = 0\n\u22a2 y = 0\n"
  },
  {
    "theorem": "add_right_eq_self_dev_2",
    "NL": "-- y = 0, as desired.",
    "FL": "exact h",
    "state": ""
  },
  {
    "theorem": "add_right_eq_zero",
    "NL": "-- Theorem Declaration: ",
    "FL": "theorem add_right_eq_zero (a b : \u2115) : a + b = 0 \u2192 a = 0 := by",
    "state": "a b : \u2115\n\u22a2 a + b = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero",
    "NL": "-- Split the natural number 'b' into two cases: 'b' is zero, and 'b' is the successor of another natural number 'd'.",
    "FL": "cases b with d",
    "state": "case zero\na : \u2115\n\u22a2 a + 0 = 0 \u2192 a = 0\ncase succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero",
    "NL": "-- Assume that the hypothesis 'h' is true, that is, a + 0 = 0. The goal now is to prove that a = 0.",
    "FL": "intro h",
    "state": "case zero\na : \u2115\nh : a + 0 = 0\n\u22a2 a = 0\ncase succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero",
    "NL": "-- Repeatedly apply the theorem that adding zero to any number does not change its value to the hypothesis h.",
    "FL": "rw [add_zero] at h",
    "state": "case zero\na : \u2115\nh : a = 0\n\u22a2 a = 0\ncase succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero",
    "NL": "-- We use the hypothesis 'h' which is a proof that 'a = 0' to close the current goal. The new goal is now to prove that 'a + succ d = 0' implies 'a = 0'.",
    "FL": "exact h",
    "state": "case succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero",
    "NL": "-- Assume that the hypothesis 'h' is true, that is, a + succ d = 0. The goal now is to prove that a = 0.",
    "FL": "intro h",
    "state": "case succ\na d : \u2115\nh : a + succ d = 0\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero",
    "NL": "-- For any natural numbers x and y, x + succ y = succ (x + y). Applying this repeatedly simplifies the hypothesis but leaves the goal state a = 0 unchanged.",
    "FL": "rw [add_succ] at h",
    "state": "case succ\na d : \u2115\nh : succ (a + d) = 0\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero",
    "NL": "-- Swap the left-hand side and the right-hand side of the equality in the hypothesis.",
    "FL": "symm at h",
    "state": "case succ\na d : \u2115\nh : 0 = succ (a + d)\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero",
    "NL": "-- Apply the theorem that states that the successor of any natural number cannot equal 0 to our hypothesis h which shows that h is false.",
    "FL": "apply zero_ne_succ at h",
    "state": "case succ\na d : \u2115\nh : False\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero",
    "NL": "-- Since h is a proof of False, and there are no ways to construct False so we have our contradiction and can close the proof",
    "FL": "cases h",
    "state": ""
  },
  {
    "theorem": "add_right_eq_zero_dev_1",
    "NL": "-- Theorem Declaration: ",
    "FL": "theorem add_right_eq_zero_dev_1 (a b : \u2115) : a + b = 0 \u2192 a = 0 := by",
    "state": "a b : \u2115\n\u22a2 a + b = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_1",
    "NL": "-- We have two cases: b = 0, or b = succ d for some natural number d.",
    "FL": "cases b with d",
    "state": "case zero\na : \u2115\n\u22a2 a + 0 = 0 \u2192 a = 0\ncase succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_1",
    "NL": "-- In the former case, we must show that a + 0 = 0 \u2192 a = 0, so we start by assuming that a + 0 = 0.",
    "FL": "intro h",
    "state": "case zero\na : \u2115\nh : a + 0 = 0\n\u22a2 a = 0\ncase succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_1",
    "NL": "-- We apply the theorem that n + 0 = n change a + 0 = 0 into a = 0.",
    "FL": "rw [add_zero] at h",
    "state": "case zero\na : \u2115\nh : a = 0\n\u22a2 a = 0\ncase succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_1",
    "NL": "-- So, a = 0, which concludes this case of the theorem.",
    "FL": "exact h",
    "state": "case succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_1",
    "NL": "-- In the latter case, we must show that a + succ d = 0 \u2192 a = 0, so we start by assuming that a + succ d = 0.",
    "FL": "intro h",
    "state": "case succ\na d : \u2115\nh : a + succ d = 0\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_1",
    "NL": "-- Using the theorem that a + succ d = succ (a + d), we get that succ (a + d) = 0.",
    "FL": "rw [add_succ] at h",
    "state": "case succ\na d : \u2115\nh : succ (a + d) = 0\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_1",
    "NL": "-- By the symmetry of equality, we have that 0 = succ (a + d).",
    "FL": "symm at h",
    "state": "case succ\na d : \u2115\nh : 0 = succ (a + d)\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_1",
    "NL": "-- But since 0 is not the successor of anything, we have a contradiction/falsehood.",
    "FL": "apply zero_ne_succ at h",
    "state": "case succ\na d : \u2115\nh : False\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_1",
    "NL": "-- Since a contradiction/falsehood implies anything, we are done.",
    "FL": "cases h",
    "state": ""
  },
  {
    "theorem": "add_right_eq_zero_dev_2",
    "NL": "-- Theorem Declaration: ",
    "FL": "theorem add_right_eq_zero_dev_2 (a b : \u2115) : a + b = 0 \u2192 a = 0 := by",
    "state": "a b : \u2115\n\u22a2 a + b = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_2",
    "NL": "-- either b = 0 or b = succ d for some natural number d",
    "FL": "cases b with d",
    "state": "case zero\na : \u2115\n\u22a2 a + 0 = 0 \u2192 a = 0\ncase succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_2",
    "NL": "-- (case 1) assume a + 0 = 0",
    "FL": "intro h",
    "state": "case zero\na : \u2115\nh : a + 0 = 0\n\u22a2 a = 0\ncase succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_2",
    "NL": "-- a + 0 = 0 -> a = 0",
    "FL": "rw [add_zero] at h",
    "state": "case zero\na : \u2115\nh : a = 0\n\u22a2 a = 0\ncase succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_2",
    "NL": "-- a = 0, as desired",
    "FL": "exact h",
    "state": "case succ\na d : \u2115\n\u22a2 a + succ d = 0 \u2192 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_2",
    "NL": "-- (case 2) assume a + succ d = 0",
    "FL": "intro h",
    "state": "case succ\na d : \u2115\nh : a + succ d = 0\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_2",
    "NL": "-- a + succ d = 0 -> succ (a + d) = 0",
    "FL": "rw [add_succ] at h",
    "state": "case succ\na d : \u2115\nh : succ (a + d) = 0\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_2",
    "NL": "-- succ (a + d) = 0 -> 0 = succ (a + d)",
    "FL": "symm at h",
    "state": "case succ\na d : \u2115\nh : 0 = succ (a + d)\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_2",
    "NL": "-- 0 = succ (a + d) -> False",
    "FL": "apply zero_ne_succ at h",
    "state": "case succ\na d : \u2115\nh : False\n\u22a2 a = 0\n"
  },
  {
    "theorem": "add_right_eq_zero_dev_2",
    "NL": "-- False -> anything",
    "FL": "cases h",
    "state": ""
  },
  {
    "theorem": "add_left_eq_zero",
    "NL": "-- Theorem Declaration: Prove that a + b = 0 implies b = 0 for all natural numbers",
    "FL": "theorem add_left_eq_zero (a b : \u2115) : a + b = 0 \u2192 b = 0 := by",
    "state": "a b : \u2115\n\u22a2 a + b = 0 \u2192 b = 0\n"
  },
  {
    "theorem": "add_left_eq_zero",
    "NL": "-- Rewrite the goal by swapping the addition operands in the left side of both equations, changing a + b = 0 to b + a = 0.",
    "FL": "rw [add_comm]",
    "state": "a b : \u2115\n\u22a2 b + a = 0 \u2192 b = 0\n"
  },
  {
    "theorem": "add_left_eq_zero",
    "NL": "-- Apply the theorem that states that if a + b = 0, then b = 0 for all natural numbers.",
    "FL": "exact add_right_eq_zero b a",
    "state": ""
  },
  {
    "theorem": "add_left_eq_zero_dev_1",
    "NL": "-- Theorem Declaration: Prove that a + b = 0 implies b = 0 for all natural numbers",
    "FL": "theorem add_left_eq_zero_dev_1 (a b : \u2115) : a + b = 0 \u2192 b = 0 := by",
    "state": "a b : \u2115\n\u22a2 a + b = 0 \u2192 b = 0\n"
  },
  {
    "theorem": "add_left_eq_zero_dev_1",
    "NL": "-- By the commutativity of addition, it suffices to show that b + a = 0 \u2192 b = 0",
    "FL": "rw [add_comm]",
    "state": "a b : \u2115\n\u22a2 b + a = 0 \u2192 b = 0\n"
  },
  {
    "theorem": "add_left_eq_zero_dev_1",
    "NL": "-- But this is exactly the same as the theorem that a + b = 0 \u2192 a = 0, so we are done.",
    "FL": "exact add_right_eq_zero b a",
    "state": ""
  },
  {
    "theorem": "add_left_eq_zero_dev_2",
    "NL": "-- Theorem Declaration: Prove that a + b = 0 implies b = 0 for all natural numbers",
    "FL": "theorem add_left_eq_zero_dev_2 (a b : \u2115) : a + b = 0 \u2192 b = 0 := by",
    "state": "a b : \u2115\n\u22a2 a + b = 0 \u2192 b = 0\n"
  },
  {
    "theorem": "add_left_eq_zero_dev_2",
    "NL": "-- (a + b = 0 \u2192 b = 0) -> (b + a = 0 \u2192 b = 0)",
    "FL": "rw [add_comm]",
    "state": "a b : \u2115\n\u22a2 b + a = 0 \u2192 b = 0\n"
  },
  {
    "theorem": "add_left_eq_zero_dev_2",
    "NL": "-- b + a = 0 \u2192 b = 0 by a previous theorem, so done",
    "FL": "exact add_right_eq_zero b a",
    "state": ""
  }
]