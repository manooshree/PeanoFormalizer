[
  {
    "theorem": "truncated_zero_add",
    "NL": "-- Theorem Declaration: Prove that succ (a) + b  = succ (a + b) for all natural numbers",
    "FL": "theorem truncated_zero_add (n : \u2115) : 0 + n = n := by",
    "state": "n : \u2115\n\u22a2 0 + n = n\n"
  },
  {
    "theorem": "truncated_zero_add",
    "NL": "-- Induct on n, with d = 0 as the base case and the inductive hypothesis 0 + d = d. There are now two proof goals, prove base case: 0 + 0 = 0, and inductive step: 0 + succ (d) = succ (d)",
    "FL": "induction n with d hd",
    "state": "case zero\n\u22a2 0 + 0 = 0\ncase succ\nd : \u2115\nhd : 0 + d = d\n\u22a2 0 + succ d = succ d\n"
  },
  {
    "theorem": "truncated_zero_add",
    "NL": "-- First prove base case. Reduce LHS 0 + 0 = 0.",
    "FL": "rw [add_zero]",
    "state": "case zero\n\u22a2 0 = 0\ncase succ\nd : \u2115\nhd : 0 + d = d\n\u22a2 0 + succ d = succ d\n"
  },
  {
    "theorem": "truncated_zero_add",
    "NL": "-- Prove LHS and RHS are equal, 0 = 0, completing base case",
    "FL": "rfl",
    "state": "case succ\nd : \u2115\nhd : 0 + d = d\n\u22a2 0 + succ d = succ d\n"
  },
  {
    "theorem": "truncated_succ_add",
    "NL": "-- Theorem Declaration: Prove that succ (a) + b  = succ (a + b) for all natural numbers",
    "FL": "theorem truncated_succ_add (a b : \u2115) : succ a + b = succ (a + b)  := by",
    "state": "a b : \u2115\n\u22a2 succ a + b = succ (a + b)\n"
  },
  {
    "theorem": "truncated_succ_add",
    "NL": "-- Induct on b, with d = 0 as the base case and the inductive hypothesis succ (a) + d = succ (a + d). There are now two proof goals, prove base case: succ (a) + 0 = succ (a + 0) and inductive step: succ (a) + succ (d) = succ (a + succ (d))",
    "FL": "induction b with d hd",
    "state": "case zero\na : \u2115\n\u22a2 succ a + 0 = succ (a + 0)\ncase succ\na d : \u2115\nhd : succ a + d = succ (a + d)\n\u22a2 succ a + succ d = succ (a + succ d)\n"
  },
  {
    "theorem": "truncated_succ_add",
    "NL": "-- First prove base case. Reduce LHS succ (a) + 0 = succ (a)",
    "FL": "rw [add_zero]",
    "state": "case zero\na : \u2115\n\u22a2 succ a = succ (a + 0)\ncase succ\na d : \u2115\nhd : succ a + d = succ (a + d)\n\u22a2 succ a + succ d = succ (a + succ d)\n"
  },
  {
    "theorem": "truncated_succ_add",
    "NL": "-- Reduce RHS succ(a + 0) = succ (a)",
    "FL": "rw [add_zero]",
    "state": "case zero\na : \u2115\n\u22a2 succ a = succ a\ncase succ\na d : \u2115\nhd : succ a + d = succ (a + d)\n\u22a2 succ a + succ d = succ (a + succ d)\n"
  },
  {
    "theorem": "truncated_succ_add",
    "NL": "-- Prove succ (a) = succ (a), finishing the base case",
    "FL": "rfl",
    "state": "case succ\na d : \u2115\nhd : succ a + d = succ (a + d)\n\u22a2 succ a + succ d = succ (a + succ d)\n"
  },
  {
    "theorem": "truncated_succ_add_2",
    "NL": "-- Theorem Declaration: Prove that addition is commutative, that is a + b  = b + a for all natural numbers",
    "FL": "theorem truncated_succ_add_2 (a b : \u2115) : succ a + b = succ (a + b)  := by",
    "state": "a b : \u2115\n\u22a2 succ a + b = succ (a + b)\n"
  },
  {
    "theorem": "truncated_succ_add_2",
    "NL": "-- Induct on b, with d = 0 as the base case and the inductive hypothesis succ (a) + d = succ (a + d). There are now two proof goals, prove base case: succ (a) + 0 = succ (a + 0) and inductive step: succ (a) + succ (d) = succ (a + succ (d))",
    "FL": "induction b with d hd",
    "state": "case zero\na : \u2115\n\u22a2 succ a + 0 = succ (a + 0)\ncase succ\na d : \u2115\nhd : succ a + d = succ (a + d)\n\u22a2 succ a + succ d = succ (a + succ d)\n"
  },
  {
    "theorem": "truncated_succ_add_2",
    "NL": "-- First prove base case. Reduce LHS succ (a) + 0 = succ (a)",
    "FL": "rw [add_zero]",
    "state": "case zero\na : \u2115\n\u22a2 succ a = succ (a + 0)\ncase succ\na d : \u2115\nhd : succ a + d = succ (a + d)\n\u22a2 succ a + succ d = succ (a + succ d)\n"
  },
  {
    "theorem": "truncated_succ_add_2",
    "NL": "-- Reduce RHS succ(a + 0) = succ (a)",
    "FL": "rw [add_zero]",
    "state": "case zero\na : \u2115\n\u22a2 succ a = succ a\ncase succ\na d : \u2115\nhd : succ a + d = succ (a + d)\n\u22a2 succ a + succ d = succ (a + succ d)\n"
  },
  {
    "theorem": "truncated_succ_add_logically_eq",
    "NL": "-- Theorem Declaration: Prove that the addition of natural numbers is associative, that is a + b + c = a + (b + c).",
    "FL": "theorem truncated_succ_add_logically_eq (a b : \u2115) : succ a + b = succ (a + b)  := by",
    "state": "a b : \u2115\n\u22a2 succ a + b = succ (a + b)\n"
  },
  {
    "theorem": "truncated_succ_add_logically_eq",
    "NL": "-- Initiate induction on b, the base case (b=0) succ(a) + 0 = succ(a + 0)",
    "FL": "induction b with n hn",
    "state": "case zero\na : \u2115\n\u22a2 succ a + 0 = succ (a + 0)\ncase succ\na n : \u2115\nhn : succ a + n = succ (a + n)\n\u22a2 succ a + succ n = succ (a + succ n)\n"
  },
  {
    "theorem": "truncated_succ_add_logically_eq",
    "NL": "-- We start by proving the base case using the fact that c + 0 = c \u2200 c \u2208 \u2115 and setting c := a giving us succ(a) + 0 = succ(a)",
    "FL": "rw [add_zero]",
    "state": "case zero\na : \u2115\n\u22a2 succ a = succ (a + 0)\ncase succ\na n : \u2115\nhn : succ a + n = succ (a + n)\n\u22a2 succ a + succ n = succ (a + succ n)\n"
  },
  {
    "theorem": "truncated_succ_add_logically_eq",
    "NL": "-- Now we can set c = succ(a) and use c + 0 = c \u2200 c \u2208 \u2115 again to get succ(a) = succ(a)",
    "FL": "rw [add_zero]",
    "state": "case zero\na : \u2115\n\u22a2 succ a = succ a\ncase succ\na n : \u2115\nhn : succ a + n = succ (a + n)\n\u22a2 succ a + succ n = succ (a + succ n)\n"
  },
  {
    "theorem": "truncated_succ_add_logically_eq",
    "NL": "-- THIS IS TOTALLY WEIRD BUT A DEVIATION NEVERTHELESS",
    "FL": "theorem truncated_succ_add_logical_deviation_1 (a b : \u2115) : succ a + b = succ (a + b) := by",
    "state": "case zero\na : \u2115\n\u22a2 succ a = succ a\ncase succ\na n : \u2115\nhn : succ a + n = succ (a + n)\n\u22a2 succ a + succ n = succ (a + succ n)\na b : \u2115\n\u22a2 succ a + b = succ (a + b)\n"
  },
  {
    "theorem": "truncated_succ_add_logical_deviation_1",
    "NL": "-- Theorem Declaration: Prove that the addition of natural numbers is associative, that is a + b + c = a + (b + c).",
    "FL": "theorem truncated_succ_add_logical_deviation_1 (a b : \u2115) : succ a + b = succ (a + b) := by",
    "state": "a b : \u2115\n\u22a2 succ a + b = succ (a + b)\n"
  },
  {
    "theorem": "truncated_succ_add_logical_deviation_1",
    "NL": "-- Initiate induction on b, the base case (b=0) succ(a) + 0 = succ(a + 0)",
    "FL": "induction b with n hn",
    "state": "case zero\na : \u2115\n\u22a2 succ a + 0 = succ (a + 0)\ncase succ\na n : \u2115\nhn : succ a + n = succ (a + n)\n\u22a2 succ a + succ n = succ (a + succ n)\n"
  },
  {
    "theorem": "truncated_succ_add_logical_deviation_1",
    "NL": "-- We start by proving the base case using the fact that c + 0 = c \u2200 c \u2208 \u2115 and setting c := succ(a) giving us succ(a) = succ(a + 0)",
    "FL": "rw [add_zero]",
    "state": "case zero\na : \u2115\n\u22a2 succ a = succ (a + 0)\ncase succ\na n : \u2115\nhn : succ a + n = succ (a + n)\n\u22a2 succ a + succ n = succ (a + succ n)\n"
  },
  {
    "theorem": "truncated_succ_add_logical_deviation_1",
    "NL": "-- Now we can set c = a and use c + 0 = c \u2200 c \u2208 \u2115 again to get succ(a) = succ(a)",
    "FL": "rw [add_zero]",
    "state": "case zero\na : \u2115\n\u22a2 succ a = succ a\ncase succ\na n : \u2115\nhn : succ a + n = succ (a + n)\n\u22a2 succ a + succ n = succ (a + succ n)\n"
  },
  {
    "theorem": "truncated_succ_add_logical_deviation_2",
    "NL": "-- Theorem Declaration: ",
    "FL": "theorem truncated_succ_add_logical_deviation_2 (a b : \u2115) : succ a + b = succ (a + b)  := by",
    "state": "a b : \u2115\n\u22a2 succ a + b = succ (a + b)\n"
  },
  {
    "theorem": "truncated_succ_add_logical_deviation_2",
    "NL": "-- Initiate induction on b, the base case (b=0) succ(a) + 0 = succ(a + 0)",
    "FL": "induction b with n hn",
    "state": "case zero\na : \u2115\n\u22a2 succ a + 0 = succ (a + 0)\ncase succ\na n : \u2115\nhn : succ a + n = succ (a + n)\n\u22a2 succ a + succ n = succ (a + succ n)\n"
  },
  {
    "theorem": "truncated_succ_add_logical_deviation_2",
    "NL": "-- We start by proving the base case using the fact that succ(a+b) = a + succ(b) and setting b = 0 and substituting on the RHS",
    "FL": "rw [\u2190 add_succ]",
    "state": "case zero\na : \u2115\n\u22a2 succ a + 0 = a + succ 0\ncase succ\na n : \u2115\nhn : succ a + n = succ (a + n)\n\u22a2 succ a + succ n = succ (a + succ n)\n"
  },
  {
    "theorem": "truncated_add_comm",
    "NL": "-- Theorem Declaration: Prove that addition is commutative, that is a + b  = b + a for all natural numbers",
    "FL": "theorem truncated_add_comm (a b : \u2115) : a + b = b + a := by",
    "state": "a b : \u2115\n\u22a2 a + b = b + a\n"
  },
  {
    "theorem": "truncated_add_comm",
    "NL": "-- Induct on b, with d = 0 as the base case and the inductive hypothesis a + d = d + a. There are now two proof goals, prove base case: a + 0 = 0 + a and the inductive step: a + succ d = succ d + a",
    "FL": "induction b with d hd",
    "state": "case zero\na : \u2115\n\u22a2 a + 0 = 0 + a\ncase succ\na d : \u2115\nhd : a + d = d + a\n\u22a2 a + succ d = succ d + a\n"
  },
  {
    "theorem": "truncated_add_comm",
    "NL": "-- First prove base case. Simplify LHS a + 0 = a.",
    "FL": "rw [add_zero]",
    "state": "case zero\na : \u2115\n\u22a2 a = 0 + a\ncase succ\na d : \u2115\nhd : a + d = d + a\n\u22a2 a + succ d = succ d + a\n"
  },
  {
    "theorem": "truncated_add_comm",
    "NL": "-- Simplify RHS 0 + a = a",
    "FL": "rw [zero_add]",
    "state": "case zero\na : \u2115\n\u22a2 a = a\ncase succ\na d : \u2115\nhd : a + d = d + a\n\u22a2 a + succ d = succ d + a\n"
  },
  {
    "theorem": "truncated_add_comm",
    "NL": "-- Prove LHS and RHS are equal, a = a, completing the base case.",
    "FL": "rfl",
    "state": "case succ\na d : \u2115\nhd : a + d = d + a\n\u22a2 a + succ d = succ d + a\n"
  },
  {
    "theorem": "truncated_add_comm_2",
    "NL": "-- Theorem Declaration: Prove that addition is commutative, that is a + b  = b + a for all natural numbers",
    "FL": "theorem truncated_add_comm_2 (a b : \u2115) : a + b = b + a := by",
    "state": "a b : \u2115\n\u22a2 a + b = b + a\n"
  },
  {
    "theorem": "truncated_add_comm_2",
    "NL": "-- Induct on b, with d = 0 as the base case and the inductive hypothesis a + d = d + a. There are now two proof goals, prove base case: a + 0 = 0 + a and the inductive step: a + succ d = succ d + a",
    "FL": "induction b with d hd",
    "state": "case zero\na : \u2115\n\u22a2 a + 0 = 0 + a\ncase succ\na d : \u2115\nhd : a + d = d + a\n\u22a2 a + succ d = succ d + a\n"
  },
  {
    "theorem": "truncated_add_comm_2",
    "NL": "-- First prove base case. Simplify LHS a + 0 = a and RHS 0 + a = a.",
    "FL": "rw [add_zero, zero_add]",
    "state": "case zero\na : \u2115\n\u22a2 a = a\ncase succ\na d : \u2115\nhd : a + d = d + a\n\u22a2 a + succ d = succ d + a\n"
  },
  {
    "theorem": "truncated_add_comm_2",
    "NL": "-- Prove LHS and RHS are equal, a = a, completing the base case.",
    "FL": "rfl",
    "state": "case succ\na d : \u2115\nhd : a + d = d + a\n\u22a2 a + succ d = succ d + a\n"
  },
  {
    "theorem": "truncated_add_comm_3",
    "NL": "-- Theorem Declaration: Prove that the addition of natural numbers is associative, i.e., a + b + c = a + (b + c).",
    "FL": "theorem truncated_add_comm_3 (a b : \u2115) : a + b = b + a := by",
    "state": "a b : \u2115\n\u22a2 a + b = b + a\n"
  },
  {
    "theorem": "truncated_add_comm_3",
    "NL": "-- Induct on a, with d = 0 as the base case and the inductive hypothesis d + b = b + d. There are now two proof goals, prove base case: 0 + b = b + 0 and the inductive step: succ d + b = b + succ d",
    "FL": "induction a with d hd",
    "state": "case zero\nb : \u2115\n\u22a2 0 + b = b + 0\ncase succ\nb d : \u2115\nhd : d + b = b + d\n\u22a2 succ d + b = b + succ d\n"
  },
  {
    "theorem": "truncated_add_comm_3",
    "NL": "-- First prove base case. Simplify RHS b + 0 = b and LHS 0 + b = b",
    "FL": "rw [add_zero, zero_add]",
    "state": "case zero\nb : \u2115\n\u22a2 b = b\ncase succ\nb d : \u2115\nhd : d + b = b + d\n\u22a2 succ d + b = b + succ d\n"
  },
  {
    "theorem": "truncated_add_comm_3",
    "NL": "-- Prove LHS and RHS are equal, b = b, completing the base case.",
    "FL": "rfl",
    "state": "case succ\nb d : \u2115\nhd : d + b = b + d\n\u22a2 succ d + b = b + succ d\n"
  },
  {
    "theorem": "truncated_add_assoc",
    "NL": "-- Theorem Declaration: Prove that the addition of natural numbers is associative, i.e., a + b + c = a + (b + c).",
    "FL": "theorem truncated_add_assoc (a b c : \u2115) : a + b + c = a + (b + c) := by",
    "state": "a b c : \u2115\n\u22a2 a + b + c = a + (b + c)\n"
  },
  {
    "theorem": "truncated_add_assoc",
    "NL": "-- Induct on c, with d = 0 as the base case and the inductive hypothesis a + b + d = a + (b + d). There are now two proof goals, prove base case: a + b + 0 = a + (b + 0), and inductive step: a + b + succ (d) = a + (b + succ (d))",
    "FL": "induction c with d hd",
    "state": "case zero\na b : \u2115\n\u22a2 a + b + 0 = a + (b + 0)\ncase succ\na b d : \u2115\nhd : a + b + d = a + (b + d)\n\u22a2 a + b + succ d = a + (b + succ d)\n"
  },
  {
    "theorem": "truncated_add_assoc",
    "NL": "-- First prove base case. Simplify LHS a + b + 0 = a + b",
    "FL": "rw [add_zero]",
    "state": "case zero\na b : \u2115\n\u22a2 a + b = a + (b + 0)\ncase succ\na b d : \u2115\nhd : a + b + d = a + (b + d)\n\u22a2 a + b + succ d = a + (b + succ d)\n"
  },
  {
    "theorem": "truncated_add_assoc",
    "NL": "-- Reduce RHS a + (b + 0) to a + b",
    "FL": "rw [add_zero]",
    "state": "case zero\na b : \u2115\n\u22a2 a + b = a + b\ncase succ\na b d : \u2115\nhd : a + b + d = a + (b + d)\n\u22a2 a + b + succ d = a + (b + succ d)\n"
  },
  {
    "theorem": "truncated_add_assoc_2",
    "NL": "-- Theorem Declaration: Prove that the addition of natural numbers is commutative, that is a + b + c = a + c + b",
    "FL": "theorem truncated_add_assoc_2 (a b c : \u2115) : a + b + c = a + (b + c) := by",
    "state": "a b c : \u2115\n\u22a2 a + b + c = a + (b + c)\n"
  },
  {
    "theorem": "truncated_add_assoc_2",
    "NL": "-- Induct on c, with d = 0 as the base case and the inductive hypothesis a + b + d = a + (b + d). There are now two proof goals, prove base case: a + b + 0 = a + (b + 0), and inductive step: a + b + succ (d) = a + (b + succ (d)).",
    "FL": "induction c with d hd",
    "state": "case zero\na b : \u2115\n\u22a2 a + b + 0 = a + (b + 0)\ncase succ\na b d : \u2115\nhd : a + b + d = a + (b + d)\n\u22a2 a + b + succ d = a + (b + succ d)\n"
  },
  {
    "theorem": "truncated_add_assoc_2",
    "NL": "-- First we prove the base case. Simplify the LHS and RHS both to a + b",
    "FL": "rw [add_zero, add_zero]",
    "state": "case zero\na b : \u2115\n\u22a2 a + b = a + b\ncase succ\na b d : \u2115\nhd : a + b + d = a + (b + d)\n\u22a2 a + b + succ d = a + (b + succ d)\n"
  },
  {
    "theorem": "truncated_add_assoc_2",
    "NL": "-- Prove LHS and RHS are equal, a + b = a + b, completing the base case.",
    "FL": "rfl",
    "state": "case succ\na b d : \u2115\nhd : a + b + d = a + (b + d)\n\u22a2 a + b + succ d = a + (b + succ d)\n"
  },
  {
    "theorem": "truncated_add_right_comm",
    "NL": "-- Theorem Declaration: Prove that the addition of natural numbers is commutative, that is a + b + c = a + c + b",
    "FL": "theorem truncated_add_right_comm (a b c : \u2115) : a + b + c = a + c + b := by",
    "state": "a b c : \u2115\n\u22a2 a + b + c = a + c + b\n"
  },
  {
    "theorem": "truncated_add_right_comm",
    "NL": "-- Apply the associative property of addition to rewrite the LHS of the equation, changing a + b + c to a + (b + c)",
    "FL": "rw [add_assoc]",
    "state": "a b c : \u2115\n\u22a2 a + (b + c) = a + c + b\n"
  },
  {
    "theorem": "truncated_add_right_comm",
    "NL": "-- Rewrite the LHS of the equation by applying the commutative property of addition to b and c, LHS is now a + (c + b)",
    "FL": "rw [add_comm b]",
    "state": "a b c : \u2115\n\u22a2 a + (c + b) = a + c + b\n"
  },
  {
    "theorem": "truncated_add_right_comm_2",
    "NL": "-- Theorem Declaration: Prove that the addition of natural numbers is associative, that is a + b + c = a + (b + c).",
    "FL": "theorem truncated_add_right_comm_2 (a b c : \u2115) : a + b + c = a + c + b := by",
    "state": "a b c : \u2115\n\u22a2 a + b + c = a + c + b\n"
  },
  {
    "theorem": "truncated_add_right_comm_2",
    "NL": "-- Apply the associative property of addition to rewrite the LHS: a + b + c to a + (b + c).",
    "FL": "rw [add_assoc]",
    "state": "a b c : \u2115\n\u22a2 a + (b + c) = a + c + b\n"
  },
  {
    "theorem": "truncated_add_right_comm_2",
    "NL": "-- Rewrite the LHS using the commutative property of addition for b and c: a + (b + c) to a + (c + b).",
    "FL": "rw [add_comm b c]",
    "state": "a b c : \u2115\n\u22a2 a + (c + b) = a + c + b\n"
  }
]