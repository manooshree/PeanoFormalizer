[
  {
    "theorem": "succ_add",
    "NL": "Prove that succ (a) + b  = succ (a + b) for all natural numbers",
    "FL": "theorem succ_add1 (a b : ℕ) : succ a + b = succ (a + b)  := by",
    "prev_goal": "",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "succ_add",
    "NL": "Induct on b, with d = 0 as the base case and the inductive hypothesis succ (a) + d = succ (a + d). There are now two proof goals, prove base case: succ (a) + 0 = succ (a + 0) and inductive step: succ (a) + succ (d) = succ (a + succ (d))",
    "FL": "induction b with d hd",
    "prev_goal": "a b : ℕ\n⊢ succ a + b = succ (a + b)",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "succ_add", 
    "NL": "First prove base case. Reduce LHS succ (a) + 0 = succ (a)",
    "FL": "· rw [add_zero]",
    "prev_goal": "case zero\na : ℕ\n⊢ succ a + 0 = succ (a + 0)\ncase succ\na d : ℕ\nhd : succ a + d = succ (a + d)\n⊢ succ a + succ d = succ (a + succ d)",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "succ_add",
    "NL": "Reduce RHS succ(a + 0) = succ (a)",
    "FL": "rw [add_zero]",
    "prev_goal": "case zero\na : ℕ\n⊢ succ a = succ (a + 0)\ncase succ\na d : ℕ\nhd : succ a + d = succ (a + d)\n⊢ succ a + succ d = succ (a + succ d)",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "succ_add",
    "NL": "Prove succ (a) = succ (a), finishing the base case",
    "FL": "rfl",
    "prev_goal": "case zero\na : ℕ\n⊢ succ a = succ a\ncase succ\na d : ℕ\nhd : succ a + d = succ (a + d)\n⊢ succ a + succ d = succ (a + succ d)",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "succ_add",
    "NL": "Now prove the inductive step. Rewrite succ (a) + succ (d) = succ (succ a + d)",
    "FL": "· rw [add_succ]",
    "prev_goal": "case succ\na d : ℕ\nhd : succ a + d = succ (a + d)\n⊢ succ a + succ d = succ (a + succ d)",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "succ_add",
    "NL": "Rewrite succ (a + succ d) = succ (succ (a + d))",
    "FL": "rw [add_succ]",
    "prev_goal": "case succ\na d : ℕ\nhd : succ a + d = succ (a + d)\n⊢ succ (succ a + d) = succ (a + succ d)",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "succ_add",
    "NL": "Rewrite RHS succ (succ a + d) to succ (succ (a + d)) using the inductive hypothesis",
    "FL": "rw [hd]",
    "prev_goal": "case succ\na d : ℕ\nhd : succ a + d = succ (a + d)\n⊢ succ (succ a + d) = succ (succ (a + d))",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "succ_add",
    "NL": "Prove succ (succ (a + d)) = succ (succ (a + d)), completing the proof",
    "FL": "rfl",
    "prev_goal": "case succ\na d : ℕ\nhd : succ a + d = succ (a + d)\n⊢ succ (succ (a + d)) = succ (succ (a + d))",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "add_left_eq_zero",
    "NL": "Prove that a + b = 0 implies b = 0 for all natural numbers",
    "FL": "theorem add_left_eq_zero (a b : ℕ) : a + b = 0 → b = 0 := by",
    "prev_goal": "",
    "filename": "AdvAdditionClean.lean"
  },
  {
    "theorem": "add_left_eq_zero",
    "NL": "Rewrite the goal by swapping the addition operands in the left side of both equations, changing a + b = 0 to b + a = 0.",
    "FL": "rw [add_comm]",
    "prev_goal": "a b : ℕ\n⊢ a + b = 0 → b = 0",
    "filename": "AdvAdditionClean.lean"
  },
  {
    "theorem": "add_left_eq_zero",
    "NL": "Apply the theorem that states that if a + b = 0, then b = 0 for all natural numbers.",
    "FL": "exact add_right_eq_zero b a",
    "prev_goal": "a b : ℕ\n⊢ b + a = 0 → b = 0",
    "filename": "AdvAdditionClean.lean"
  },
  {
    "theorem": "add_assoc",
    "NL": "Prove that the addition of natural numbers is associative, i.e., a + b + c = a + (b + c).",
    "FL": "theorem add_assoc (a b c : ℕ) : a + b + c = a + (b + c) := by",
    "prev_goal": "",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "add_assoc",
    "NL": "Induct on c, with d = 0 as the base case and the inductive hypothesis a + b + d = a + (b + d). There are now two proof goals, prove base case: a + b + 0 = a + (b + 0), and inductive step: a + b + succ (d) = a + (b + succ (d))",
    "FL": "induction c with d hd",
    "prev_goal": "a b c : ℕ\n⊢ a + b + c = a + (b + c)",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "add_assoc",
    "NL": "First prove base case. Simplify LHS a + b + 0 = a + b",
    "FL": "· rw [add_zero]",
    "prev_goal": "case zero\na b : ℕ\n⊢ a + b + 0 = a + (b + 0)\ncase succ\na b d : ℕ\nhd : a + b + d = a + (b + d)\n⊢ a + b + succ d = a + (b + succ d)",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "add_assoc",
    "NL": "Reduce RHS a + (b + 0) to a + b",
    "FL": "rw [add_zero]",
    "prev_goal": "case zero\na b : ℕ\n⊢ a + b = a + (b + 0)\ncase succ\na b d : ℕ\nhd : a + b + d = a + (b + d)\n⊢ a + b + succ d = a + (b + succ d)",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "add_assoc",
    "NL": "Prove LHS and RHS are equal, a + b = a + b, completing the base case.",
    "FL": "rfl",
    "prev_goal": "case zero\na b : ℕ\n⊢ a + b = a + b",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "add_assoc",
    "NL": "Now prove the inductive step. Rewrite the LHS expression a + b + succ d to succ (a + b + d)",
    "FL": "· rw [add_succ]",
    "prev_goal": "case succ\na d : ℕ\nhd : a + b + d = a + (b + d)\n⊢ a + b + succ d = a + (b + succ d)",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "add_assoc",
    "NL": "Rewrite RHS a + (b + succ d) to a + succ (b + d)",
    "FL": "rw [add_succ]",
    "prev_goal": "case succ\na d : ℕ\nhd : succ a + d = succ (a + d)\n⊢ succ (succ a + d) = succ (a + succ d)",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "add_assoc",
    "NL": "Use the inductive hypothesis to rewrite the left-hand side, changing succ (a + b + d) to succ (a + (b + d))",
    "FL": "rw [hd]",
    "prev_goal": "case succ\na d : ℕ\nhd : succ a + d = succ (a + d)\n⊢ succ (succ a + d) = succ (succ (a + d))",
    "filename": "AdditionClean.lean"
  },
  {
    "theorem": "add_assoc",
    "NL": "Prove LHS and RHS are equal, succ (a + (b + d)) = succ (a + (b + d)), completing the proof",
    "FL": "rfl",
    "prev_goal": "case succ\na d : ℕ\nhd : succ a + d = succ (a + d)\n⊢ succ (succ (a + d)) = succ (succ (a + d))",
    "filename": "AdditionClean.lean"
  }
]