{
    "exact": {
        "exact_dev_1": [
            {
                "NL": "-- Proof Statement: Prove that given some x, y, z which are natural numbers, x + y = 37. We can assume that x + y = 37 and 3 * x + z = 42",
                "FL": "theorem exact_dev_1 (x y z : \u2115) (h1 : x + y = 37) (h2 : 3 * x + z = 42) : x + y = 37 := by",
                "state": "x y z : \u2115\nh1 : x + y = 37\nh2 : 3 * x + z = 42\n\u22a2 x + y = 37\n"
            },
            {
                "NL": "  -- By hypothesis, we know x + y = 37, so we are done.",
                "FL": "  exact h1",
                "state": ""
            }
        ],
        "exact_dev_2": [
            {
                "NL": "-- Proof Statement: Prove that given some x, y, z which are natural numbers, x + y = 37. We can assume that x + y = 37 and 3 * x + z = 42",
                "FL": "theorem exact_dev_2 (x y z : \u2115) (h1 : x + y = 37) (h2 : 3 * x + z = 42) : x + y = 37 := by",
                "state": "x y z : \u2115\nh1 : x + y = 37\nh2 : 3 * x + z = 42\n\u22a2 x + y = 37\n"
            },
            {
                "NL": "  -- x + y = 37",
                "FL": "  exact h1",
                "state": ""
            }
        ]
    },
    "exact_2": {
        "exact_2_dev_1": [
            {
                "NL": "-- Proof Statement: For some x which is a natural number, given that  0 + x = 0 + y + 2, prove x = y + 2",
                "FL": "theorem exact_2_dev_1 (x : \u2115) (h : 0 + x = 0 + y + 2) : x = y + 2 := by",
                "state": "y x : \u2115\nh : 0 + x = 0 + y + 2\n\u22a2 x = y + 2\n"
            },
            {
                "NL": "  -- We simplify the hypothesis of 0 + x = 0 + y + 2 to x = x = y + 2.",
                "FL": "  rw [zero_add, zero_add] at h",
                "state": "y x : \u2115\nh : x = y + 2\n\u22a2 x = y + 2\n"
            },
            {
                "NL": "  -- So, x = y + 2, which is exactly what we wanted to prove.",
                "FL": "  exact h",
                "state": ""
            }
        ],
        "exact_2_dev_2": [
            {
                "NL": "-- Proof Statement: For some x which is a natural number, given that  0 + x = 0 + y + 2, prove x = y + 2",
                "FL": "theorem exact_2_dev_2 (x : \u2115) (h : 0 + x = 0 + y + 2) : x = y + 2 := by",
                "state": "y x : \u2115\nh : 0 + x = 0 + y + 2\n\u22a2 x = y + 2\n"
            },
            {
                "NL": "  -- 0 + x = 0 + y + 2 -> 0 + x = y + 2",
                "FL": "  rw [\u2190 zero_add x]",
                "state": "y x : \u2115\nh : 0 + x = 0 + y + 2\n\u22a2 0 + x = y + 2\n"
            },
            {
                "NL": "  -- 0 + x = y + 2 -> 0 + x = 0 + y + 2",
                "FL": "  rw [\u2190 zero_add y]",
                "state": "y x : \u2115\nh : 0 + x = 0 + y + 2\n\u22a2 0 + x = 0 + y + 2\n"
            },
            {
                "NL": "  -- x = y + 2",
                "FL": "  exact h",
                "state": ""
            }
        ]
    },
    "exact_3": {
        "exact_3_dev_1": [
            {
                "NL": "-- Proof Statement: For some x which is a natural number, given that  0 + x = 0 + y + 2, prove x = y + 2",
                "FL": "theorem exact_3_dev_1 (x : \u2115) (h : 0 + x = 0 + y + 2) : x = y + 2 := by",
                "state": "y x : \u2115\nh : 0 + x = 0 + y + 2\n\u22a2 x = y + 2\n"
            },
            {
                "NL": "  -- Simplify 0 + x = 0 + y + 2 to x = y + 2",
                "FL": "  repeat rw [zero_add] at h",
                "state": "y x : \u2115\nh : x = y + 2\n\u22a2 x = y + 2\n"
            },
            {
                "NL": "  -- So, x = y + 2, which is exactly what we wanted to prove.",
                "FL": "  exact h",
                "state": ""
            }
        ],
        "exact_3_dev_2": [
            {
                "NL": "-- Proof Statement: For some x which is a natural number, given that  0 + x = 0 + y + 2, prove x = y + 2",
                "FL": "theorem exact_3_dev_2 (x : \u2115) (h : 0 + x = 0 + y + 2) : x = y + 2 := by",
                "state": "y x : \u2115\nh : 0 + x = 0 + y + 2\n\u22a2 x = y + 2\n"
            },
            {
                "NL": "  -- 0 + x = 0 + y + 2 -> x = y + 2",
                "FL": "  repeat rw [zero_add] at h",
                "state": "y x : \u2115\nh : x = y + 2\n\u22a2 x = y + 2\n"
            },
            {
                "NL": "  -- x = y + 2",
                "FL": "  exact h",
                "state": ""
            }
        ]
    },
    "exact_4": {
        "exact_4_dev_1": [
            {
                "NL": "-- Proof Statement: For some x and y which are natural numbers, given that  x = 37 and that x = 37 implied y = 42, prove y = 42",
                "FL": "theorem exact_4_dev_1 (x y : \u2115) (h1 : x = 37) (h2 : x = 37 \u2192 y = 42) : y = 42 := by",
                "state": "x y : \u2115\nh1 : x = 37\nh2 : x = 37 \u2192 y = 42\n\u22a2 y = 42\n"
            },
            {
                "NL": "  -- x = 37 \u2192 y = 42 and x = 37, so by modus ponens, y = 42.",
                "FL": "  apply h2 at h1",
                "state": "x y : \u2115\nh2 : x = 37 \u2192 y = 42\nh1 : y = 42\n\u22a2 y = 42\n"
            },
            {
                "NL": "  -- So y = 42, which is exactly what we wanted to prove.",
                "FL": "  exact h1",
                "state": ""
            }
        ],
        "exact_4_dev_2": [
            {
                "NL": "-- Proof Statement: For some x and y which are natural numbers, given that  x = 37 and that x = 37 implied y = 42, prove y = 42",
                "FL": "theorem exact_4_dev_2 (x y : \u2115) (h1 : x = 37) (h2 : x = 37 \u2192 y = 42) : y = 42 := by",
                "state": "x y : \u2115\nh1 : x = 37\nh2 : x = 37 \u2192 y = 42\n\u22a2 y = 42\n"
            },
            {
                "NL": "  -- x = 37, x = 37 -> y = 42 => y = 42",
                "FL": "  apply h2 at h1",
                "state": "x y : \u2115\nh2 : x = 37 \u2192 y = 42\nh1 : y = 42\n\u22a2 y = 42\n"
            },
            {
                "NL": "  -- y = 42",
                "FL": "  exact h1",
                "state": ""
            }
        ]
    },
    "exact_5": {
        "exact_5_dev_1": [
            {
                "NL": "-- Proof Statement: For some x which is a natural number, given x + 1 = 4, prove that x = 3",
                "FL": "theorem exact_5_dev_1 (x : \u2115) (h : x + 1 = 4) : x = 3 := by",
                "state": "x : \u2115\nh : x + 1 = 4\n\u22a2 x = 3\n"
            },
            {
                "NL": "  -- We replace 4 with succ 3 in x + 1 = 4.",
                "FL": "  rw [four_eq_succ_three] at h",
                "state": "x : \u2115\nh : x + 1 = succ 3\n\u22a2 x = 3\n"
            },
            {
                "NL": "  -- We replace x + 1 with succ x in x + 1 = succ 3.",
                "FL": "  rw [\u2190succ_eq_add_one] at h",
                "state": "x : \u2115\nh : succ x = succ 3\n\u22a2 x = 3\n"
            },
            {
                "NL": "  -- By the injectivity of succ, x = 3.",
                "FL": "  apply succ_inj at h",
                "state": "x : \u2115\nh : x = 3\n\u22a2 x = 3\n"
            },
            {
                "NL": "  -- So, x = 3, which is exactly what we wanted to prove.",
                "FL": "  exact h",
                "state": ""
            }
        ],
        "exact_5_dev_2": [
            {
                "NL": "-- Proof Statement: For some x which is a natural number, given x + 1 = 4, prove that x = 3",
                "FL": "theorem exact_5_dev_2 (x : \u2115) (h : x + 1 = 4) : x = 3 := by",
                "state": "x : \u2115\nh : x + 1 = 4\n\u22a2 x = 3\n"
            },
            {
                "NL": "  -- x + 1 = 4 -> x + 1 = succ 3",
                "FL": "  rw [four_eq_succ_three] at h",
                "state": "x : \u2115\nh : x + 1 = succ 3\n\u22a2 x = 3\n"
            },
            {
                "NL": "  -- x + 1 = 4 -> succ x = succ 3",
                "FL": "  rw [\u2190succ_eq_add_one] at h",
                "state": "x : \u2115\nh : succ x = succ 3\n\u22a2 x = 3\n"
            },
            {
                "NL": "  -- succ x = succ 3 -> x = 3",
                "FL": "  apply succ_inj at h",
                "state": "x : \u2115\nh : x = 3\n\u22a2 x = 3\n"
            },
            {
                "NL": "  -- x = 3",
                "FL": "  exact h",
                "state": ""
            }
        ]
    },
    "exact_6": {
        "exact_6_dev_1": [
            {
                "NL": "-- Proof Statement: For some x, which is a natural number, given x + 1 = 4, prove that x = 3",
                "FL": "theorem exact_6_dev_1 (x : \u2115) (h : x + 1 = 4) : x = 3 := by",
                "state": "x : \u2115\nh : x + 1 = 4\n\u22a2 x = 3\n"
            },
            {
                "NL": "  -- By the injectivity of succ, it suffices to prove succ x = succ 3",
                "FL": "  apply succ_inj",
                "state": "case h\nx : \u2115\nh : x + 1 = 4\n\u22a2 succ x = succ 3\n"
            },
            {
                "NL": "  -- We replace succ x with x + 1 in succ x = succ 3.",
                "FL": "  rw [succ_eq_add_one]",
                "state": "case h\nx : \u2115\nh : x + 1 = 4\n\u22a2 x + 1 = succ 3\n"
            },
            {
                "NL": "  -- We replace succ 3 with 4 in x + 1 = succ 3.",
                "FL": "  rw [\u2190 four_eq_succ_three]",
                "state": "case h\nx : \u2115\nh : x + 1 = 4\n\u22a2 x + 1 = 4\n"
            },
            {
                "NL": "  -- So, we need to show x + 1 = 4, which is true by hypothesis.",
                "FL": "  exact h",
                "state": ""
            }
        ],
        "exact_6_dev_2": [
            {
                "NL": "-- Proof Statement: For some x, which is a natural number, given x + 1 = 4, prove that x = 3",
                "FL": "theorem exact_6_dev_2 (x : \u2115) (h : x + 1 = 4) : x = 3 := by",
                "state": "x : \u2115\nh : x + 1 = 4\n\u22a2 x = 3\n"
            },
            {
                "NL": "  -- x = 3 <- succ x = succ 3",
                "FL": "  apply succ_inj",
                "state": "case h\nx : \u2115\nh : x + 1 = 4\n\u22a2 succ x = succ 3\n"
            },
            {
                "NL": "  -- succ x = succ 3 -> x + 1 = succ 3",
                "FL": "  rw [succ_eq_add_one]",
                "state": "case h\nx : \u2115\nh : x + 1 = 4\n\u22a2 x + 1 = succ 3\n"
            },
            {
                "NL": "  -- x + 1 = succ 3 -> x + 1 = 4",
                "FL": "  rw [\u2190 four_eq_succ_three]",
                "state": "case h\nx : \u2115\nh : x + 1 = 4\n\u22a2 x + 1 = 4\n"
            },
            {
                "NL": "  -- x + 1 = 4",
                "FL": "  exact h",
                "state": ""
            }
        ]
    },
    "exact_7": {
        "exact_7_dev_1": [
            {
                "NL": "-- Proof Statement: For some x which is a natural number, prove that x = 37 implies x = 37",
                "FL": "theorem exact_7_dev_1 (x : \u2115) : x = 37 \u2192 x = 37 := by",
                "state": "x : \u2115\n\u22a2 x = 37 \u2192 x = 37\n"
            },
            {
                "NL": "  -- Consider the hypothesis x = 37.",
                "FL": "  intro h",
                "state": "x : \u2115\nh : x = 37\n\u22a2 x = 37\n"
            },
            {
                "NL": "  -- So, x = 37, which is what we want to show.",
                "FL": "  exact h",
                "state": ""
            }
        ],
        "exact_7_dev_2": [
            {
                "NL": "-- Proof Statement: For some x which is a natural number, prove that x = 37 implies x = 37",
                "FL": "theorem exact_7_dev_2 (x : \u2115) : x = 37 \u2192 x = 37 := by",
                "state": "x : \u2115\n\u22a2 x = 37 \u2192 x = 37\n"
            },
            {
                "NL": "  -- assume x = 37",
                "FL": "  intro h",
                "state": "x : \u2115\nh : x = 37\n\u22a2 x = 37\n"
            },
            {
                "NL": "  -- x = 37",
                "FL": "  exact h",
                "state": ""
            }
        ]
    },
    "exact_8": {
        "exact_8_dev_1": [
            {
                "NL": "-- Proof Statement: For some x and which are natural numbers, prove that x + 1 = y + 1 implies x = y",
                "FL": "theorem exact_8_dev_1 (x : \u2115) : x + 1 = y + 1 \u2192 x = y := by",
                "state": "y x : \u2115\n\u22a2 x + 1 = y + 1 \u2192 x = y\n"
            },
            {
                "NL": "  -- Consider the hypothesis x + 1 = y + 1.",
                "FL": "  intro h",
                "state": "y x : \u2115\nh : x + 1 = y + 1\n\u22a2 x = y\n"
            },
            {
                "NL": "  -- Change the + 1s to succs in x + 1 = y + 1.",
                "FL": "  repeat rw [\u2190 succ_eq_add_one] at h",
                "state": "y x : \u2115\nh : succ x = succ y\n\u22a2 x = y\n"
            },
            {
                "NL": "  -- By the injectivity of succ, x = y.",
                "FL": "  apply succ_inj at h",
                "state": "y x : \u2115\nh : x = y\n\u22a2 x = y\n"
            },
            {
                "NL": "  -- Thus, x = y, which is exactly what we wanted to show.",
                "FL": "  exact h",
                "state": ""
            }
        ],
        "exact_8_dev_2": [
            {
                "NL": "-- Proof Statement: For some x and which are natural numbers, prove that x + 1 = y + 1 implies x = y",
                "FL": "theorem exact_8_dev_2 (x : \u2115) : x + 1 = y + 1 \u2192 x = y := by",
                "state": "y x : \u2115\n\u22a2 x + 1 = y + 1 \u2192 x = y\n"
            },
            {
                "NL": "  -- assume x + 1 = y + 1",
                "FL": "  intro h",
                "state": "y x : \u2115\nh : x + 1 = y + 1\n\u22a2 x = y\n"
            },
            {
                "NL": "  -- x + 1 = y + 1 -> succ x = succ y",
                "FL": "  repeat rw [\u2190 succ_eq_add_one] at h",
                "state": "y x : \u2115\nh : succ x = succ y\n\u22a2 x = y\n"
            },
            {
                "NL": "  -- succ x = succ y -> x = y",
                "FL": "  apply succ_inj at h",
                "state": "y x : \u2115\nh : x = y\n\u22a2 x = y\n"
            },
            {
                "NL": "  -- x = y",
                "FL": "  exact h",
                "state": ""
            }
        ]
    },
    "exact_9": {
        "exact_9_dev_1": [
            {
                "NL": "-- Proof Statement: For some x and which are natural numbers, prove that x + 1 = y + 1 implies x = y",
                "FL": "theorem exact_9_dev_1 (x : \u2115) : x + 1 = y + 1 \u2192 x = y := by",
                "state": "y x : \u2115\n\u22a2 x + 1 = y + 1 \u2192 x = y\n"
            },
            {
                "NL": "  -- Consider the hypothesis x + 1 = y + 1",
                "FL": "  intro h",
                "state": "y x : \u2115\nh : x + 1 = y + 1\n\u22a2 x = y\n"
            },
            {
                "NL": "  -- By the injectivity of succ, it suffices to show that succ x = succ y",
                "FL": "  apply succ_inj",
                "state": "case h\ny x : \u2115\nh : x + 1 = y + 1\n\u22a2 succ x = succ y\n"
            },
            {
                "NL": "  -- We replace succ with + 1 in succ x = succ y",
                "FL": "  repeat rw [succ_eq_add_one]",
                "state": "case h\ny x : \u2115\nh : x + 1 = y + 1\n\u22a2 x + 1 = y + 1\n"
            },
            {
                "NL": "  -- So we want to show x + 1 = y + 1, which is true by hypothesis",
                "FL": "  exact h",
                "state": ""
            }
        ],
        "exact_9_dev_2": [
            {
                "NL": "-- Proof Statement: For some x and which are natural numbers, prove that x + 1 = y + 1 implies x = y",
                "FL": "theorem exact_9_dev_2 (x : \u2115) : x + 1 = y + 1 \u2192 x = y := by",
                "state": "y x : \u2115\n\u22a2 x + 1 = y + 1 \u2192 x = y\n"
            },
            {
                "NL": "  -- assume x + 1 = y + 1",
                "FL": "  intro h",
                "state": "y x : \u2115\nh : x + 1 = y + 1\n\u22a2 x = y\n"
            },
            {
                "NL": "  -- x = y <- succ x = succ y",
                "FL": "  apply succ_inj",
                "state": "case h\ny x : \u2115\nh : x + 1 = y + 1\n\u22a2 succ x = succ y\n"
            },
            {
                "NL": "  -- succ x = succ y -> x + 1 = y + 1",
                "FL": "  repeat rw [succ_eq_add_one]",
                "state": "case h\ny x : \u2115\nh : x + 1 = y + 1\n\u22a2 x + 1 = y + 1\n"
            },
            {
                "NL": "  -- x + 1 = y + 1",
                "FL": "  exact h",
                "state": ""
            }
        ]
    },
    "exact_10": {
        "exact_10_dev_1": [
            {
                "NL": "-- Proof Statement: For some x and which are natural numbers, prove that both x = y and x \u2260 y cannot be true",
                "FL": "theorem exact_10_dev_1 (x y : \u2115) (h1 : x = y) (h2 : x \u2260 y) : False := by",
                "state": "x y : \u2115\nh1 : x = y\nh2 : x \u2260 y\n\u22a2 False\n"
            },
            {
                "NL": "  -- We have x \u2260 y (which really means x = y -> False), and we know x = y, so by modus ponens, we know False",
                "FL": "  apply h2 at h1",
                "state": "x y : \u2115\nh2 : x \u2260 y\nh1 : False\n\u22a2 False\n"
            },
            {
                "NL": "  -- So we have a falsehood/contradiction, which is exactly what we wanted to show.",
                "FL": "  exact h1",
                "state": ""
            }
        ],
        "exact_10_dev_2": [
            {
                "NL": "-- Proof Statement: For some x and which are natural numbers, prove that both x = y and x \u2260 y cannot be true",
                "FL": "theorem exact_10_dev_2 (x y : \u2115) (h1 : x = y) (h2 : x \u2260 y) : False := by",
                "state": "x y : \u2115\nh1 : x = y\nh2 : x \u2260 y\n\u22a2 False\n"
            },
            {
                "NL": "  -- x = y and x \u2260 y -> False",
                "FL": "  apply h2 at h1",
                "state": "x y : \u2115\nh2 : x \u2260 y\nh1 : False\n\u22a2 False\n"
            },
            {
                "NL": "  -- False",
                "FL": "  exact h1",
                "state": ""
            }
        ]
    },
    "zero_ne_one": {
        "zero_ne_one_dev_1": [
            {
                "NL": "-- Proof Statement: Given that 0 is a natural number, prove that 0 \u2260 1",
                "FL": "theorem zero_ne_one_dev_1 : (0 : \u2115) \u2260 1 := by",
                "state": "\u22a2 0 \u2260 1\n"
            },
            {
                "NL": "  -- To show 0 \u2260 1, we must assume 0 = 1 and derive a contradiction/falsehood",
                "FL": "  intro h",
                "state": "h : 0 = 1\n\u22a2 False\n"
            },
            {
                "NL": "  -- But 0 = 1 implies a falsehood by the theorem that zero is not equal to the success of any natural number",
                "FL": "  apply zero_ne_succ at h",
                "state": "h : False\n\u22a2 False\n"
            },
            {
                "NL": "  -- So, we have a falsehood, as desired.",
                "FL": "  exact h",
                "state": ""
            }
        ],
        "zero_ne_one_dev_2": [
            {
                "NL": "-- Proof Statement: Given that 0 is a natural number, prove that 0 \u2260 1",
                "FL": "theorem zero_ne_one_dev_2 : (0 : \u2115) \u2260 1 := by",
                "state": "\u22a2 0 \u2260 1\n"
            },
            {
                "NL": "  -- assume 0 = 1",
                "FL": "  intro h",
                "state": "h : 0 = 1\n\u22a2 False\n"
            },
            {
                "NL": "  -- 0 = 1 -> False",
                "FL": "  apply zero_ne_succ at h",
                "state": "h : False\n\u22a2 False\n"
            },
            {
                "NL": "  -- False",
                "FL": "  exact h",
                "state": ""
            }
        ]
    },
    "one_ne_zero": {
        "one_ne_zero_dev_1": [
            {
                "NL": "-- Proof Statement: Given that 1 is a natural number, prove that 1 \u2260 0",
                "FL": "theorem one_ne_zero_dev_1 : (1 : \u2115) \u2260 0 := by",
                "state": "\u22a2 1 \u2260 0\n"
            },
            {
                "NL": "  -- Instead of showing 1 \u2260 0, we can show 0 \u2260 1",
                "FL": "  symm",
                "state": "\u22a2 0 \u2260 1\n"
            },
            {
                "NL": "  -- But 0 \u2260 1 by a previous theorem.",
                "FL": "  exact zero_ne_one",
                "state": ""
            }
        ],
        "one_ne_zero_dev_2": [
            {
                "NL": "-- Proof Statement: Given that 1 is a natural number, prove that 1 \u2260 0",
                "FL": "theorem one_ne_zero_dev_2 : (1 : \u2115) \u2260 0 := by",
                "state": "\u22a2 1 \u2260 0\n"
            },
            {
                "NL": "  -- 1 \u2260 0 <- 0 \u2260 1",
                "FL": "  symm",
                "state": "\u22a2 0 \u2260 1\n"
            },
            {
                "NL": "  -- 0 \u2260 1 by previous thm",
                "FL": "  exact zero_ne_one",
                "state": ""
            }
        ]
    },
    "two_five": {
        "two_five_dev_1": [
            {
                "NL": "-- Proof Statement: Prove that 2 + 2 \u2260 5;  written in successor terms: succ (succ 0) + succ (succ 0) \u2260 succ (succ (succ (succ (succ 0))))",
                "FL": "theorem two_five_dev_1 : succ (succ 0) + succ (succ 0) \u2260 succ (succ (succ (succ (succ 0)))) := by",
                "state": "\u22a2 succ (succ 0) + succ (succ 0) \u2260 succ (succ (succ (succ (succ 0))))\n"
            },
            {
                "NL": "  -- We must assume succ (succ 0) + succ (succ 0) = succ (succ (succ (succ (succ 0)))) and derive a contradiction/falsehood.",
                "FL": "  intro h",
                "state": "h : succ (succ 0) + succ (succ 0) = succ (succ (succ (succ (succ 0))))\n\u22a2 False\n"
            },
            {
                "NL": "  -- Using our previous theorems, we can change succ (succ 0) + succ (succ 0) into succ (succ (succ (succ 0)))",
                "FL": "  rw [add_succ, add_succ, add_zero] at h",
                "state": "h : succ (succ (succ (succ 0))) = succ (succ (succ (succ (succ 0))))\n\u22a2 False\n"
            },
            {
                "NL": "  -- By the injectivity of succ, we know that 0 = succ 0",
                "FL": "  repeat apply succ_inj at h",
                "state": "h : 0 = succ 0\n\u22a2 False\n"
            },
            {
                "NL": "  -- By 0 is not equal to the success of any natural number, so we have a falsehood/contradiction",
                "FL": "  apply zero_ne_succ at h",
                "state": "h : False\n\u22a2 False\n"
            },
            {
                "NL": "  -- Thus, we have a falsehood/contradiction, which is what we wanted to show",
                "FL": "  exact h",
                "state": ""
            }
        ],
        "two_five_dev_2": [
            {
                "NL": "-- Proof Statement: Prove that 2 + 2 \u2260 5;  written in successor terms: succ (succ 0) + succ (succ 0) \u2260 succ (succ (succ (succ (succ 0))))",
                "FL": "theorem two_five_dev_2 : succ (succ 0) + succ (succ 0) \u2260 succ (succ (succ (succ (succ 0)))) := by",
                "state": "\u22a2 succ (succ 0) + succ (succ 0) \u2260 succ (succ (succ (succ (succ 0))))\n"
            },
            {
                "NL": "  -- assume succ (succ 0) + succ (succ 0) = succ (succ (succ (succ (succ 0))))",
                "FL": "  intro h",
                "state": "h : succ (succ 0) + succ (succ 0) = succ (succ (succ (succ (succ 0))))\n\u22a2 False\n"
            },
            {
                "NL": "  -- succ (succ 0) + succ (succ 0) = succ (succ (succ (succ (succ 0)))) -> succ (succ (succ (succ 0))) = succ (succ (succ (succ (succ 0))))",
                "FL": "  rw [add_succ, add_succ, add_zero] at h",
                "state": "h : succ (succ (succ (succ 0))) = succ (succ (succ (succ (succ 0))))\n\u22a2 False\n"
            },
            {
                "NL": "  -- succ (succ (succ (succ 0))) = succ (succ (succ (succ (succ 0)))) -> 0 = succ 0",
                "FL": "  repeat apply succ_inj at h",
                "state": "h : 0 = succ 0\n\u22a2 False\n"
            },
            {
                "NL": "  -- 0 = succ 0 -> False",
                "FL": "  apply zero_ne_succ at h",
                "state": "h : False\n\u22a2 False\n"
            },
            {
                "NL": "  -- False",
                "FL": "  exact h",
                "state": ""
            }
        ]
    }
}