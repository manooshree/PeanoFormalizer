World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
exact_2,exact_2_dev_1,-- We simplify the hypothesis of 0 + x = 0 + y + 2 to x = 0 + x + 2.,rw [zero_add] at h,rw [zero_add] at h,"y x : ℕ
h : x = 0 + y + 2
⊢ x = y + 2
","y x : ℕ
h : x = 0 + y + 2
⊢ x = y + 2
",Yes,No,Yes
exact_2,exact_2_dev_1,"-- So, x = y + 2, which is exactly what we wanted to prove.","rw [zero_add] at h, exact h",exact h,,"y x : ℕ
h : x = y + 2
⊢ x = y + 2
",No,Yes,No
exact_2,exact_2_dev_2,-- 0 + x = 0 + y + 2 -> x = 0 + y + 2,rw [zero_add] at h,rw [zero_add] at h,"y x : ℕ
h : x = 0 + y + 2
⊢ x = y + 2
","y x : ℕ
h : x = 0 + y + 2
⊢ x = y + 2
",Yes,No,Yes
exact_2,exact_2_dev_2,-- x = y + 2,"rw [zero_add] at h, exact h",exact h,,"y x : ℕ
h : x = y + 2
⊢ x = y + 2
",No,Yes,No
World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
zero_mul,zero_mul_train2,-- Proof by induction on m with base case 0 * 0 = 0 and inductive step 0 * d + 1 = 0,induction m with d hd,induction m with d hd,"case zero
⊢ 0 * 0 = 0
case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
","case zero
⊢ 0 * 0 = 0
case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
",Yes,No,Yes
zero_mul,zero_mul_train2,-- First prove base case. Simplify LHS 0 * 0 to 0,rw [mul_zero],rw [mul_zero],"case zero
⊢ 0 = 0
case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
","case zero
⊢ 0 = 0
case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
",Yes,No,Yes
zero_mul,zero_mul_train2,-- The base case is not complete.,rfl,rfl,"case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
","case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
",Yes,No,Yes
zero_mul,zero_mul_train2,-- Simplify the LHS 0 * d + 0 to 0 + 0 using the definition of addition,rw [mul_succ],rw [add_zero],"case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * d = 0
","case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * d + 0 = 0
",No,Yes,No
zero_mul,zero_mul_train2,-- This is exactly the inductive hypothesis so we can complete the proof.,rw [add_zero],exact hd,,"case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * d = 0
",No,Yes,No
zero_mul,zero_mul_test,-- Proof by induction on m with base case 0 * 0 = 0 and inductive step 0 * d + 1 = 0,induction m with d hd,induction m with d hd,"case zero
⊢ 0 * 0 = 0
case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
","case zero
⊢ 0 * 0 = 0
case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
",Yes,No,Yes
zero_mul,zero_mul_test,-- 0 * 0 = 0 -> 0 = 0,rw [mul_zero],rw [mul_zero],"case zero
⊢ 0 = 0
case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
","case zero
⊢ 0 = 0
case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
",Yes,No,Yes
zero_mul,zero_mul_test,-- That proves the base case.,rfl,rfl,"case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
","case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 * succ d = 0
",Yes,No,Yes
zero_mul,zero_mul_test,-- This is exactly the inductive hypothesis so we can complete the proof.,"rw [mul_succ, hd, add_zero]",exact hd,,"case succ
d : ℕ
hd : 0 * d = 0
⊢ 0 = 0
",No,Yes,No
World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
mul_left_ne_zero,mul_left_ne_zero_train1,-- Assume that b equals 0.,intro hd,intro hb,"a b : ℕ
h : a * b ≠ 0
hb : b = 0
⊢ False
","a b : ℕ
h : a * b ≠ 0
hd : b = 0
⊢ False
",No,No,Yes
mul_left_ne_zero,mul_left_ne_zero_train1,-- a * b = 0 -> a * 0 = 0 -> 0 = 0,"apply h
rw [hd, mul_zero]","rw [hb, mul_zero]","a b : ℕ
h : a * b ≠ 0
hb : b = 0
⊢ 0 = 0
","a b : ℕ
h : a * b ≠ 0
hd : b = 0
⊢ a * b = 0
",No,Yes,No
mul_left_ne_zero,mul_left_ne_zero_train1,-- We use reflexivity to prove the goal of 0 = 0.,rfl,rfl,,"a b : ℕ
h : a * b ≠ 0
hd : b = 0
⊢ a * b = 0
",Yes,Yes,No
mul_left_ne_zero,mul_left_ne_zero_test,-- Assume that b equals 0.,intro hd,intro hd,"a b : ℕ
h : a * b ≠ 0
hd : b = 0
⊢ False
","a b : ℕ
h : a * b ≠ 0
hd : b = 0
⊢ False
",Yes,No,Yes
mul_left_ne_zero,mul_left_ne_zero_test,-- a * 0 != 0 -> 0 != 0,"intro hd, apply h, rw [hd, mul_zero], rfl",rw [mul_zero] at h,"a b : ℕ
h : 0 ≠ 0
hd : b = 0
⊢ False
",error,No,Yes,Yes
mul_left_ne_zero,mul_left_ne_zero_test,-- We have 0 != 0 which is a contradiction.,rfl,tauto,,error,No,Yes,Yes
World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
add_left_comm,add_left_comm_dev_1,"-- By associativity of addition, can change a + (b + c) into (a + b) + c",rw [←add_assoc],rw [← add_assoc],"a b c : ℕ
⊢ a + b + c = b + (a + c)
","a b c : ℕ
⊢ a + b + c = b + (a + c)
",No,No,Yes
add_left_comm,add_left_comm_dev_1,"-- By the associativity of addition, can change (b + a) + c into b + (a + c)",rw [add_assoc],rw [add_assoc],"a b c : ℕ
⊢ b + (a + c) = b + (a + c)
","a b c : ℕ
⊢ a + (b + c) = b + (a + c)
",Yes,Yes,No
add_left_comm,add_left_comm_dev_1,"-- So we just need to show b + (a + c) = b + (a + c), which is true by reflexivity.","-- Considering the proof of the student it seems to have issues. Based on the available rules the correct lean code should be:
rw [add_assoc, add_comm a b, ← add_assoc]",rfl,,"a b c : ℕ
⊢ a + (b + c) = b + (a + c)
",No,Yes,No
add_left_comm,add_left_comm_dev_2,-- a + (b + c) = b + (a + c) -> (a + b) + c = b + (a + c),rw [← add_assoc],rw [← add_assoc],"a b c : ℕ
⊢ a + b + c = b + (a + c)
","a b c : ℕ
⊢ a + b + c = b + (a + c)
",Yes,No,Yes
add_left_comm,add_left_comm_dev_2,-- (a + b) + c = b + (a + c) -> (b + a) + c = b + (a + c),rw [add_comm a b],rw [add_comm a b],"a b c : ℕ
⊢ b + a + c = b + (a + c)
","a b c : ℕ
⊢ b + a + c = b + (a + c)
",Yes,No,Yes
add_left_comm,add_left_comm_dev_2,-- lhs = rhs,rw [add_assoc],rfl,,"a b c : ℕ
⊢ b + (a + c) = b + (a + c)
",No,Yes,No
World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
le_two,le_two1,-- Either x = 0 or x = succ y for some natural number y.,cases x with y,cases x with y,"case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two1,"-- In the former case, we need to show 0 = 0 ∨ 0 = 1 ∨ 0 = 2, and we choose to show 0 = 0.",left,left,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two1,-- This is clear by reflexivity.,rfl,rfl,"case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two1,"-- In the latter case, either y = 0 or y = succ z for some natural number z.",cases y with z,cases y with z,"case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two1,"-- In the former case, we must show succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2, and we choose to prove succ 0 = 1 ∨ succ 0 = 2",right,right,"case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two1,"-- To prove succ 0 = 1 ∨ succ 0 = 2, we choose to prove succ 0 = 1",left,left,"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two1,"-- Rewriting using a theorem, need to show show succ 0 = succ 0.",rw [one_eq_succ_zero],rw [one_eq_succ_zero],"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two1,-- This is clear by reflexivity.,rfl,rfl,"case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two1,"-- In the latter case, we substitute 2 = succ 1 and 1 = succ 0 into what we know and what we have to show.","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",Yes,No,Yes
le_two,le_two1,"-- We know that succ (succ z) ≤ succ (succ 0), so usinig a theorem we know succ z ≤ succ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",Yes,No,Yes
le_two,le_two1,"-- We know that succ z ≤ succ 0, so using a theorem we know that z ≤ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",Yes,No,Yes
le_two,le_two1,"-- Since z ≤ 0, using a theorem, z = 0.",apply le_zero at hx,apply le_zero at hx,"case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",Yes,No,Yes
le_two,le_two1,"-- So, we need to show that succ (succ 0) = 0 ∨ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0), so we choose to show that succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)",right,right,"case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)
","case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",Yes,Yes,No
le_two,le_two1,"-- We need to show that succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0), so we choose to show that succ (succ 0) = succ (succ 0)",right,right,"case succ.succ.h.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ (succ 0)
","case succ.succ.h.h
z : ℕ
hx : z = 0
⊢ succ (succ z) = succ (succ 0)
",Yes,Yes,No
le_two,le_two1,"-- But LHS = RHS, so this follows by reflexivity.",rw [hx],rfl,,"case succ.succ.h.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ (succ 0)
",No,Yes,No
le_two,le_two2,-- x = 0 (case 1) or x = succ y (case 2) for some natural number y,cases x with y,cases x with y,"case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two2,-- 0 = 0 ∨ 0 = 1 ∨ 0 = 2 -> 0 = 0,"left, rfl",left,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two2,-- lhs = rhs,rfl,rfl,"case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two2,-- y = 0 (case 1) or y = succ z (case 2) for some natural number z,cases y with z,cases y with z,"case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two2,-- succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2 -> succ 0 = 1 ∨ succ 0 = 2,right,right,"case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two2,-- succ 0 = 1 ∨ succ 0 = 2 -> succ 0 = 1,left,left,"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two2,-- succ 0 = 1 -> succ 0 = succ 0,rfl,rw [one_eq_succ_zero],"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two2,-- lhs = rhs,rfl,rfl,"case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two2,-- succ (succ z) ≤ 2 -> succ (succ z) ≤ succ 1 -> succ (succ z) ≤ succ (succ 0); ... = 0 ∨ ... = 1 ∨ ... = 2 -> ... = 0 ∨ ... = 1 ∨ ... = succ 1 -> ... = 0 ∨ ... = succ 0 ∨ ... = succ (succ 0),"rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two2,-- succ (succ z) ≤ succ (succ 0) -> succ z ≤ succ 0,apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two2,-- succ z ≤ succ 0 -> z ≤ 0,apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two2,-- z ≤ 0 -> z = 0,apply le_zero at hx,apply le_zero at hx,"case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two2,-- succ (succ 0) = 0 ∨ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0) -> succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0),right,right,"case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,Yes,No
le_two,le_two2,-- succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0) -> succ (succ 0) = succ (succ 0),right,right,"case succ.succ.h.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,Yes,No
le_two,le_two2,-- lhs = rhs,rfl,rfl,,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,Yes,No
World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
zero_pow_succ,zero_pow_succ_persona2,"-- We know that 0^(succ m) = 0^m * 0, so our goal becomes 0^m * 0 = 0","rw [pow_succ, mul_zero]",rw [pow_succ],"m : ℕ
⊢ 0 ^ m * 0 = 0
","m : ℕ
⊢ 0 = 0
",No,No,Yes
zero_pow_succ,zero_pow_succ_persona2,"-- lhs = rhs, so we are done.",rfl,rfl,,,Yes,Yes,No
zero_pow_succ,zero_pow_succ_persona3,"-- We can use induction on m. For the base case, we want to show that 0^succ(0) = 0.","rw [pow_succ, mul_zero]",induction m with h hd,"case zero
⊢ 0 ^ succ 0 = 0
case succ
h : ℕ
hd : 0 ^ succ h = 0
⊢ 0 ^ succ (succ h) = 0
","m : ℕ
⊢ 0 = 0
",No,No,Yes
zero_pow_succ,zero_pow_succ_persona3,"-- Anything multiplied by zero is zero, so we simplify to: 0*0",rw [zero_mul],rw[mul_zero],"case zero
⊢ 0 = 0
case succ
h : ℕ
hd : 0 ^ succ h = 0
⊢ 0 ^ succ (succ h) = 0
",error,No,Yes,Yes
zero_pow_succ,zero_pow_succ_persona3,"-- The lhs and rhs are identical, so we are done by reflexivity.",rfl,rfl,"case succ
h : ℕ
hd : 0 ^ succ h = 0
⊢ 0 ^ succ (succ h) = 0
",error,Yes,Yes,Yes
World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
succ_eq_add_one,succ_eq_add_one_persona_1_d,-- Rewrite on both RHS and LHS making n -> n + 0,rw [← add_zero n],rw [← add_zero n],"n : ℕ
⊢ succ (n + 0) = n + 0 + 1
","n : ℕ
⊢ succ (n + 0) = n + 0 + 1
",Yes,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d,-- Rewrite on RHS making 1 -> succ 0,rw [one_eq_succ_zero],rw [one_eq_succ_zero],"n : ℕ
⊢ succ (n + 0) = n + 0 + succ 0
","n : ℕ
⊢ succ (n + 0) = n + 0 + succ 0
",Yes,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d,-- Rewrite on RHS making n + 0 + succ(0) -> succ(n+0+0),rw [add_succ],rw [add_succ],"n : ℕ
⊢ succ (n + 0) = succ (n + 0 + 0)
","n : ℕ
⊢ succ (n + 0) = succ (n + 0 + 0)
",Yes,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d,"-- succ(n+0) = succ(n+0), QED",rw [add_zero],rfl,,"n : ℕ
⊢ succ n = succ (n + 0)
",No,Yes,No
succ_eq_add_one,succ_eq_add_one_persona_1_d2,-- Rewrite RHS 1 -> succ(0),rw [one_eq_succ_zero],rw [one_eq_succ_zero],"n : ℕ
⊢ succ n = n + succ 0
","n : ℕ
⊢ succ n = n + succ 0
",Yes,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d2,-- Rewrite both RHS and LHS n -> n + 0,rw [←add_zero n] at *,rw [← add_zero n],"n : ℕ
⊢ succ (n + 0) = n + 0 + succ 0
","n : ℕ
⊢ succ (n + 0) = n + 0 + succ 0
",No,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d2,-- Rewrite RHS n + 0 + succ(0) -> succ(n + 0 + 0),rw [add_succ],rw [add_succ],"n : ℕ
⊢ succ (n + 0) = succ (n + 0 + 0)
","n : ℕ
⊢ succ (n + 0) = succ (n + 0 + 0)
",Yes,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d2,-- Rewrite LHS and RHS n + 0 -> n,rw [add_zero],rw [add_zero],"n : ℕ
⊢ succ n = succ (n + 0)
","n : ℕ
⊢ succ n = succ (n + 0)
",Yes,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d2,"-- succ(n) = succ(n), QED",rw [add_zero],rfl,,"n : ℕ
⊢ succ n = succ n
",No,Yes,No
World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
add_right_eq_zero,add_right_eq_zero_dev_1,"-- We have two cases: b = 0, or b = succ d for some natural number d.",cases b with d,cases b with d,"case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_1,"-- In the former case, we must show that a + 0 = 0 → a = 0, so we start by assuming that a + 0 = 0.",intro h,intro h,"case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_1,-- We apply the theorem that n + 0 = n change a + 0 = 0 into a = 0.,rw [add_zero] at h,rw [add_zero] at h,"case zero
a : ℕ
h : a = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : a = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_1,"-- So, a = 0, which concludes this case of the theorem.",exact h,exact h,"case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_1,"-- In the latter case, we must show that a + succ d = 0 → a = 0, so we start by assuming that a + succ d = 0.",intro h,intro h,"case succ
a d : ℕ
h : a + succ d = 0
⊢ a = 0
","case succ
a d : ℕ
h : a + succ d = 0
⊢ a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_1,"-- Using the theorem that a + succ d = succ (a + d), we get that succ (a + d) = 0.",rw [add_succ] at h,rw [add_succ] at h,"case succ
a d : ℕ
h : succ (a + d) = 0
⊢ a = 0
","case succ
a d : ℕ
h : succ (a + d) = 0
⊢ a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_1,"-- By the symmetry of equality, we have that 0 = succ (a + d).",symm at h,symm at h,"case succ
a d : ℕ
h : 0 = succ (a + d)
⊢ a = 0
","case succ
a d : ℕ
h : 0 = succ (a + d)
⊢ a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_1,"-- Since a contradiction/falsehood implies anything, we are done.",cases h,cases h,,,Yes,Yes,No
add_right_eq_zero,add_right_eq_zero_dev_2,-- either b = 0 or b = succ d for some natural number d,cases b with d,cases b with d,"case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_2,-- (case 1) assume a + 0 = 0,intro h,intro h,"case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_2,-- a + 0 = 0 -> a = 0,rw [add_zero] at h,rw [add_zero] at h,"case zero
a : ℕ
h : a = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : a = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_2,"-- a = 0, as desired",exact h,exact h,"case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_2,-- (case 2) assume a + succ d = 0,intro h,intro h,"case succ
a d : ℕ
h : a + succ d = 0
⊢ a = 0
","case succ
a d : ℕ
h : a + succ d = 0
⊢ a = 0
",Yes,No,Yes
add_right_eq_zero,add_right_eq_zero_dev_2,-- succ (a + d) = 0 -> 0 = succ (a + d),symm at h,symm at h,"case succ
a d : ℕ
h : 0 = succ (a + d)
⊢ a = 0
","case succ
a d : ℕ
h : 0 = a + succ d
⊢ a = 0
",Yes,Yes,No
add_right_eq_zero,add_right_eq_zero_dev_2,-- 0 = succ (a + d) -> False,apply zero_ne_succ at h,apply zero_ne_succ at h,"case succ
a d : ℕ
h : False
⊢ a = 0
",error,Yes,Yes,Yes
add_right_eq_zero,add_right_eq_zero_dev_2,-- False -> anything,cases h,cases h,,error,Yes,Yes,Yes
World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
zero_add,zero_add_persona_1_d,-- Induct on n,induction n with d hd,induction n with d hd,"case zero
⊢ 0 + 0 = 0
case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
","case zero
⊢ 0 + 0 = 0
case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
",Yes,No,Yes
zero_add,zero_add_persona_1_d,-- substitute 0 -> 0 + 0 into the RHS giving us 0 + 0 = 0 + 0,rw [add_zero],nth_rewrite 3 [← add_zero 0],"case zero
⊢ 0 + 0 = 0 + 0
case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
","case zero
⊢ 0 = 0
case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
",No,No,Yes
zero_add,zero_add_persona_1_d,"-- 0 + 0 = 0 + 0, completing base case",rfl,rfl,"case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
","case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
",Yes,No,Yes
zero_add,zero_add_persona_1_d,-- 0 + d -> d on LHS -> succ d = succ d,"rw [add_succ, hd]",rw [hd],"case succ
d : ℕ
hd : 0 + d = d
⊢ succ d = succ d
","case succ
d : ℕ
hd : 0 + d = d
⊢ succ d = succ d
",No,Yes,No
zero_add,zero_add_persona_1_d,"-- succ d = succ d, QED",rfl,rfl,,,Yes,Yes,No
zero_add,zero_add_persona_2,-- Begin by initiating induction on n,induction n with d hd,induction n with d hd,"case zero
⊢ 0 + 0 = 0
case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
","case zero
⊢ 0 + 0 = 0
case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
",Yes,No,Yes
zero_add,zero_add_persona_2,-- Using the properties of addition by 0 we can rewrite 0 + 0 to 0 on the LHS,rw [add_zero],rw [add_zero],"case zero
⊢ 0 = 0
case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
","case zero
⊢ 0 = 0
case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
",Yes,No,Yes
zero_add,zero_add_persona_2,"-- Since both sides are equal, we are done with the base case",rfl,rfl,"case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
","case succ
d : ℕ
hd : 0 + d = d
⊢ 0 + succ d = succ d
",Yes,No,Yes
zero_add,zero_add_persona_2,-- Using the induction hypothesis we can rewrite succ (0 + d) to succ d,"rw [add_succ, hd]",rw [hd],"case succ
d : ℕ
hd : 0 + d = d
⊢ succ d = succ d
","case succ
d : ℕ
hd : 0 + d = d
⊢ succ d = succ d
",No,Yes,No
zero_add,zero_add_persona_2,"-- Since both sides are equal, we are done with the proof",rfl,rfl,,,Yes,Yes,No
