World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
one_le_of_ne_zero,one_le_of_ne_zero__dev_1,-- a is either 0 or the successor of some natural number d.,cases a with d hd,cases a with d,"case zero
ha : 0 ≠ 0
⊢ 1 ≤ 0
case succ
d : ℕ
ha : succ d ≠ 0
⊢ 1 ≤ succ d
","case zero
ha : 0 ≠ 0
⊢ 1 ≤ 0
case succ
d : ℕ
ha : succ d ≠ 0
⊢ 1 ≤ succ d
",No,No,Yes
one_le_of_ne_zero,one_le_of_ne_zero__dev_1,"-- When a = 0, the theorem doesn't hold because we know a != 0.",contrapose! ha,tauto,"case succ
d : ℕ
ha : succ d ≠ 0
⊢ 1 ≤ succ d
","case zero
ha : ¬1 ≤ 0
⊢ 0 = 0
case succ
d : ℕ
ha : succ d ≠ 0
⊢ 1 ≤ succ d
",No,No,Yes
one_le_of_ne_zero,one_le_of_ne_zero__dev_1,-- 1 <= d + 1 -> 1 + d = d + 1,rw [add_comm],use d,"case h
d : ℕ
ha : succ d ≠ 0
⊢ d + 1 = 1 + d
",error,No,No,No
one_le_of_ne_zero,one_le_of_ne_zero__dev_1,"-- The LHS and RHS are equal, so we can use reflexivity to prove the goal.",rfl,rfl,,error,Yes,Yes,Yes
one_le_of_ne_zero,one_le_of_ne_zero__dev_2,-- We use induction on a.,induction a with d hd,induction a with d _,"case zero
ha : 0 ≠ 0
⊢ 1 ≤ 0
case succ
d : ℕ
n_ih✝ : d ≠ 0 → 1 ≤ d
ha : succ d ≠ 0
⊢ 1 ≤ succ d
","case zero
ha : 0 ≠ 0
⊢ 1 ≤ 0
case succ
d : ℕ
hd : d ≠ 0 → 1 ≤ d
ha : succ d ≠ 0
⊢ 1 ≤ succ d
",No,No,Yes
one_le_of_ne_zero,one_le_of_ne_zero__dev_2,"-- For the base case, a = 0, the theorem doesn't hold because we know a != 0.",contrapose! ha,tauto,"case succ
d : ℕ
n_ih✝ : d ≠ 0 → 1 ≤ d
ha : succ d ≠ 0
⊢ 1 ≤ succ d
","case zero
ha : ¬1 ≤ 0
⊢ 0 = 0
case succ
d : ℕ
hd : d ≠ 0 → 1 ≤ d
ha : succ d ≠ 0
⊢ 1 ≤ succ d
",No,No,Yes
one_le_of_ne_zero,one_le_of_ne_zero__dev_2,-- we know that 1 <= succ d -> 1 <= d + 1,rw [add_comm],rw [succ_eq_add_one],"case succ
d : ℕ
n_ih✝ : d ≠ 0 → 1 ≤ d
ha : succ d ≠ 0
⊢ 1 ≤ d + 1
",error,No,No,No
one_le_of_ne_zero,one_le_of_ne_zero__dev_2,"-- The LHS and RHS are equal, so we can use reflexivity to prove the goal.",rfl,rfl,,error,Yes,Yes,Yes
