World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
le_two,le_two_dev_1,-- Either x = 0 or x = succ y for some natural number y.,cases x with y,cases x with y,"case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the former case, we need to show 0 = 0 ∨ 0 = 1 ∨ 0 = 2, and we choose to show 0 = 0.",left,left,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,-- This is clear by reflexivity.,rfl,rfl,"case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the latter case, either y = 0 or y = succ z for some natural number z.",cases y with z,cases y with z,"case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the former case, we must show succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2, and we choose to prove succ 0 = 1 ∨ succ 0 = _dev_2",right,right,"case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- To prove succ 0 = 1 ∨ succ 0 = 2, we choose to prove succ 0 = _dev_1",left,left,"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- Rewriting using a theorem, need to show show succ 0 = succ 0.",rfl,rw [one_eq_succ_zero],"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",error,No,No,No
le_two,le_two_dev_1,-- This is clear by reflexivity.,rfl,rfl,"case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",error,Yes,No,No
le_two,le_two_dev_1,"-- In the latter case, we substitute 2 = succ 1 and 1 = succ 0 into what we know and what we have to show.","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- We know that succ (succ z) ≤ succ (succ 0), so usinig a theorem we know succ z ≤ succ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- We know that succ z ≤ succ 0, so using a theorem we know that z ≤ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- Since z ≤ 0, using a theorem, z = 0.",apply le_zero at hx,apply le_zero at hx,"case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- So, we need to show that succ (succ 0) = 0 ∨ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0), so we choose to show that succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)",right,right,"case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- But LHS = RHS, so this follows by reflexivity.",rfl,rfl,,error,Yes,Yes,Yes
le_two,le_two_dev_2,-- x = 0 (case 1) or x = succ y (case 2) for some natural number y,cases x with y,cases x with y,"case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- 0 = 0 ∨ 0 = 1 ∨ 0 = 2 -> 0 = 0,"left, rfl",left,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- lhs = rhs,rw [one_eq_succ_zero],rfl,"case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- y = 0 (case 1) or y = succ z (case 2) for some natural number z,cases y with z,cases y with z,"case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2 -> succ 0 = 1 ∨ succ 0 = _dev_2,right,right,"case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ 0 = 1 ∨ succ 0 = 2 -> succ 0 = _dev_1,rw [one_eq_succ_zero],left,"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ 0 = 1 -> succ 0 = succ 0,rfl,rw [one_eq_succ_zero],"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- lhs = rhs,rw [one_eq_succ_zero],rfl,"case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ (succ z) ≤ 2 -> succ (succ z) ≤ succ 1 -> succ (succ z) ≤ succ (succ 0); ... = 0 ∨ ... = 1 ∨ ... = 2 -> ... = 0 ∨ ... = 1 ∨ ... = succ 1 -> ... = 0 ∨ ... = succ 0 ∨ ... = succ (succ 0),"rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ (succ z) ≤ succ (succ 0) -> succ z ≤ succ 0,apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ z ≤ succ 0 -> z ≤ 0,apply succ_le_succ,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- z ≤ 0 -> z = 0,apply le_zero,apply le_zero at hx,"case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ (succ 0) = 0 ∨ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0) -> succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0),right,right,"case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,-- Either x = 0 or x = succ y for some natural number y.,cases x with y,cases x with y,"case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the former case, we need to show 0 = 0 ∨ 0 = 1 ∨ 0 = 2, and we choose to show 0 = 0.",left,left,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,-- This is clear by reflexivity.,rfl,rfl,"case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the latter case, either y = 0 or y = succ z for some natural number z.",cases y with z,cases y with z,"case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the former case, we must show succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2, and we choose to prove succ 0 = 1 ∨ succ 0 = _dev_2",right,right,"case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- To prove succ 0 = 1 ∨ succ 0 = 2, we choose to prove succ 0 = _dev_1",left,left,"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- Rewriting using a theorem, need to show show succ 0 = succ 0.",rfl,rw [one_eq_succ_zero],"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",error,No,No,No
le_two,le_two_dev_1,-- This is clear by reflexivity.,rfl,rfl,"case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",error,Yes,No,No
le_two,le_two_dev_1,"-- In the latter case, we substitute 2 = succ 1 and 1 = succ 0 into what we know and what we have to show.","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- We know that succ (succ z) ≤ succ (succ 0), so usinig a theorem we know succ z ≤ succ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- We know that succ z ≤ succ 0, so using a theorem we know that z ≤ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- Since z ≤ 0, using a theorem, z = 0.",apply le_zero at hx,apply le_zero at hx,"case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- So, we need to show that succ (succ 0) = 0 ∨ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0), so we choose to show that succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)",right,right,"case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- But LHS = RHS, so this follows by reflexivity.",rfl,rfl,,error,Yes,Yes,Yes
le_two,le_two_dev_2,-- x = 0 (case 1) or x = succ y (case 2) for some natural number y,cases x with y,cases x with y,"case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- 0 = 0 ∨ 0 = 1 ∨ 0 = 2 -> 0 = 0,"left
rfl",left,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- lhs = rhs,rw [← hx],rfl,"case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- y = 0 (case 1) or y = succ z (case 2) for some natural number z,cases y with z,cases y with z,"case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2 -> succ 0 = 1 ∨ succ 0 = _dev_2,right,right,"case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ 0 = 1 ∨ succ 0 = 2 -> succ 0 = _dev_1,left,left,"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ 0 = 1 -> succ 0 = succ 0,rfl,rw [one_eq_succ_zero],"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- lhs = rhs,rw [← hx],rfl,"case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ (succ z) ≤ 2 -> succ (succ z) ≤ succ 1 -> succ (succ z) ≤ succ (succ 0); ... = 0 ∨ ... = 1 ∨ ... = 2 -> ... = 0 ∨ ... = 1 ∨ ... = succ 1 -> ... = 0 ∨ ... = succ 0 ∨ ... = succ (succ 0),"rw [le_succ_self, le_two]","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ (succ z) ≤ succ (succ 0) -> succ z ≤ succ 0,apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ z ≤ succ 0 -> z ≤ 0,apply succ_le_succ,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- z ≤ 0 -> z = 0,apply le_zero,apply le_zero at hx,"case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ (succ 0) = 0 ∨ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0) -> succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0),right,right,"case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- lhs = rhs,rw [← hx],rfl,,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,Yes,No
le_two,le_two_dev_1,-- Either x = 0 or x = succ y for some natural number y.,cases x with y,cases x with y,"case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the former case, we need to show 0 = 0 ∨ 0 = 1 ∨ 0 = 2, and we choose to show 0 = 0.",left,left,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,-- This is clear by reflexivity.,rfl,rfl,"case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the latter case, either y = 0 or y = succ z for some natural number z.",cases y with z,cases y with z,"case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the former case, we must show succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2, and we choose to prove succ 0 = 1 ∨ succ 0 = _dev_2",right,right,"case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- To prove succ 0 = 1 ∨ succ 0 = 2, we choose to prove succ 0 = _dev_1",left,left,"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- Rewriting using a theorem, need to show show succ 0 = succ 0.",rfl,rw [one_eq_succ_zero],"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",error,No,No,No
le_two,le_two_dev_1,-- This is clear by reflexivity.,rfl,rfl,"case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",error,Yes,No,No
le_two,le_two_dev_1,"-- In the latter case, we substitute 2 = succ 1 and 1 = succ 0 into what we know and what we have to show.","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- We know that succ (succ z) ≤ succ (succ 0), so usinig a theorem we know succ z ≤ succ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- We know that succ z ≤ succ 0, so using a theorem we know that z ≤ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- Since z ≤ 0, using a theorem, z = 0.",apply le_zero at hx,apply le_zero at hx,"case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- So, we need to show that succ (succ 0) = 0 ∨ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0), so we choose to show that succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)",right,right,"case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- But LHS = RHS, so this follows by reflexivity.",rfl,rfl,,error,Yes,Yes,Yes
le_two,le_two_dev_2,-- x = 0 (case 1) or x = succ y (case 2) for some natural number y,cases x with y,cases x with y,"case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- 0 = 0 ∨ 0 = 1 ∨ 0 = 2 -> 0 = 0,"left
rfl",left,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- lhs = rhs,rw [← hx],rfl,"case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- y = 0 (case 1) or y = succ z (case 2) for some natural number z,cases y with z,cases y with z,"case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2 -> succ 0 = 1 ∨ succ 0 = _dev_2,right,right,"case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ 0 = 1 ∨ succ 0 = 2 -> succ 0 = _dev_1,left,left,"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ 0 = 1 -> succ 0 = succ 0,rfl,rw [one_eq_succ_zero],"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- lhs = rhs,rw [← hx],rfl,"case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ (succ z) ≤ 2 -> succ (succ z) ≤ succ 1 -> succ (succ z) ≤ succ (succ 0); ... = 0 ∨ ... = 1 ∨ ... = 2 -> ... = 0 ∨ ... = 1 ∨ ... = succ 1 -> ... = 0 ∨ ... = succ 0 ∨ ... = succ (succ 0),"rw [le_succ_self, le_two]","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ (succ z) ≤ succ (succ 0) -> succ z ≤ succ 0,apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ z ≤ succ 0 -> z ≤ 0,apply succ_le_succ,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- z ≤ 0 -> z = 0,apply le_zero,apply le_zero at hx,"case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ (succ 0) = 0 ∨ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0) -> succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0),right,right,"case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- lhs = rhs,rw [← hx],rfl,,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,Yes,No
le_two,le_two_dev_1,-- Either x = 0 or x = succ y for some natural number y.,cases x with y,cases x with y,"case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the former case, we need to show 0 = 0 ∨ 0 = 1 ∨ 0 = 2, and we choose to show 0 = 0.",left,left,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,-- This is clear by reflexivity.,rfl,rfl,"case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the latter case, either y = 0 or y = succ z for some natural number z.",cases y with z,cases y with z,"case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the former case, we must show succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2, and we choose to prove succ 0 = 1 ∨ succ 0 = _dev_2",right,right,"case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- To prove succ 0 = 1 ∨ succ 0 = 2, we choose to prove succ 0 = _dev_1",left,left,"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- Rewriting using a theorem, need to show show succ 0 = succ 0.",rfl,rw [one_eq_succ_zero],"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",error,No,No,No
le_two,le_two_dev_1,-- This is clear by reflexivity.,rfl,rfl,"case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",error,Yes,No,No
le_two,le_two_dev_1,"-- In the latter case, we substitute 2 = succ 1 and 1 = succ 0 into what we know and what we have to show.","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- We know that succ (succ z) ≤ succ (succ 0), so usinig a theorem we know succ z ≤ succ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- We know that succ z ≤ succ 0, so using a theorem we know that z ≤ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- Since z ≤ 0, using a theorem, z = 0.",apply le_zero at hx,apply le_zero at hx,"case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- So, we need to show that succ (succ 0) = 0 ∨ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0), so we choose to show that succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)",right,right,"case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- But LHS = RHS, so this follows by reflexivity.",rfl,rfl,,error,Yes,Yes,Yes
le_two,le_two_dev_1,-- Either x = 0 or x = succ y for some natural number y.,cases x with y,cases x with y,"case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the former case, we need to show 0 = 0 ∨ 0 = 1 ∨ 0 = 2, and we choose to show 0 = 0.",left,left,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,-- This is clear by reflexivity.,rfl,rfl,"case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the latter case, either y = 0 or y = succ z for some natural number z.",cases y with z,cases y with z,"case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- In the former case, we must show succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2, and we choose to prove succ 0 = 1 ∨ succ 0 = _dev_2",right,right,"case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- To prove succ 0 = 1 ∨ succ 0 = 2, we choose to prove succ 0 = _dev_1",left,left,"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",Yes,No,Yes
le_two,le_two_dev_1,"-- Rewriting using a theorem, need to show show succ 0 = succ 0.",rfl,rw [one_eq_succ_zero],"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",error,No,No,No
le_two,le_two_dev_1,-- This is clear by reflexivity.,rfl,rfl,"case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
",error,Yes,No,No
le_two,le_two_dev_1,"-- In the latter case, we substitute 2 = succ 1 and 1 = succ 0 into what we know and what we have to show.","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- We know that succ (succ z) ≤ succ (succ 0), so usinig a theorem we know succ z ≤ succ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- We know that succ z ≤ succ 0, so using a theorem we know that z ≤ 0.",apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- Since z ≤ 0, using a theorem, z = 0.",apply le_zero at hx,apply le_zero at hx,"case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- So, we need to show that succ (succ 0) = 0 ∨ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0), so we choose to show that succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)",right,right,"case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)
",error,Yes,No,No
le_two,le_two_dev_1,"-- But LHS = RHS, so this follows by reflexivity.",rfl,rfl,,error,Yes,Yes,Yes
le_two,le_two_dev_2,-- x = 0 (case 1) or x = succ y (case 2) for some natural number y,cases x with y,cases x with y,"case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero
hx : 0 ≤ 2
⊢ 0 = 0 ∨ 0 = 1 ∨ 0 = 2
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- 0 = 0 ∨ 0 = 1 ∨ 0 = 2 -> 0 = 0,"left
rfl",left,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- lhs = rhs,rw [← hx],rfl,"case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- y = 0 (case 1) or y = succ z (case 2) for some natural number z,cases y with z,cases y with z,"case succ.zero
hx : succ 0 ≤ 2
⊢ succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ 0 = 0 ∨ succ 0 = 1 ∨ succ 0 = 2 -> succ 0 = 1 ∨ succ 0 = _dev_2,right,right,"case succ.zero.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1 ∨ succ 0 = 2
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ 0 = 1 ∨ succ 0 = 2 -> succ 0 = _dev_1,left,left,"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = 1
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ 0 = 1 -> succ 0 = succ 0,rfl,rw [one_eq_succ_zero],"case succ.zero.h.h
hx : succ 0 ≤ 2
⊢ succ 0 = succ 0
case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- lhs = rhs,rw [← hx],rfl,"case succ.succ
z : ℕ
hx : succ (succ z) ≤ 2
⊢ succ (succ z) = 0 ∨ succ (succ z) = 1 ∨ succ (succ z) = 2
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ (succ z) ≤ 2 -> succ (succ z) ≤ succ 1 -> succ (succ z) ≤ succ (succ 0); ... = 0 ∨ ... = 1 ∨ ... = 2 -> ... = 0 ∨ ... = 1 ∨ ... = succ 1 -> ... = 0 ∨ ... = succ 0 ∨ ... = succ (succ 0),"rw [le_succ_self, le_two]","rw [two_eq_succ_one, one_eq_succ_zero] at hx ⊢","case succ.succ
z : ℕ
hx : succ (succ z) ≤ succ (succ 0)
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ (succ z) ≤ succ (succ 0) -> succ z ≤ succ 0,apply succ_le_succ at hx,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : succ z ≤ succ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- succ z ≤ succ 0 -> z ≤ 0,apply succ_le_succ,apply succ_le_succ at hx,"case succ.succ
z : ℕ
hx : z ≤ 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- z ≤ 0 -> z = 0,apply le_zero,apply le_zero at hx,"case succ.succ
z : ℕ
hx : z = 0
⊢ succ (succ z) = 0 ∨ succ (succ z) = succ 0 ∨ succ (succ z) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,No,Yes
le_two,le_two_dev_2,-- succ (succ 0) = 0 ∨ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0) -> succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0),right,right,"case succ.succ.h
z : ℕ
hx : z = 0
⊢ succ (succ 0) = succ 0 ∨ succ (succ 0) = succ (succ 0)
","case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",Yes,No,Yes
le_two,le_two_dev_2,-- lhs = rhs,rw [← hx],rfl,,"case zero.h
hx : 0 ≤ 2
⊢ 0 = 0
case succ
y : ℕ
hx : succ y ≤ 2
⊢ succ y = 0 ∨ succ y = 1 ∨ succ y = 2
",No,Yes,No
