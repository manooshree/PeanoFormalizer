World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
le_antisymm,le_antisymm_dev_1,-- We consider the case where x is less than or equal to y so y = x + some natural number a.,cases hxy with a ha,cases hxy with a ha,"case intro
x y : ℕ
hyx : y ≤ x
a : ℕ
ha : y = x + a
⊢ x = y
","case intro
x y : ℕ
hyx : y ≤ x
a : ℕ
ha : y = x + a
⊢ x = y
",Yes,No,Yes
le_antisymm,le_antisymm_dev_1,-- We consider the case where y is less than or equal to x so x = y + some natural number b.,cases hyx with b hb,cases hyx with b hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = y
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = y
",Yes,No,Yes
le_antisymm,le_antisymm_dev_1,"-- We substitute y in the goal with x + a, changing our goal to prove that x equals x + a.",rw [ha],rw [ha],"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_1,"-- Using the equality y = x + a, we substitute y in the equation x = y + b with x + a. Then, we re-arrange the right side of the equation x = x + a + b to x = x + (a + b) using the property that addition is associative.","rw [ha] at hb,
rw [add_assoc] at hb","rw [ha, add_assoc] at hb","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + (a + b)
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
",No,No,Yes
le_antisymm,le_antisymm_dev_1,-- We flip the equation so that it reads 'x + (a + b) = x' instead of 'x = x + (a + b)'.,symm at hb,symm at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x + (a + b) = x
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_1,"-- We substitute a in the equation x = x + a with zero, as given shown above, changing our goal to prove that x equals x.",rw [hb],"rw [hb, add_zero]","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : a = 0
⊢ x = x
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
",No,Yes,No
le_antisymm,le_antisymm_dev_1,"-- The goal is now to prove that x equals x, which is true by reflexivity.",rfl,rfl,,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
",Yes,Yes,No
le_antisymm,le_antisymm_dev_2,-- y = x + a,cases hxy with a ha,cases hxy with a ha,"case intro
x y : ℕ
hyx : y ≤ x
a : ℕ
ha : y = x + a
⊢ x = y
","case intro
x y : ℕ
hyx : y ≤ x
a : ℕ
ha : y = x + a
⊢ x = y
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x = y + b,cases hyx with b hb,cases hyx with b hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = y
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = y
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x = y -> x = x + a,rw [ha],rw [ha],"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x = y + b -> x = (x + a) + b,rw [ha] at hb,rw [ha] at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x = (x + a) + a -> x = x + (a + b),rw [add_assoc] at hb,rw [add_assoc] at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + (a + b)
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + (a + b)
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x = x + (a + b) -> x + (a + b) = x,symm at hb,symm at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x + (a + b) = x
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x + (a + b) = x
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x + (a + b) = x -> a + b = 0,apply add_right_eq_self at hb,apply add_right_eq_self at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : a + b = 0
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : a + b = 0
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- a + b = 0 -> a = 0,rw [add_eq_zero_iff] at hb,apply add_right_eq_zero at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : a = 0
⊢ x = x + a
",error,No,No,No
le_antisymm,le_antisymm_dev_2,-- lhs = rhs,rw lhs_eq_rhs,rfl,,error,No,Yes,Yes
le_antisymm,le_antisymm_dev_1,-- We consider the case where x is less than or equal to y so y = x + some natural number a.,cases hxy with a ha,cases hxy with a ha,"case intro
x y : ℕ
hyx : y ≤ x
a : ℕ
ha : y = x + a
⊢ x = y
","case intro
x y : ℕ
hyx : y ≤ x
a : ℕ
ha : y = x + a
⊢ x = y
",Yes,No,Yes
le_antisymm,le_antisymm_dev_1,-- We consider the case where y is less than or equal to x so x = y + some natural number b.,cases hyx with b hb,cases hyx with b hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = y
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = y
",Yes,No,Yes
le_antisymm,le_antisymm_dev_1,"-- We substitute y in the goal with x + a, changing our goal to prove that x equals x + a.",rw [ha],rw [ha],"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_1,"-- Using the equality y = x + a, we substitute y in the equation x = y + b with x + a. Then, we re-arrange the right side of the equation x = x + a + b to x = x + (a + b) using the property that addition is associative.","rw [ha] at hb,
rw [add_assoc] at hb","rw [ha, add_assoc] at hb","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + (a + b)
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
",No,No,Yes
le_antisymm,le_antisymm_dev_1,-- We flip the equation so that it reads 'x + (a + b) = x' instead of 'x = x + (a + b)'.,symm at hb,symm at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x + (a + b) = x
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_1,"-- We substitute a in the equation x = x + a with zero, as given shown above, changing our goal to prove that x equals x.",rw [hb],"rw [hb, add_zero]","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : a = 0
⊢ x = x
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
",No,Yes,No
le_antisymm,le_antisymm_dev_1,"-- The goal is now to prove that x equals x, which is true by reflexivity.",rfl,rfl,,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
",Yes,Yes,No
le_antisymm,le_antisymm_dev_2,-- y = x + a,cases hxy with a ha,cases hxy with a ha,"case intro
x y : ℕ
hyx : y ≤ x
a : ℕ
ha : y = x + a
⊢ x = y
","case intro
x y : ℕ
hyx : y ≤ x
a : ℕ
ha : y = x + a
⊢ x = y
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x = y + b,cases hyx with b hb,cases hyx with b hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = y
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = y
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x = y -> x = x + a,rw [ha],rw [ha],"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = y + b
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x = y + b -> x = (x + a) + b,rw [ha] at hb,rw [ha] at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + a + b
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x = (x + a) + a -> x = x + (a + b),rw [add_assoc] at hb,rw [add_assoc] at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + (a + b)
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x = x + (a + b)
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x = x + (a + b) -> x + (a + b) = x,symm at hb,symm at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x + (a + b) = x
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : x + (a + b) = x
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- x + (a + b) = x -> a + b = 0,apply add_right_eq_self at hb,apply add_right_eq_self at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : a + b = 0
⊢ x = x + a
","case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : a + b = 0
⊢ x = x + a
",Yes,No,Yes
le_antisymm,le_antisymm_dev_2,-- a + b = 0 -> a = 0,rw [add_eq_zero_iff] at hb,apply add_right_eq_zero at hb,"case intro.intro
x y a : ℕ
ha : y = x + a
b : ℕ
hb : a = 0
⊢ x = x + a
",error,No,No,No
le_antisymm,le_antisymm_dev_2,-- lhs = rhs,rw lhs_eq_rhs,rfl,,error,No,Yes,Yes
