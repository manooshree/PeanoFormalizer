Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Is Correct
add_right_eq_zero,"  -- We have two cases: b = 0, or b = succ d for some natural number d.",cases b with d,  cases b with d,"case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,"  -- In the former case, we must show that a + 0 = 0 → a = 0, so we start by assuming that a + 0 = 0.",intro h,  intro h,"case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,  -- We apply the theorem that n = 0 + n change a = 0 to a + 0 = 0.,rw [←zero_add a] at h,  rw [← add_zero a],"case zero
a : ℕ
h : a + 0 = 0
⊢ a + 0 = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : 0 + a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,"  -- So, a = 0, which concludes this case of the theorem.",exact h,  exact h,"case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",error,No
add_right_eq_zero,"  -- In the latter case, we must show that a + succ d = 0 → a = 0, so we start by assuming that a + succ d = 0.",intro h,  intro h,"case succ
a d : ℕ
h : a + succ d = 0
⊢ a = 0
",error,No
add_right_eq_zero,"  -- Using the theorem that a + succ d = succ (a + d), we get that succ (a + d) = 0.",rw [add_succ] at h,  rw [add_succ] at h,"case succ
a d : ℕ
h : succ (a + d) = 0
⊢ a = 0
",error,No
add_right_eq_zero,"  -- By the symmetry of equality, we have that 0 = succ (a + d).",symm at h,  symm at h,"case succ
a d : ℕ
h : 0 = succ (a + d)
⊢ a = 0
",error,No
add_right_eq_zero,"  -- But since 0 is not the successor of anything, we have a contradiction/falsehood.",cases h,  apply zero_ne_succ at h,"case succ
a d : ℕ
h : False
⊢ a = 0
",error,No
add_right_eq_zero,"  -- Since a contradiction/falsehood implies anything, we are done.",There is no corresponding Lean code for this statement because the contradiction has already been used to finish the proof in the previous step. This statement is more a commentary on the proof status rather than an actionable step.,  tauto,,error,No
add_right_eq_zero,  -- Proof by induction on b,induction b with d hd,  induction b with d hd,"case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,"  -- For the base case, assume a + 0 = 0",intro h,  intro h,"case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,  -- a + 0 = 0 -> a = 0,rw [add_zero] at h,  rw [add_zero] at h,"case zero
a : ℕ
h : a = 0
⊢ a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : a = 0
⊢ a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,"  -- a = 0, as desired",exact h,  exact h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
","case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,"  -- For the inductive step, assume a + succ d = 0",intro h,  intro h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : a + succ d = 0
⊢ a = 0
","case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : a + succ d = 0
⊢ a = 0
",Yes
add_right_eq_zero,  -- a + succ d = 0 -> succ (a + d) = 0,rw add_succ at h,  rw [add_succ] at h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : succ (a + d) = 0
⊢ a = 0
","case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : a + succ d = 0
⊢ a = 0
",Yes
add_right_eq_zero,  -- succ (a + d) = 0 -> 0 = succ (a + d),symm at h,  symm at h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : 0 = succ (a + d)
⊢ a = 0
","case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : a + succ d = 0
⊢ a = 0
",Yes
add_right_eq_zero,  -- 0 = succ (a + d) -> False,"symm at h
apply zero_ne_succ at h",  apply zero_ne_succ at h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : False
⊢ a = 0
","case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : a + succ d = 0
⊢ a = 0
",No
add_right_eq_zero,"  -- We have two cases: b = 0, or b = succ d for some natural number d.",cases b with d,  cases b with d,"case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,"  -- In the former case, we must show that a + 0 = 0 → a = 0, so we start by assuming that a + 0 = 0.",intro h,  intro h,"case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,  -- We apply the theorem that n = 0 + n change a = 0 to a + 0 = 0.,rw [zero_add] at h,  rw [← add_zero a],"case zero
a : ℕ
h : a + 0 = 0
⊢ a + 0 = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",error,No
add_right_eq_zero,"  -- So, a = 0, which concludes this case of the theorem.",exact h,  exact h,"case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",error,No
add_right_eq_zero,"  -- In the latter case, we must show that a + succ d = 0 → a = 0, so we start by assuming that a + succ d = 0.",intro h,  intro h,"case succ
a d : ℕ
h : a + succ d = 0
⊢ a = 0
",error,No
add_right_eq_zero,"  -- Using the theorem that a + succ d = succ (a + d), we get that succ (a + d) = 0.",rw [add_succ] at h,  rw [add_succ] at h,"case succ
a d : ℕ
h : succ (a + d) = 0
⊢ a = 0
",error,No
add_right_eq_zero,"  -- By the symmetry of equality, we have that 0 = succ (a + d).",symm at h,  symm at h,"case succ
a d : ℕ
h : 0 = succ (a + d)
⊢ a = 0
",error,No
add_right_eq_zero,"  -- But since 0 is not the successor of anything, we have a contradiction/falsehood.",cases h,  apply zero_ne_succ at h,"case succ
a d : ℕ
h : False
⊢ a = 0
",error,No
add_right_eq_zero,"  -- Since a contradiction/falsehood implies anything, we are done.","This statement does not translate directly to a line of Lean code. It is a commentary on the state of the proof. When a contradiction is found in Lean, it automatically finishes the proof.",  tauto,,error,No
add_right_eq_zero,  -- Proof by induction on b,cases b with d,  induction b with d hd,"case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",No
add_right_eq_zero,"  -- For the base case, assume a + 0 = 0",intro h,  intro h,"case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",No
add_right_eq_zero,  -- a + 0 = 0 -> a = 0,exact h,  rw [add_zero] at h,"case zero
a : ℕ
h : a = 0
⊢ a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
",error,No
add_right_eq_zero,"  -- a = 0, as desired",The Lean code cannot be produced due to the error in the provided state of the proof.,  exact h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
",error,No
add_right_eq_zero,"  -- For the inductive step, assume a + succ d = 0",intro h,  intro h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : a + succ d = 0
⊢ a = 0
",error,No
add_right_eq_zero,  -- a + succ d = 0 -> succ (a + d) = 0,rw [add_succ] at h,  rw [add_succ] at h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : succ (a + d) = 0
⊢ a = 0
",error,No
add_right_eq_zero,  -- succ (a + d) = 0 -> 0 = succ (a + d),symm at h,  symm at h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : 0 = succ (a + d)
⊢ a = 0
",error,No
add_right_eq_zero,  -- 0 = succ (a + d) -> False,apply zero_ne_succ at h,  apply zero_ne_succ at h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : False
⊢ a = 0
",error,No
add_right_eq_zero,  -- False -> anything,This line does not correspond to a specific line of Lean code in the theorem proof provided. It seems to be an instructional comment rather than a step in the proof.,  cases h,,error,No
add_right_eq_zero,"  -- We have two cases: b = 0, or b = succ d for some natural number d.",cases b with d,  cases b with d,"case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,"  -- In the former case, we must show that a + 0 = 0 → a = 0, so we start by assuming that a + 0 = 0.",intro h₀,  intro h,"case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h₀ : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,  -- We apply the theorem that n = 0 + n change a = 0 to a + 0 = 0.,rw [zero_add] at h₀,  rw [← add_zero a],"case zero
a : ℕ
h : a + 0 = 0
⊢ a + 0 = 0
case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",error,No
add_right_eq_zero,"  -- So, a = 0, which concludes this case of the theorem.","The formalized version of the natural language statement is:

`exact h`",  exact h,"case succ
a d : ℕ
⊢ a + succ d = 0 → a = 0
",error,No
add_right_eq_zero,"  -- In the latter case, we must show that a + succ d = 0 → a = 0, so we start by assuming that a + succ d = 0.",intro h,  intro h,"case succ
a d : ℕ
h : a + succ d = 0
⊢ a = 0
",error,No
add_right_eq_zero,"  -- Using the theorem that a + succ d = succ (a + d), we get that succ (a + d) = 0.",rw add_succ at h,  rw [add_succ] at h,"case succ
a d : ℕ
h : succ (a + d) = 0
⊢ a = 0
",error,No
add_right_eq_zero,"  -- By the symmetry of equality, we have that 0 = succ (a + d).",symm at h,  symm at h,"case succ
a d : ℕ
h : 0 = succ (a + d)
⊢ a = 0
",error,No
add_right_eq_zero,"  -- But since 0 is not the successor of anything, we have a contradiction/falsehood.",cases h,  apply zero_ne_succ at h,"case succ
a d : ℕ
h : False
⊢ a = 0
",error,No
add_right_eq_zero,"  -- Since a contradiction/falsehood implies anything, we are done.","The formalized version of the natural language statement is:
""exact false.elim h""",  tauto,,error,No
add_right_eq_zero,  -- Proof by induction on b,induction b with d hd,  induction b with d hd,"case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
⊢ a + 0 = 0 → a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,"  -- For the base case, assume a + 0 = 0",intro h,  intro h,"case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : a + 0 = 0
⊢ a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,  -- a + 0 = 0 -> a = 0,rw [add_zero] at h,  rw [add_zero] at h,"case zero
a : ℕ
h : a = 0
⊢ a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
","case zero
a : ℕ
h : a = 0
⊢ a = 0
case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,"  -- a = 0, as desired",exact h,  exact h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
","case succ
a d : ℕ
hd : a + d = 0 → a = 0
⊢ a + succ d = 0 → a = 0
",Yes
add_right_eq_zero,"  -- For the inductive step, assume a + succ d = 0",intro h,  intro h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : a + succ d = 0
⊢ a = 0
","case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : a + succ d = 0
⊢ a = 0
",Yes
add_right_eq_zero,  -- a + succ d = 0 -> succ (a + d) = 0,rw [add_succ] at h,  rw [add_succ] at h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : succ (a + d) = 0
⊢ a = 0
","case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : succ (a + d) = 0
⊢ a = 0
",Yes
add_right_eq_zero,  -- succ (a + d) = 0 -> 0 = succ (a + d),symm at h,  symm at h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : 0 = succ (a + d)
⊢ a = 0
","case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : 0 = succ (a + d)
⊢ a = 0
",Yes
add_right_eq_zero,  -- 0 = succ (a + d) -> False,apply zero_ne_succ at h,  apply zero_ne_succ at h,"case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : False
⊢ a = 0
","case succ
a d : ℕ
hd : a + d = 0 → a = 0
h : False
⊢ a = 0
",Yes
add_right_eq_zero,  -- False -> anything,exact h,  cases h,,error,No
