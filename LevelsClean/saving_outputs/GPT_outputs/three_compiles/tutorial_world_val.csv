World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Is Correct
tutorial_world_val,succ_eq_add_one,-- Rewrite on both RHS and LHS making n -> n + 0,rw [←add_zero n],rw [← add_zero n],"n : ℕ
⊢ succ (n + 0) = n + 0 + 1
","n : ℕ
⊢ succ (n + 0) = n + 0 + 1
",Yes
tutorial_world_val,succ_eq_add_one,-- Rewrite on RHS making 1 -> succ 0,rw [one_eq_succ_zero],rw [one_eq_succ_zero],"n : ℕ
⊢ succ (n + 0) = n + 0 + succ 0
","n : ℕ
⊢ succ (n + 0) = n + 0 + succ 0
",Yes
tutorial_world_val,succ_eq_add_one,-- Rewrite on RHS making n + 0 + succ(0) -> succ(n+0+0),rw [add_succ],rw [add_succ],"n : ℕ
⊢ succ (n + 0) = succ (n + 0 + 0)
","n : ℕ
⊢ succ (n + 0) = succ (n + 0 + 0)
",Yes
tutorial_world_val,succ_eq_add_one,-- Rewrite on RHS making n + 0 -> n,rw [add_zero],rw [add_zero (n+0)],"n : ℕ
⊢ succ (n + 0) = succ (n + 0)
","n : ℕ
⊢ succ n = succ (n + 0)
",No
tutorial_world_val,succ_eq_add_one,"-- succ(n+0) = succ(n+0), QED",rw [add_zero],rfl,,"n : ℕ
⊢ succ n = succ n
",No
tutorial_world_val,succ_eq_add_one,-- Rewrite RHS 1 -> succ(0),rw [one_eq_succ_zero],rw [one_eq_succ_zero],"n : ℕ
⊢ succ n = n + succ 0
","n : ℕ
⊢ succ n = n + succ 0
",Yes
tutorial_world_val,succ_eq_add_one,-- Rewrite both RHS and LHS n -> n + 0,"rw [add_succ, add_zero]",rw [← add_zero n],"n : ℕ
⊢ succ (n + 0) = n + 0 + succ 0
","n : ℕ
⊢ succ n = succ n
",No
tutorial_world_val,succ_eq_add_one,-- Rewrite RHS n + 0 + succ(0) -> succ(n + 0 + 0),"Sorry, but your request doesn't make sense in the current context. The theorem ""succ_eq_add_one"" states that for any natural number n, the successor of n equals n + 1. This is a trivial statement in Lean's logic system and doesn't require any rewriting or re-arranging of terms. The original theorem can be proved directly using the reflexivity tactic, rfl, which checks if the left hand side and the right hand side of the equality are identical.",rw [add_succ],"n : ℕ
⊢ succ (n + 0) = succ (n + 0 + 0)
","n : ℕ
⊢ succ n = succ n
",No
tutorial_world_val,succ_eq_add_one,-- Rewrite LHS and RHS n + 0 -> n,rw [add_zero],rw [add_zero],"n : ℕ
⊢ succ n = succ (n + 0)
","n : ℕ
⊢ succ n = succ n
",Yes
tutorial_world_val,succ_eq_add_one,-- Rewrite RHS n + 0 -> n,rw [add_zero],rw [add_zero],"n : ℕ
⊢ succ n = succ n
","n : ℕ
⊢ succ n = succ n
",Yes
tutorial_world_val,succ_eq_add_one,"-- succ(n) = succ(n), QED",rfl,rfl,,"n : ℕ
⊢ succ n = succ n
",Yes
