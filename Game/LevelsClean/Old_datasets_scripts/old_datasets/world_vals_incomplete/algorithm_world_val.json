[
  {
    "theorem": "truncated_add_left_comm",
    "NL": "-- Theorem Declaration: Prove (a + b) + (c + d) = ((a + c) + d) + b for natural numbers a, b, c, d",
    "FL": "theorem truncated_add_left_comm (a b c : \u2115) : a + (b + c) = b + (a + c) := by",
    "state": "a b c : \u2115\n\u22a2 a + (b + c) = b + (a + c)\n"
  },
  {
    "theorem": "truncated_add_left_comm",
    "NL": "-- Rewrite LHS using the commutative property of addition, changing a + (b + c) to a + b + c",
    "FL": "rw [\u2190 add_assoc]",
    "state": "a b c : \u2115\n\u22a2 a + b + c = b + (a + c)\n"
  },
  {
    "theorem": "truncated_add_left_comm",
    "NL": "-- Rewrite LHS, swapping the order of a and b, changing a + b + c to b + a + c",
    "FL": "rw [add_comm a b]",
    "state": "a b c : \u2115\n\u22a2 b + a + c = b + (a + c)\n"
  },
  {
    "theorem": "truncated_var_swap",
    "NL": "-- Theorem Declaration: Prove that for natural numbers a, b, a = b, given that succ a = succ b",
    "FL": "theorem truncated_var_swap (a b c d : \u2115) : a + b + (c + d) = a + c + d + b := by",
    "state": "a b c d : \u2115\n\u22a2 a + b + (c + d) = a + c + d + b\n"
  },
  {
    "theorem": "truncated_var_swap",
    "NL": "-- Apply the associative property of addition to both sides of the equation to regroup the terms to a + (b + (c + d)) = a + (c + (d + b))",
    "FL": "repeat rw [add_assoc]",
    "state": "a b c d : \u2115\n\u22a2 a + (b + (c + d)) = a + (c + (d + b))\n"
  },
  {
    "theorem": "truncated_var_swap",
    "NL": "-- Rewrite LHS, swapping b and c in the term b + c, to get a + (c + (b + d))",
    "FL": "rw [add_left_comm b c]",
    "state": "a b c d : \u2115\n\u22a2 a + (c + (b + d)) = a + (c + (d + b))\n"
  },
  {
    "theorem": "truncated_succ_peano",
    "NL": "-- Theorem Declaration: Prove the Peano axiom that the successor of a natural number cannot be 0 for all natural numbers \"a\".",
    "FL": "theorem truncated_succ_peano (a b : \u2115) (h : succ a = succ b) : a = b := by",
    "state": "a b : \u2115\nh : succ a = succ b\n\u22a2 a = b\n"
  },
  {
    "theorem": "truncated_succ_peano",
    "NL": "-- Rewrite a = b using the fact that the predecessor of the successor is itself, equation is now pred (succ a) = b",
    "FL": "rw [\u2190 pred_succ a]",
    "state": "a b : \u2115\nh : succ a = succ b\n\u22a2 pred (succ a) = b\n"
  },
  {
    "theorem": "truncated_succ_peano",
    "NL": "-- Rewrite the LHS pred (succ a) with the given statement that succ a = succ b, LHS is now pred (succ b)",
    "FL": "rw [h]",
    "state": "a b : \u2115\nh : succ a = succ b\n\u22a2 pred (succ b) = b\n"
  },
  {
    "theorem": "truncated_succ_ne_zero",
    "NL": "-- Theorem Declaration: Prove the Peano axiom that two numbers of which the successors are equal are themselves equal for natural numbers m, n",
    "FL": "theorem truncated_succ_ne_zero (a : \u2115) : succ a \u2260 0 := by",
    "state": "a : \u2115\n\u22a2 succ a \u2260 0\n"
  },
  {
    "theorem": "truncated_succ_ne_zero",
    "NL": "-- Introduce the statement that succ a = 0 is false",
    "FL": "intro h",
    "state": "a : \u2115\nh : succ a = 0\n\u22a2 False\n"
  },
  {
    "theorem": "truncated_succ_ne_zero",
    "NL": "-- Rewrite the proof goal to succ a = 0 if succ (a) is 0",
    "FL": "rw [\u2190 is_zero_succ a]",
    "state": "a : \u2115\nh : succ a = 0\n\u22a2 is_zero (succ a)\n"
  },
  {
    "theorem": "truncated_succ_ne_zero",
    "NL": "-- Rewrite the proof goal to showing that succ a = 0 if 0 is zero",
    "FL": "rw [h]",
    "state": "a : \u2115\nh : succ a = 0\n\u22a2 is_zero 0\n"
  },
  {
    "theorem": "truncated_succ_ne_zero",
    "NL": "-- Simplify the if 0 is zero condition to true",
    "FL": "rw [is_zero_zero]",
    "state": "a : \u2115\nh : succ a = 0\n\u22a2 True\n"
  },
  {
    "theorem": "truncated_succ_ne_succ",
    "NL": "-- Theorem Declaration: ",
    "FL": "theorem truncated_succ_ne_succ (m n : \u2115) (h : m \u2260 n) : succ m \u2260 succ n := by",
    "state": "m n : \u2115\nh : m \u2260 n\n\u22a2 succ m \u2260 succ n\n"
  },
  {
    "theorem": "truncated_succ_ne_succ",
    "NL": "-- Introduce the contrapositive, proving that m = n, given that succ m = succ n",
    "FL": "contrapose! h",
    "state": "m n : \u2115\nh : succ m = succ n\n\u22a2 m = n\n"
  },
  {
    "theorem": "truncated_succ_ne_succ",
    "NL": "-- Simplify succ m = succ n to m = n, using the injectivity of the successor",
    "FL": "apply succ_inj at h",
    "state": "m n : \u2115\nh : m = n\n\u22a2 m = n\n"
  }
]