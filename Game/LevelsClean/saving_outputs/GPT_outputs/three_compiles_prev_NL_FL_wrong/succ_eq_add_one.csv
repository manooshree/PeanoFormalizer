World Name,Theorem Name,Natural Language,Predicted Formalization,True Tactic,True Goal State,Predicted Goal State,Tactics Match,Is Incorrect Tactic,Correctly Identified As Wrong
succ_eq_add_one,succ_eq_add_one_persona_1_d,-- Rewrite on both RHS and LHS making n -> n + 0,rw [←add_zero n],rw [← add_zero n],"n : ℕ
⊢ succ (n + 0) = n + 0 + 1
","n : ℕ
⊢ succ (n + 0) = n + 0 + 1
",No,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d,-- Rewrite on RHS making 1 -> succ 0,rw [one_eq_succ_zero],rw [one_eq_succ_zero],"n : ℕ
⊢ succ (n + 0) = n + 0 + succ 0
","n : ℕ
⊢ succ (n + 0) = n + 0 + succ 0
",Yes,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d,-- Rewrite on RHS making n + 0 + succ(0) -> succ(n+0+0),rw [add_succ],rw [add_succ],"n : ℕ
⊢ succ (n + 0) = succ (n + 0 + 0)
","n : ℕ
⊢ succ (n + 0) = succ (n + 0 + 0)
",Yes,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d,"-- succ(n+0) = succ(n+0), QED",rw [add_zero],rfl,,"n : ℕ
⊢ succ n = succ (n + 0)
",No,Yes,No
succ_eq_add_one,succ_eq_add_one_persona_1_d2,-- Rewrite RHS 1 -> succ(0),rw [one_eq_succ_zero],rw [one_eq_succ_zero],"n : ℕ
⊢ succ n = n + succ 0
","n : ℕ
⊢ succ n = n + succ 0
",Yes,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d2,-- Rewrite both RHS and LHS n -> n + 0,"I am sorry, but the given natural language statement is not correct as rewriting both sides ""n"" to ""n + 0"" is not valid. The proof of the statement does not need rewriting n but rather the natural numbers in the equation. A correct natural language statement would be: -- Rewrite both RHS and LHS succ 0 -> 1, which would result in Lean code: rw [succ_eq_add_one]",rw [← add_zero n],"n : ℕ
⊢ succ (n + 0) = n + 0 + succ 0
","n : ℕ
⊢ succ n = n + succ 0
",No,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d2,-- Rewrite RHS n + 0 + succ(0) -> succ(n + 0 + 0),rw [add_succ],rw [add_succ],"n : ℕ
⊢ succ (n + 0) = succ (n + 0 + 0)
","n : ℕ
⊢ succ n = n + succ 0
",Yes,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d2,-- Rewrite LHS and RHS n + 0 -> n,rw [add_zero],rw [add_zero],"n : ℕ
⊢ succ n = succ (n + 0)
","n : ℕ
⊢ succ n = n + succ 0
",Yes,No,Yes
succ_eq_add_one,succ_eq_add_one_persona_1_d2,"-- succ(n) = succ(n), QED",rfl,rfl,,"n : ℕ
⊢ succ n = n + succ 0
",Yes,Yes,No
