{
    "rfl_intro": {
        "rfl_intro": [
            {
                "theorem": "rfl_intro",
                "NL": "-- Proof Statement: Prove for natural numbers x, q, that 37 * x + q = 37 * x + q",
                "FL": "theorem rfl_intro (x q : \u2115) : 37 * x + q = 37 * x + q := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rfl_intro",
                "NL": "  -- Prove LHS and RHS are equal, 37 * x + q = 37 * x + q, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "rfl_intro_dev_1": [
            {
                "theorem": "rfl_intro_dev_1",
                "NL": "-- Proof Statement: Prove for natural numbers x, q, that 37 * x + q = 37 * x + q",
                "FL": "theorem rfl_intro_dev_1 (x q : \u2115) : 37 * x + q = 37 * x + q := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rfl_intro_dev_1",
                "NL": "  -- 37 * x + q = 37 * x + q, QED",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "rw_intro": {
        "rw_intro": [
            {
                "theorem": "rw_intro",
                "NL": "-- Proof Statement: Prove 2 * y = 2 * (x + 7) for natural numbers x, y, given that y = x + 7",
                "FL": "theorem rw_intro (x y : \u2115) (h : y = x + 7) : 2 * y = 2 * (x + 7) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rw_intro",
                "NL": "  -- Rewrite 2 * y in the LHS of the proof goal as 2 * (x + 7) using the fact that y = x + 7",
                "FL": "  rw [h]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rw_intro",
                "NL": "  -- Prove LHS and RHS are equal, 2 * (x + 7) = 2 * (x + 7), completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "rw_intro_dev_2": [
            {
                "theorem": "rw_intro_dev_2",
                "NL": "-- Proof Statement: Prove 2 * y = 2 * (x + 7) for natural numbers x, y, given that y = x + 7",
                "FL": "theorem rw_intro_dev_2 (x y : \u2115) (h : y = x + 7) : 2 * y = 2 * (x + 7) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rw_intro_dev_2",
                "NL": "  -- We use our hypothesis to rewrite on the LHS, obtaining 2 * (x + 7)",
                "FL": "  rw [h]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rw_intro_dev_2",
                "NL": "  -- both sides of the equation are equal hence we can complete the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "two_eq_ss0:": {
        "two_eq_ss0_dev_1:": [
            {
                "theorem": "two_eq_ss0_dev_1:",
                "NL": "-- Proof Statement: Prove that the succ (succ (0)) is 2.",
                "FL": "theorem two_eq_ss0_dev_1: 2 = succ (succ 0) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_eq_ss0_dev_1:",
                "NL": "   -- Substitute 2 -> succ(1) on the LHS",
                "FL": "  rw [two_eq_succ_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_eq_ss0_dev_1:",
                "NL": "  -- Substitute 1 -> succ(0) on the LHS",
                "FL": "  rw [one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_eq_ss0_dev_1:",
                "NL": "  -- succ(succ(0)) = succ(succ(0)), QED",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "two_eq_ss0_dev_2:": [
            {
                "theorem": "two_eq_ss0_dev_2:",
                "NL": "-- Proof Statement: Prove that the succ (succ (0)) is 2.",
                "FL": "theorem two_eq_ss0_dev_2: 2 = succ (succ 0) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_eq_ss0_dev_2:",
                "NL": "   -- Using the successor properties, we can rewrite the LHS to succ 1",
                "FL": "  rw [two_eq_succ_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_eq_ss0_dev_2:",
                "NL": "  -- Using the successor properties once again, we can rewrite the LHS to succ(succ(0))",
                "FL": "  rw [one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_eq_ss0_dev_2:",
                "NL": "  -- both sides of the equation are equal hence we can complete the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "rw_backwards": {
        "rw_backwards": [
            {
                "theorem": "rw_backwards",
                "NL": "-- Proof Statement: Prove that the succ (succ (0)) is 2.",
                "FL": "theorem rw_backwards : 2 = succ (succ 0) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rw_backwards",
                "NL": "  -- Simplify succ 0 to 1, changing RHS from succ (succ 0) to succ 1",
                "FL": "  rw [\u2190 one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rw_backwards",
                "NL": "  -- Simplify succ 1 to 2, changing RHS from succ 1 to 2",
                "FL": "  rw [\u2190 two_eq_succ_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rw_backwards",
                "NL": "  -- Prove LHS and RHS are equal, 2 = 2, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "rw_backwards_dev_2": [
            {
                "theorem": "rw_backwards_dev_2",
                "NL": "-- Proof Statement: Prove that the succ (succ (0)) is 2.",
                "FL": "theorem rw_backwards_dev_2 : 2 = succ (succ 0) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rw_backwards_dev_2",
                "NL": "  -- Using the successor properties, we can rewrite the RHS to succ 1",
                "FL": "  rw [\u2190 one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rw_backwards_dev_2",
                "NL": "  -- Using the successor properties once again, we can rewrite the LHS to 2",
                "FL": "  rw [\u2190 two_eq_succ_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "rw_backwards_dev_2",
                "NL": "  -- both sides of the equation are equal hence we can complete the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_zero_intro": {
        "add_zero_intro": [
            {
                "theorem": "add_zero_intro",
                "NL": "-- Proof Statement: Prove for natural numbers a, b, and c, that a + (b + 0) + (c + 0) is equal to a + b + c",
                "FL": "theorem add_zero_intro (a b c : \u2115) : a + (b + 0) + (c + 0) = a + b + c := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_zero_intro",
                "NL": "  -- Simplify the expression in the LHS (b + 0) to  b",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_zero_intro",
                "NL": "  -- Simplify the expression in the LHS (c + 0) to c",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_zero_intro",
                "NL": "  -- Prove LHS and RHS are equal, a + b + c = a + b + c, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_zero_2_dev_2": [
            {
                "theorem": "add_zero_2_dev_2",
                "NL": "-- Proof Statement: Prove for natural numbers a, b, and c, that a + (b + 0) + (c + 0) is equal to a + b + c",
                "FL": "theorem add_zero_2_dev_2 (a b c : \u2115) : a + (b + 0) + (c + 0) = a + b + c := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_zero_2_dev_2",
                "NL": "-- Using the properties of addition by 0, we can rewrite b + 0 to b",
                "FL": "  rw [add_zero b]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_zero_2_dev_2",
                "NL": "-- Using the properties of addition by 0, we can rewrite c + 0 to c",
                "FL": "  rw [add_zero c]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_zero_2_dev_2",
                "NL": "-- both sides of the equation are equal hence we can complete the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "succ_eq_add_one": {
        "succ_eq_add_one": [
            {
                "theorem": "succ_eq_add_one",
                "NL": "-- Proof Statement: For natural number n, prove that succ n is equivalent to n + 1",
                "FL": "theorem succ_eq_add_one n : succ n = n + 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_eq_add_one",
                "NL": "  -- Rewrite RHS n + 1 as n + succ 0",
                "FL": "  rw [one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_eq_add_one",
                "NL": "  -- Rewrite RHS from n + succ 0 to succ (n + 0)",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_eq_add_one",
                "NL": "  -- Simplify RHS succ (n + 0) to succ n",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_eq_add_one",
                "NL": "  -- Prove LHS and RHS are equal, succ n = succ n, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "succ_eq_add_one_dev_2": [
            {
                "theorem": "succ_eq_add_one_dev_2",
                "NL": "-- Proof Statement: For natural number n, prove that succ n is equivalent to n + 1",
                "FL": "theorem succ_eq_add_one_dev_2 : succ n = n + 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_eq_add_one_dev_2",
                "NL": "  -- Rewrite RHS 1 -> succ(0)",
                "FL": "  rw [one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_eq_add_one_dev_2",
                "NL": "  -- Rewrite both RHS and LHS n -> n + 0",
                "FL": "  rw [\u2190 add_zero n]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_eq_add_one_dev_2",
                "NL": "  -- Rewrite RHS n + 0 + succ(0) -> succ(n + 0 + 0)",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_eq_add_one_dev_2",
                "NL": "  -- Rewrite LHS and RHS n + 0 -> n",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_eq_add_one_dev_2",
                "NL": "  -- Rewrite RHS n + 0 -> n",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_eq_add_one_dev_2",
                "NL": "  -- succ(n) = succ(n), QED",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "twoaddtwo": {
        "twoaddtwo_dev_1": [
            {
                "theorem": "twoaddtwo_dev_1",
                "NL": "-- Proof Statement: Prove 2 + 2 = 4",
                "FL": "theorem twoaddtwo_dev_1 : (2 : \u2115) + 2 = 4 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_1",
                "NL": "  -- 4 -> succ(3) on the RHS to obtain 2 + 2 = succ(3)",
                "FL": "  rw [four_eq_succ_three]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_1",
                "NL": "  -- 3 -> succ(2) on the RHS to obtain 2 + 2 = succ(succ(2))",
                "FL": "  rw [three_eq_succ_two]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_1",
                "NL": "  -- 2 -> succ(1) on the LHS and RHS to obtain succ(1) + succ(1) = succ(succ(succ(1)))",
                "FL": "  rw [two_eq_succ_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_1",
                "NL": "  --  succ(1) + succ(1) -> succ(succ(1) + 1) on the LHS to obtain succ(succ(1) + 1) = succ(succ(succ(1)))",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_1",
                "NL": "  -- 1 -> succ(0) on the LHS and RHS to obtain succ(succ(succ(0) + succ(0))) = succ(succ(succ(0)))",
                "FL": "  rw [one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_1",
                "NL": "  -- succ (succ (succ 0) + succ 0) -> succ(succ(succ((0))) + 0 on the LHS to obtain succ(succ(succ(0) + 0)) = succ(succ(succ(0)))",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_1",
                "NL": "  -- succ(succ(succ((0))) + 0 -> succ(succ(succ((0))) on LHS to obtain succ(succ(succ(0))) = succ(succ(succ(0)))",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_1",
                "NL": "  -- succ(succ(succ(0))) = succ(succ(succ(0))), QED",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "twoaddtwo_dev_2": [
            {
                "theorem": "twoaddtwo_dev_2",
                "NL": "-- Proof Statement: Prove 2 + 2 = 4",
                "FL": "theorem twoaddtwo_dev_2 : (2 : \u2115) + 2 = 4 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_2",
                "NL": "  -- Use properties of succession, replacing LHS with 2 + succ(1)",
                "FL": "  nth_rewrite 2 [two_eq_succ_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_2",
                "NL": "  -- use another property of succession to rewrite LHS to succ(2 + 1)",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_2",
                "NL": "  -- Using properties of succession, rewrite 1 to succ(0) on LHS",
                "FL": "  rw [one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_2",
                "NL": "  -- Using properties of succession, rewrite LHS to succ(succ(2 + 0))",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_2",
                "NL": "  -- Using properties of addition by zero, rewrite LHS to succ(succ(2))",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_2",
                "NL": "  -- Using properties of succession, rewrite 4 to succ(3) on RHS",
                "FL": "  rw [four_eq_succ_three]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_2",
                "NL": "  -- Using properties of succession, rewrite to succ(3) on LHS",
                "FL": "  rw [\u2190 three_eq_succ_two]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "twoaddtwo_dev_2",
                "NL": "  -- Prove LHS and RHS are equal, succ(3) = succ(3), completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "exact": {
        "exact_dev_1": [
            {
                "theorem": "exact_dev_1",
                "NL": "-- Proof Statement: Prove that given some x, y, z which are natural numbers, x + y = 37. We can assume that x + y = 37 and 3 * x + z = 42",
                "FL": "theorem exact_dev_1 (x y z : \u2115) (h1 : x + y = 37) (h2 : 3 * x + z = 42) : x + y = 37 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_dev_1",
                "NL": "  -- We are given that x + y = 37, so we are done.",
                "FL": "  exact h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "exact_dev_2": [
            {
                "theorem": "exact_dev_2",
                "NL": "-- Proof Statement: Prove that given some x, y, z which are natural numbers, x + y = 37. We can assume that x + y = 37 and 3 * x + z = 42",
                "FL": "theorem exact_dev_2 (x y z : \u2115) (h1 : x + y = 37) (h2 : 3 * x + z = 42) : x + y = 37 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_dev_2",
                "NL": "  -- x + y = 37",
                "FL": "  exact h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "exact_2": {
        "exact_2": [
            {
                "theorem": "exact_2",
                "NL": "-- Proof Statement: For some natural number x, prove x = y + 2. We are given that 0 + x = 0 + y + 2",
                "FL": "theorem exact_2 (x : \u2115) (h : 0 + x = 0 + y + 2) : x = y + 2 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_2",
                "NL": "  -- Rewrite 0 + x in the LHS of the hypothesis to x",
                "FL": "  rw [zero_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_2",
                "NL": "  -- Rewrite 0 + y to y in the RHS of the hypothesis",
                "FL": "  rw [zero_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_2",
                "NL": "  -- Our simplified hypothesis is now x = y + 2, we have shown exactly our goal and can complete the proof",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "exact_2_dev_1": [
            {
                "theorem": "exact_2_dev_1",
                "NL": "-- Proof Statement: For some natural number x, prove x = y + 2. We are given that  0 + x = 0 + y + 2",
                "FL": "theorem exact_2_dev_1 (x : \u2115) (h : 0 + x = 0 + y + 2) : x = y + 2 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_2_dev_1",
                "NL": "  -- We simplify the given statement of 0 + x = 0 + y + 2 to x = y + 2.",
                "FL": "  rw [zero_add, zero_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_2_dev_1",
                "NL": "  -- So, x = y + 2, which is exactly our proof goal.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "exact_3": {
        "exact_3_dev_1": [
            {
                "theorem": "exact_3_dev_1",
                "NL": "-- Proof Statement: For some x which is a natural number, given that  0 + x = 0 + y + 3, prove x = y + 3",
                "FL": "theorem exact_3_dev_1 (x : \u2115) (h : 0 + x = 0 + y + 3) : x = y + 3 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_3_dev_1",
                "NL": "  -- Simplify LHS of 0 + x = 0 + y + 3 to x = 0 + y + 3",
                "FL": "  rw [zero_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_3_dev_1",
                "NL": "  -- Simplify RHS of x = 0 + y + 3 to x = y + 3",
                "FL": "  rw [zero_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_3_dev_1",
                "NL": "  -- So, x = y + 3, which is exactly what we wanted to prove.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "exact_3_dev_2": [
            {
                "theorem": "exact_3_dev_2",
                "NL": "-- Proof Statement: For some x which is a natural number, given that  0 + x = 0 + y + 3, prove x = y + 3",
                "FL": "theorem exact_3_dev_2 (x : \u2115) (h : 0 + x = 0 + y + 3) : x = y + 3 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_3_dev_2",
                "NL": "  -- given hypothesis x = y + 3",
                "FL": "  repeat rw [zero_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_3_dev_2",
                "NL": "  -- x = y + 3",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "exact_4": {
        "exact_4": [
            {
                "theorem": "exact_4",
                "NL": "-- Proof Statement: For some x and y which are natural numbers, given that x = 37 and that x = 37 implied y = 42, prove y = 42",
                "FL": "theorem exact_4 (x y : \u2115) (h1 : x = 37) (h2 : x = 37 \u2192 y = 42) : y = 42 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_4",
                "NL": "  -- Starting with the given statement that x = 37, use the given implication that x = 37 \u2192 y = 42, to deduce that y = 42",
                "FL": "  apply h2 at h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_4",
                "NL": "  -- We can exactly prove that y = 42 with our given facts, to complete the proof",
                "FL": "  exact h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "exact_4_dev_2": [
            {
                "theorem": "exact_4_dev_2",
                "NL": "-- Proof Statement: For some x and y which are natural numbers, given that x = 37 and that x = 37 implied y = 42, prove y = 42",
                "FL": "theorem exact_4_dev_2 (x y : \u2115) (h1 : x = 37) (h2 : x = 37 \u2192 y = 42) : y = 42 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_4_dev_2",
                "NL": "  -- given x = 37 and x = 37 -> y = 42 , y = 42",
                "FL": "  apply h2 at h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_4_dev_2",
                "NL": "  -- y = 42",
                "FL": "  exact h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "exact_5": {
        "exact_5": [
            {
                "theorem": "exact_5",
                "NL": "-- Proof Statement: For some x which is a natural number, given x + 1 = 4, prove that x = 3",
                "FL": "theorem exact_5 (x : \u2115) (h : x + 1 = 4) : x = 3 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_5",
                "NL": "  -- Rewrite 4 as succ 3 in the given statement x + 1 = 4, changing it to x + 1 = succ 3",
                "FL": "  rw [four_eq_succ_three] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_5",
                "NL": "  -- Rewrite LHS in the given hypothesis such that x + 1 is succ x, then given statement is succ x = succ 3.",
                "FL": "  rw [\u2190succ_eq_add_one] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_5",
                "NL": "  -- Apply the injectivity of the successor function to the given succ x = succ 3, simplifying to x = 3.",
                "FL": "  apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_5",
                "NL": "  -- We can exactly prove that x = 3 with our given facts, to complete the proof",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "exact_5_dev_1": [
            {
                "theorem": "exact_5_dev_1",
                "NL": "-- Proof Statement: For some x which is a natural number, given x + 1 = 4, prove that x = 3",
                "FL": "theorem exact_5_dev_1 (x : \u2115) (h : x + 1 = 4) : x = 3 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_5_dev_1",
                "NL": "  -- We replace 4 with succ 3 in x + 1 = 4 in the given statement.",
                "FL": "  rw [four_eq_succ_three] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_5_dev_1",
                "NL": "  -- We replace x + 1 with succ x in the given statement (x + 1 = 4).",
                "FL": "  rw [\u2190succ_eq_add_one] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_5_dev_1",
                "NL": "  -- By the injectivity of successor function, x = 3.",
                "FL": "  apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_5_dev_1",
                "NL": "  -- So, x = 3, which is exactly what we wanted to prove.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "exact_6": {
        "exact_6": [
            {
                "theorem": "exact_6",
                "NL": "-- Proof Statement: For some x, which is a natural number, given x + 1 = 4, prove that x = 3",
                "FL": "theorem exact_6 (x : \u2115) (h : x + 1 = 4) : x = 3 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_6",
                "NL": "  -- Expand the proof goal to succ x = succ 3 using the injectivity of the successor function",
                "FL": "  apply succ_inj",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_6",
                "NL": "  -- Rewrite the RHS, replacing 'succ x' with 'x + 1'.",
                "FL": "  rw [succ_eq_add_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_6",
                "NL": "  -- Simplify succ (3) to 4",
                "FL": "  rw [\u2190 four_eq_succ_three]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_6",
                "NL": "  -- We can exactly show that x + 1 = 4 holds true, assuming x = 3, completing the proof",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "exact_6_dev_2": [
            {
                "theorem": "exact_6_dev_2",
                "NL": "-- Proof Statement: For some x, which is a natural number, given x + 1 = 4, prove that x = 3",
                "FL": "theorem exact_6_dev_2 (x : \u2115) (h : x + 1 = 4) : x = 3 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_6_dev_2",
                "NL": "  -- expand goal succ x = succ 3",
                "FL": "  apply succ_inj",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_6_dev_2",
                "NL": "  -- x + 1 = succ 3",
                "FL": "  rw [succ_eq_add_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_6_dev_2",
                "NL": "  --  x + 1 = 4",
                "FL": "  rw [\u2190 four_eq_succ_three]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_6_dev_2",
                "NL": "  -- x + 1 = 4",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "exact_7": {
        "exact_7_dev_1": [
            {
                "theorem": "exact_7_dev_1",
                "NL": "-- Proof Statement: For some x which is a natural number, prove that x = 37 implies x = 37",
                "FL": "theorem exact_7_dev_1 (x : \u2115) : x = 37 \u2192 x = 37 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_7_dev_1",
                "NL": "  -- Consider the hypothesis x = 37.",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_7_dev_1",
                "NL": "  -- So, x = 37, which is what we want to show.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "exact_7_dev_2": [
            {
                "theorem": "exact_7_dev_2",
                "NL": "-- Proof Statement: For some x which is a natural number, prove that x = 37 implies x = 37",
                "FL": "theorem exact_7_dev_2 (x : \u2115) : x = 37 \u2192 x = 37 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_7_dev_2",
                "NL": "  -- assume x = 37",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_7_dev_2",
                "NL": "  -- x = 37",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "exact_8": {
        "exact_8": [
            {
                "theorem": "exact_8",
                "NL": "-- Proof Statement: For some x and which are natural numbers, prove that x + 1 = y + 1 implies x = y",
                "FL": "theorem exact_8 (x : \u2115) : x + 1 = y + 1 \u2192 x = y := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_8",
                "NL": "  -- We assume that x + 1 = y + 1",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_8",
                "NL": "  -- Rewrite x + 1 and y + 1 to succ x and succ y in the LHS and RHS respectively",
                "FL": "  repeat rw [\u2190 succ_eq_add_one] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_8",
                "NL": "  -- Apply the injectivity of the successor function to 'succ x = succ y', simplifying it to 'x = y'.",
                "FL": "  apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_8",
                "NL": "  -- We can exactly show that x + 1 = y + 1 implies x = y, completing the proof",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "exact_8_dev_1": [
            {
                "theorem": "exact_8_dev_1",
                "NL": "-- Proof Statement: For some x and which are natural numbers, prove that x + 1 = y + 1 implies x = y",
                "FL": "theorem exact_8_dev_1 (x : \u2115) : x + 1 = y + 1 \u2192 x = y := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_8_dev_1",
                "NL": "  -- Consider the given hypothesis x + 1 = y + 1.",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_8_dev_1",
                "NL": "  -- Rewrite x + 1 to succ x in the given hypothesis",
                "FL": "  rw [\u2190 succ_eq_add_one] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_8_dev_1",
                "NL": "  -- Rewrite y + 1 to succ x in the given hypothesis",
                "FL": "  rw [\u2190 succ_eq_add_one] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_8_dev_1",
                "NL": "  -- Apply injectivity of the successor function, simplify to x = y",
                "FL": "  apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_8_dev_1",
                "NL": "  -- Thus, x = y, which is exactly what we wanted to show.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "exact_9": {
        "exact_9_dev_1": [
            {
                "theorem": "exact_9_dev_1",
                "NL": "-- Proof Statement: For some x and which are natural numbers, prove that x + 1 = y + 1 implies x = y",
                "FL": "theorem exact_9_dev_1 (x : \u2115) : x + 1 = y + 1 \u2192 x = y := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_9_dev_1",
                "NL": "  -- Assume the hypothesis x + 1 = y + 1",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_9_dev_1",
                "NL": "  -- By the injectivity of succ, it suffices to show that succ x = succ y",
                "FL": "  apply succ_inj",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_9_dev_1",
                "NL": "  -- Rewrite using successor definition, succ x as x + 1 and succ y as y + 1",
                "FL": "  rw [succ_eq_add_one, succ_eq_add_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_9_dev_1",
                "NL": "  -- Now we show x + 1 = y + 1, which is true by hypothesis",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "exact_9_dev_2": [
            {
                "theorem": "exact_9_dev_2",
                "NL": "-- Proof Statement: For some x and which are natural numbers, prove that x + 1 = y + 1 implies x = y",
                "FL": "theorem exact_9_dev_2 (x : \u2115) : x + 1 = y + 1 \u2192 x = y := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_9_dev_2",
                "NL": "  -- assume x + 1 = y + 1",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_9_dev_2",
                "NL": "  -- succ x = succ y",
                "FL": "  apply succ_inj",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_9_dev_2",
                "NL": "  -- x + 1 = y + 1",
                "FL": "  repeat rw [succ_eq_add_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_9_dev_2",
                "NL": "  -- x + 1 = y + 1",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "exact_10": {
        "exact_10": [
            {
                "theorem": "exact_10",
                "NL": "-- Proof Statement: For some x and y which are natural numbers, prove that both x = y and x \u2260 y cannot be true",
                "FL": "theorem exact_10 (x y : \u2115) (h1 : x = y) (h2 : x \u2260 y) : False := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_10",
                "NL": "  -- We apply the assumption x \u2260 y to the given statement that x = y, which contradicts and results in a falsehood",
                "FL": "  apply h2 at h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_10",
                "NL": "  -- We have proven that both x = y and x \u2260 y cannot be true, completing the proof",
                "FL": "  exact h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "exact_10_dev_2": [
            {
                "theorem": "exact_10_dev_2",
                "NL": "-- Proof Statement: For some x and y which are natural numbers, prove that both x = y and x \u2260 y cannot be true",
                "FL": "theorem exact_10_dev_2 (x y : \u2115) (h1 : x = y) (h2 : x \u2260 y) : False := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_10_dev_2",
                "NL": "  -- x = y AND x \u2260 y is False",
                "FL": "  apply h2 at h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "exact_10_dev_2",
                "NL": "  -- False",
                "FL": "  exact h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "zero_ne_one": {
        "zero_ne_one_dev_1": [
            {
                "theorem": "zero_ne_one_dev_1",
                "NL": "-- Proof Statement: Given that 0 is a natural number, prove that 0 \u2260 1",
                "FL": "theorem zero_ne_one_dev_1 : (0 : \u2115) \u2260 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_ne_one_dev_1",
                "NL": "  -- To show 0 \u2260 1, we assume 0 = 1 and derive a contradiction/falsehood",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_ne_one_dev_1",
                "NL": "  -- Rewrite 1 as the successor of 0 in our assumption",
                "FL": "  rw [one_eq_succ_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_ne_one_dev_1",
                "NL": "  -- But 0 = succ 0 implies a falsehood by the Peano axiom that zero is not the successor of any natural number",
                "FL": "  apply zero_ne_succ at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_ne_one_dev_1",
                "NL": "  -- So, we have a falsehood, and the proof is complete.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "zero_ne_one_dev_2": [
            {
                "theorem": "zero_ne_one_dev_2",
                "NL": "-- Proof Statement: Given that 0 is a natural number, prove that 0 \u2260 1",
                "FL": "theorem zero_ne_one_dev_2 : (0 : \u2115) \u2260 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_ne_one_dev_2",
                "NL": "  -- assume 0 = 1",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_ne_one_dev_2",
                "NL": "  -- Assumption is False",
                "FL": "  apply zero_ne_succ at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_ne_one_dev_2",
                "NL": "  -- False",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "one_ne_zero": {
        "one_ne_zero": [
            {
                "theorem": "one_ne_zero",
                "NL": "-- Proof Statement: Given that 1 is a natural number, prove that 1 \u2260 0",
                "FL": "theorem one_ne_zero : (1 : \u2115) \u2260 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_ne_zero",
                "NL": "  -- Rewrite our proof goal to 0 \u2260 1",
                "FL": "  symm",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_ne_zero",
                "NL": "  -- Apply the proof that 0 \u2260 1 exactly to our proof goal, completing the proof",
                "FL": "  exact zero_ne_one",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "one_ne_zero_dev_1": [
            {
                "theorem": "one_ne_zero_dev_1",
                "NL": "-- Proof Statement: Given that 1 is a natural number, prove that 1 \u2260 0",
                "FL": "theorem one_ne_zero_dev_1 : (1 : \u2115) \u2260 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_ne_zero_dev_1",
                "NL": "  -- Assume 1 = 0, we will prove this is a contradiction and false",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_ne_zero_dev_1",
                "NL": "  -- Use the fact that 1 is the successor of zero in our assumption, which is now succ 0 = 0",
                "FL": "  rw [one_eq_succ_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_ne_zero_dev_1",
                "NL": "  -- Use the definition of the successor function to rewrite the assumption as 0 + 1 = 0",
                "FL": "  rw [succ_eq_add_one] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_ne_zero_dev_1",
                "NL": "  -- Instead of proving 0 + 1 = 0, we will prove the equal statement that 0 = 0 + 1",
                "FL": "  symm at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_ne_zero_dev_1",
                "NL": "  -- Simplify 0 + 1 to 0 via the zero property of addition. Assumption is now 0 = 1",
                "FL": "  rw [zero_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_ne_zero_dev_1",
                "NL": "  -- 0 = 1 is false, our assumption is false",
                "FL": "  apply zero_ne_one at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_ne_zero_dev_1",
                "NL": "  -- We have proven our assumption false and completed the proof",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "two_five": {
        "two_five": [
            {
                "theorem": "two_five",
                "NL": "-- Proof Statement: Prove that 2 + 2 \u2260 5;  written in successor terms: succ (succ 0) + succ (succ 0) \u2260 succ (succ (succ (succ (succ 0))))",
                "FL": "theorem two_five : succ (succ 0) + succ (succ 0) \u2260 succ (succ (succ (succ (succ 0)))) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_five",
                "NL": "  -- Assume the contradiction that succ (succ 0) + succ (succ 0) = succ (succ (succ (succ (succ 0))))",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_five",
                "NL": "  -- Rewrite the LHS of our assumption, transforming succ (succ 0) + succ (succ 0) to succ (succ (succ (succ 0)))",
                "FL": "  rw [add_succ, add_succ, add_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_five",
                "NL": "  -- Repeatedly apply the injectivity of the successor function to the assumption until we simplify the assumption equation to 0 = succ 0",
                "FL": "  repeat apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_five",
                "NL": "  -- Apply the fact that zero is not equal to the successor of zero, showing our assumption is false",
                "FL": "  apply zero_ne_succ at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_five",
                "NL": "  -- We have shown that succ (succ 0) + succ (succ 0) \u2260 succ (succ (succ (succ (succ 0)))) is false, completing the proof",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "two_five_dev_2": [
            {
                "theorem": "two_five_dev_2",
                "NL": "-- Proof Statement: Prove that 2 + 2 \u2260 5;  written in successor terms: succ (succ 0) + succ (succ 0) \u2260 succ (succ (succ (succ (succ 0))))",
                "FL": "theorem two_five_dev_2 : succ (succ 0) + succ (succ 0) \u2260 succ (succ (succ (succ (succ 0)))) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_five_dev_2",
                "NL": "  -- assume contradiction succ (succ 0) + succ (succ 0) = succ (succ (succ (succ (succ 0))))",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_five_dev_2",
                "NL": "  -- succ (succ (succ (succ (0)) + 0)) = succ (succ (succ (succ (succ 0))))",
                "FL": "  rw [add_succ, add_succ] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_five_dev_2",
                "NL": "  -- succ (succ (succ (succ 0))) = succ (succ (succ (succ (succ 0))))",
                "FL": "  rw [add_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_five_dev_2",
                "NL": "  -- 0 = succ 0",
                "FL": "  repeat apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_five_dev_2",
                "NL": "  -- False",
                "FL": "  apply zero_ne_succ at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_five_dev_2",
                "NL": "  -- False, proof is complete",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "zero_add": {
        "zero_add": [
            {
                "theorem": "zero_add",
                "NL": "--Proof Statement: Prove that 0 + n = n for all natural numbers",
                "FL": "theorem zero_add (n : \u2115) : 0 + n = n := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add",
                "NL": "-- Induct on n, with d = 0 as the base case and the inductive hypothesis 0 + d = d. There are now two proof goals, prove base case: 0 + 0 = 0, and inductive step: 0 + succ (d) = succ (d)",
                "FL": "  induction n with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add",
                "NL": "-- First prove base case. Reduce LHS 0 + 0 = 0.",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add",
                "NL": "-- Prove LHS and RHS are equal, 0 = 0, completing base case",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add",
                "NL": "-- Now prove inductive step. Rewrite 0 + succ d = succ (0 + d)",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add",
                "NL": "-- Simplify RHS succ (0 + d) = succ(d) using the inductive hypothesis.",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add",
                "NL": "-- Prove LHS and RHS are equal, succ(d) = succ(d), completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "zero_add_dev_1(n": [
            {
                "theorem": "zero_add_dev_1(n",
                "NL": "--Proof Statement: Prove that 0 + n = n for all natural numbers",
                "FL": "theorem zero_add_dev_1(n : \u2115) : 0 + n = n := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add_dev_1(n",
                "NL": "-- Induct on n",
                "FL": "  induction n with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add_dev_1(n",
                "NL": "-- substitute 0 -> 0 + 0 into the RHS giving us 0 + 0 = 0 + 0",
                "FL": "  nth_rewrite 3 [\u2190 add_zero 0]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add_dev_1(n",
                "NL": "-- 0 + 0 = 0 + 0, completing base case",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add_dev_1(n",
                "NL": "-- 0 + succ d -> succ (0 + d) on LHS giving us succ (0 + d) = succ d",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add_dev_1(n",
                "NL": "-- 0 + d -> d on LHS -> succ d = succ d",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_add_dev_1(n",
                "NL": "-- succ d = succ d, QED",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "succ_add": {
        "succ_add_dev_1(a": [
            {
                "theorem": "succ_add_dev_1(a",
                "NL": "-- Proof Statement: Prove that the addition of natural numbers is associative, that is a + b + c = a + (b + c).",
                "FL": "theorem succ_add_dev_1(a b : \u2115) : succ a + b = succ (a + b) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_1(a",
                "NL": "-- Initiate induction on b",
                "FL": "induction b with n hn",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_1(a",
                "NL": "-- succ(a) + 0 -> succ(a) on LHS giving us succ(a) = succ(a+0)",
                "FL": "rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_1(a",
                "NL": "-- a + 0 -> a on RHS giving us succ(a) = succ(a)",
                "FL": "rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_1(a",
                "NL": "-- succ(a) = succ(a), Hence we are done with the base case",
                "FL": "rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_1(a",
                "NL": "-- Now for the induction case. succ(a) + succ(n) -> succ(succ(a) + n) on LHS giving us succ(succ(a) + n) = succ(a + succ(n))",
                "FL": "rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_1(a",
                "NL": "-- a + succ(n) -> succ(a + n) on RHS giving us succ(succ(a) + n) = succ(succ(a + n))",
                "FL": "rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_1(a",
                "NL": "-- using induction hypothesis, succ(a + n) -> succ(a) + n on RHS. Hence we get succ(succ(a) + n) = succ(succ(a) + n)",
                "FL": "rw [\u2190 hn]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_1(a",
                "NL": "-- succ(succ(a) + n) = succ(succ(a) + n), QED",
                "FL": "rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "succ_add_dev_2": [
            {
                "theorem": "succ_add_dev_2",
                "NL": "-- Proof Statement: Prove that the addition of natural numbers is associative, that is a + b + c = a + (b + c).",
                "FL": "theorem succ_add_dev_2 (a b : \u2115) : succ a + b = succ (a + b)  := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_2",
                "NL": "-- Initiate induction on b.",
                "FL": " induction b with n hn",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_2",
                "NL": "-- We start by proving the base case using properties of succession, succ(a+0) = a + succ(0) on RHS",
                "FL": " rw [\u2190 add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_2",
                "NL": "-- Now using properties of addition by 0, we can rewrite succ(a) + 0 to succ(a) on the LHS",
                "FL": " rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_2",
                "NL": "-- Now using properties of succession, we can rewrite succ(a) + 0 to succ(a+0) on the RHS",
                "FL": " rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_2",
                "NL": "-- Now using properties of addition by 0, we can rewrite a + 0 to a on the RHS",
                "FL": " rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_2",
                "NL": "-- since succ(a) = succ(a), we are done with the base case",
                "FL": " rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_2",
                "NL": "-- Now to prove the induction case, we use properties of succession substituting succ(a) + succ(n) = succ(succ(a) + n) on LHS",
                "FL": " rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_2",
                "NL": "-- Now again using properties of succession, we substitute succ(a + succ(n)) to succ(succ(a + n)) on the RHS",
                "FL": " rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_2",
                "NL": "-- Using the induction hypothesis giving us succ(succ(a) + n) = succ(succ(a) + n) on the LHS",
                "FL": " rw [\u2190 hn]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_add_dev_2",
                "NL": "-- both sides are equal, hence we are done",
                "FL": " rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_comm": {
        "add_comm": [
            {
                "theorem": "add_comm",
                "NL": "-- Proof Statement: Prove that addition is commutative, that is a + b  = b + a for all natural numbers",
                "FL": "theorem add_comm (a b : \u2115) : a + b = b + a := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm",
                "NL": "-- Induct on b, with d = 0 as the base case and the inductive hypothesis a + d = d + a. There are now two proof goals, prove base case: a + 0 = 0 + a and the inductive step: a + succ d = succ d + a",
                "FL": "  induction b with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm",
                "NL": "-- First prove base case. Simplify LHS a + 0 = a.",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm",
                "NL": "-- Simplify RHS 0 + a = a",
                "FL": "  rw [zero_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm",
                "NL": "-- Prove LHS and RHS are equal, a = a, completing the base case.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm",
                "NL": "-- Now prove the inductive step. Rewrite LHS a + succ (d) = succ (a + d)",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm",
                "NL": "-- Rewrite RHS succ (d) + a = succ (d + a)",
                "FL": "  rw [succ_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm",
                "NL": "-- Rewrite LHS succ (a + d) to succ (d + a) using the inductive hypothesis",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm",
                "NL": "-- Prove succ LHS and RHS are equal, (d + a) = succ (d + a), completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_comm_dev_1": [
            {
                "theorem": "add_comm_dev_1",
                "NL": "-- Proof Statement: Prove that addition is commutative, that is a + b  = b + a for all natural numbers",
                "FL": "theorem add_comm_dev_1 (a b : \u2115) : a + b = b + a := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm_dev_1",
                "NL": "-- Start by inducting on b",
                "FL": "  induction b with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm_dev_1",
                "NL": "-- 0 + a -> a on RHS giving us a + 0 = a",
                "FL": "  rw [zero_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm_dev_1",
                "NL": "--  a + 0 -> a into the LHS to get a = a",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm_dev_1",
                "NL": "-- a=a, we are done with the base case",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm_dev_1",
                "NL": "-- a + succ d -> succ (a + d) on LHS giving us succ (a + d) = succ (d + a) on LHS",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm_dev_1",
                "NL": "-- succ d + a -> succ (d + a) on RHS giving us succ (a + d) = succ (d + a) on RHS",
                "FL": "  rw [succ_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm_dev_1",
                "NL": "-- using the induction hypothesis, succ (a + d) -> succ (d + a) on the LHS giving us succ (d + a) = succ (d + a)",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_comm_dev_1",
                "NL": "-- succ (n + a) = succ (n + a), we are done.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_assoc": {
        "add_assoc": [
            {
                "theorem": "add_assoc",
                "NL": "-- Proof Statement: Prove that the addition of natural numbers is associative, i.e., a + b + c = a + (b + c).",
                "FL": "theorem add_assoc (a b c : \u2115) : a + b + c = a + (b + c) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc",
                "NL": "  -- Induct on c, with d = 0 as the base case and the inductive hypothesis a + b + d = a + (b + d). There are now two proof goals, prove base case: a + b + 0 = a + (b + 0), and inductive step: a + b + succ (d) = a + (b + succ (d))",
                "FL": "  induction c with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc",
                "NL": "  -- First prove base case. Simplify LHS a + b + 0 = a + b",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc",
                "NL": "    -- Reduce RHS a + (b + 0) to a + b",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc",
                "NL": "    -- Prove LHS and RHS are equal, a + b = a + b, completing the base case.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc",
                "NL": "  -- Now prove the inductive step. Rewrite the LHS expression a + b + succ d to succ (a + b + d)",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc",
                "NL": "  -- Rewrite RHS a + (b + succ d) to a + succ (b + d)",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc",
                "NL": "  -- Use the inductive hypothesis to rewrite the left-hand side, changing succ (a + b + d) to succ (a + (b + d))",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc",
                "NL": "--  Rewrite the RHS, a + succ (b + d) to succ (a + (b + d))",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc",
                "NL": "-- Prove LHS and RHS are equal, succ (a + (b + d)) = succ (a + (b + d)), completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_assoc_dev_2": [
            {
                "theorem": "add_assoc_dev_2",
                "NL": "-- Proof Statement: Prove that the addition of natural numbers is associative, i.e., a + b + c = a + (b + c).",
                "FL": "theorem add_assoc_dev_2 (a b c : \u2115) : a + b + c = a + (b + c) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc_dev_2",
                "NL": "  -- Induct on b",
                "FL": "  induction b with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc_dev_2",
                "NL": "  -- First prove base case. we use properties of addition by 0 to rewrite 0 + c to c on the RHS",
                "FL": "  rw [zero_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc_dev_2",
                "NL": "  -- using properties of addition by 0 we can rewrite a + 0 to a on the LHS",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc_dev_2",
                "NL": "  -- both sides are equal, hence we are done with the base case",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc_dev_2",
                "NL": "  -- Now for the inductive case. we use properties of succession to rewrite (succ n + c) to succ (n + c) on the RHS",
                "FL": "  rw [succ_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc_dev_2",
                "NL": "  -- Now using properties of succession we rewrite a + succ n to succ (a + n) on the LHS",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc_dev_2",
                "NL": "  --  Again using properties of succession we rewrite succ (a + n) + c to succ (a + n + c) on the LHS",
                "FL": "  rw [succ_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc_dev_2",
                "NL": "  -- Again using properties of succession we rewrite a + succ(n + c) to succ(a + (n + c)) on the RHS",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc_dev_2",
                "NL": "  -- Using the induction hypothesis we rewrite succ(a + n + c) to succ(a + (n + c)) on the LHS",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_assoc_dev_2",
                "NL": "  -- both sides are equal, hence we are done with the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_right_comm": {
        "add_right_comm": [
            {
                "theorem": "add_right_comm",
                "NL": "-- Proof Statement: Prove that the addition of natural numbers is commutative, that is a + b + c = a + c + b",
                "FL": "theorem add_right_comm (a b c : \u2115) : a + b + c = a + c + b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_comm",
                "NL": "  -- Apply the associative property of addition to rewrite the LHS of the equation, changing a + b + c to a + (b + c)",
                "FL": "  rw [add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_comm",
                "NL": "  -- Rewrite the LHS of the equation by applying the commutative property of addition to b and c, LHS is now a + (c + b)",
                "FL": "  rw [add_comm b c]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_comm",
                "NL": "  -- Rewrite the RHS using the associative property: a + c + b to a + (c + b).",
                "FL": "  rw [add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_comm",
                "NL": "  -- Prove LHS and RHS are equal, a + (c + b) = a + (c + b), completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_right_comm_dev_2": [
            {
                "theorem": "add_right_comm_dev_2",
                "NL": "-- Proof Statement: Prove that the addition of natural numbers is commutative, that is a + b + c = a + c + b",
                "FL": "theorem add_right_comm_dev_2 (a b c : \u2115) : a + b + c = a + c + b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_comm_dev_2",
                "NL": "  -- Apply the associative property of addition to rewrite the LHS: a + b + c to a + (b + c).",
                "FL": "  rw [add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_comm_dev_2",
                "NL": "  -- Write the RHS using the associative property: a + c + b to a + (c + b).",
                "FL": "  rw [add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_comm_dev_2",
                "NL": "  -- use the commutative property of addition to rewrite c + b to b + c on the RHS, a + (b + c) = a + (b + c)",
                "FL": "  rw [add_comm c b]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_comm_dev_2",
                "NL": "  -- since both sides are equal, we are done with the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_comm_dev_2",
                "NL": "",
                "FL": "end MyNat",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "le_refl": {
        "le_refl_dev_1": [
            {
                "theorem": "le_refl_dev_1",
                "NL": "-- Proof Statement: Prove that x \u2264 x for any natural number x",
                "FL": "theorem le_refl_dev_1 (x : \u2115) : x \u2264 x := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_refl_dev_1",
                "NL": "  -- x <= x -> x + 0 = x",
                "FL": "  use 0",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_refl_dev_1",
                "NL": "  -- x + 0 = x -> 0 + x = x",
                "FL": "  rw [add_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_refl_dev_1",
                "NL": "  -- 0 + x = x -> x = x",
                "FL": "  rw [zero_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_refl_dev_1",
                "NL": "  -- LHS = RHS",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "le_refl_dev_2": [
            {
                "theorem": "le_refl_dev_2",
                "NL": "-- Proof Statement: Prove that x \u2264 x for any natural number x",
                "FL": "theorem le_refl_dev_2 (x : \u2115) : x \u2264 x := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_refl_dev_2",
                "NL": "  -- By the definition of less than, x + n = x where n is some natural number. We set n to be 0",
                "FL": "  use 0",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_refl_dev_2",
                "NL": "  -- simplify the RHS using properties of addition to x = x",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_refl_dev_2",
                "NL": "  -- The LHS = RHS, so we can conclude the proof.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "zero_le": {
        "zero_le": [
            {
                "theorem": "zero_le",
                "NL": "-- Proof Statement: Prove that 0 \u2264 x for any natural number x",
                "FL": "theorem zero_le (x : \u2115) : 0 \u2264 x := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_le",
                "NL": "  -- Assume that the natural number x is the case we are considering. We need to show that x is equal to 0 plus x.",
                "FL": "  use x",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_le",
                "NL": "  -- Rewrite the goal replacing 0 + x with x, based on the fact that adding zero to any natural number results in the same natural number.",
                "FL": "  rw [zero_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_le",
                "NL": "  -- The goal is now to prove that x equals x, which is true by reflexivity.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "zero_le_dev_1": [
            {
                "theorem": "zero_le_dev_1",
                "NL": "-- Proof Statement: Prove that 0 \u2264 x for any natural number x",
                "FL": "theorem zero_le_dev_1 (x : \u2115) : 0 \u2264 x := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_le_dev_1",
                "NL": "  -- Using the definition of \u2264 it suffices to show that x = 0 + x",
                "FL": "  use x",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_le_dev_1",
                "NL": "  -- Simplify to x = x using the property that adding zero to a number doesn't change the number.",
                "FL": "  rw [zero_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_le_dev_1",
                "NL": "  -- The LHS and RHS are equal, completing the proof.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "le_succ_self": {
        "le_succ_self_dev_1": [
            {
                "theorem": "le_succ_self_dev_1",
                "NL": "-- Proof Statement: Prove that x \u2264 succ x for any natural number x",
                "FL": "theorem le_succ_self_dev_1 (x : \u2115) : x \u2264 succ x := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_succ_self_dev_1",
                "NL": "  -- We simplify the claim to being succ x = x + 1 by using the case of 1.",
                "FL": "  use 1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_succ_self_dev_1",
                "NL": "  -- The goal is now to prove that x + 1 equals x + 1, which can be proven by applying the theorem that states that the successor of a number is equal to that number plus one to the left-hand side of the goal.",
                "FL": "  exact succ_eq_add_one x",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "le_succ_self_dev_2": [
            {
                "theorem": "le_succ_self_dev_2",
                "NL": "-- Proof Statement: Prove that x \u2264 succ x for any natural number x",
                "FL": "theorem le_succ_self_dev_2 (x : \u2115) : x \u2264 succ x := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_succ_self_dev_2",
                "NL": "  -- succ x = x + 1",
                "FL": "  use 1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_succ_self_dev_2",
                "NL": "  -- succ x = x + 1 -> x + 1 = x + 1",
                "FL": "  rw [succ_eq_add_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_succ_self_dev_2",
                "NL": "  -- done",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "le_trans": {
        "le_trans": [
            {
                "theorem": "le_trans",
                "NL": "-- Proof Statement: Prove that if x \u2264 y and y \u2264 z, then x \u2264 z for any natural numbers x, y, and z",
                "FL": "theorem le_trans (x y z : \u2115) (hxy : x \u2264 y) (hyz : y \u2264 z) : x \u2264 z := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_trans",
                "NL": "  -- Break down the assumption that x is less than or equal to y into a specific case where there exists a natural number 'a' such that y equals x plus 'a'.",
                "FL": "  cases hxy with a ha",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_trans",
                "NL": "  -- Break down the assumption that y is less than or equal to z into a specific case where there exists a natural number 'b' such that z equals y plus 'b'.",
                "FL": "  cases hyz with b hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_trans",
                "NL": "  -- Use the case of a + b to simplify the goal to equal z = x + (a + b).",
                "FL": "  use a + b",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_trans",
                "NL": "  -- Substitute z with y + b and y with x + a in the goal, resulting in the equation x + a + b = x + (a + b).",
                "FL": "  rw [hb, ha]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_trans",
                "NL": "  -- The goal is now to prove that x + a + b = x + (a + b), which can be proven by applying the theorem that states that addition is associative to the left-hand side of the goal.",
                "FL": "  exact add_assoc x a b",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "le_trans_dev_1": [
            {
                "theorem": "le_trans_dev_1",
                "NL": "-- Proof Statement: Prove that if x \u2264 y and y \u2264 z, then x \u2264 z for any natural numbers x, y, and z",
                "FL": "theorem le_trans_dev_1 (x y z : \u2115) (hxy : x \u2264 y) (hyz : y \u2264 z) : x \u2264 z := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_trans_dev_1",
                "NL": "  -- Break down the assumption that x is less than or equal to y into a specific case where there exists a natural number 'a' such that y equals x plus 'a'.",
                "FL": "  cases hxy with a ha",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_trans_dev_1",
                "NL": "  -- Break down the assumption that y is less than or equal to z into a specific case where there exists a natural number 'b' such that z equals y plus 'b'.",
                "FL": "  cases hyz with b hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_trans_dev_1",
                "NL": "  -- Use the case of a + b to simplify the goal to equal z = x + (a + b).",
                "FL": "  use a + b",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_trans_dev_1",
                "NL": "  -- Substitute z with y + b resulting in the equation y + b = x + (a + b).",
                "FL": "  rw [hb]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_trans_dev_1",
                "NL": "  -- Substitute y with x + a resulting in the equation x + a + b = x + (a + b).",
                "FL": "  rw [ha]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_trans_dev_1",
                "NL": "  -- The goal is now to prove that x + a + b = x + (a + b), which can be proven by applying the theorem that states that addition is associative to the left-hand side of the goal.",
                "FL": "  exact add_assoc x a b",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "le_zero": {
        "le_zero_dev_1": [
            {
                "theorem": "le_zero_dev_1",
                "NL": "-- Proof Statement: Prove that if x \u2264 0, then x = 0 for any natural number x",
                "FL": "theorem le_zero_dev_1 (x : \u2115) (hx : x \u2264 0) : x = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_zero_dev_1",
                "NL": "  -- Using the definition of \u2264, we have that 0 = x + y for some natural number y.",
                "FL": "  cases hx with y hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_zero_dev_1",
                "NL": "  -- By the symmetry of equality, we have x + y = 0.",
                "FL": "  symm at hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_zero_dev_1",
                "NL": "  -- Using the theorem that if a + b = 0, a = 0, we have that x = 0.",
                "FL": "  apply add_right_eq_zero at hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_zero_dev_1",
                "NL": "  -- So we know that x = 0, which is exactly what we wanted to prove.",
                "FL": "  exact hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "le_zero_dev_2": [
            {
                "theorem": "le_zero_dev_2",
                "NL": "-- Proof Statement: Prove that if x \u2264 0, then x = 0 for any natural number x",
                "FL": "theorem le_zero_dev_2 (x : \u2115) (hx : x \u2264 0) : x = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_zero_dev_2",
                "NL": "  -- 0 = x + y",
                "FL": "  cases hx with y hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_zero_dev_2",
                "NL": "  -- 0 = x + y -> x + y = 0",
                "FL": "  symm at hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_zero_dev_2",
                "NL": "  -- x + y = 0 -> x = 0",
                "FL": "  apply add_right_eq_zero at hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_zero_dev_2",
                "NL": "  -- done",
                "FL": "  exact hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "le_antisymm": {
        "le_antisymm": [
            {
                "theorem": "le_antisymm",
                "NL": "-- Proof Statement: Prove that if x is less than or equal to y and y is less than or equal to x, then x equals y.",
                "FL": "theorem le_antisymm (x y : \u2115) (hxy : x \u2264 y) (hyx : y \u2264 x) : x = y := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm",
                "NL": "  -- We consider the case where x is less than or equal to y so y = x + some natural number a.",
                "FL": "  cases hxy with a ha",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm",
                "NL": "  -- We consider the case where y is less than or equal to x so x = y + some natural number b.",
                "FL": "  cases hyx with b hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm",
                "NL": "  -- We substitute y in the goal with x + a, changing our goal to prove that x equals x + a.",
                "FL": "  rw [ha]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm",
                "NL": "  -- Using the equality y = x + a, we substitute y in the equation x = y + b with x + a.",
                "FL": "  rw [ha] at hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm",
                "NL": "  -- We re-arrange the right side of the equation x = x + a + b to x = x + (a + b) using the property that addition is associative.",
                "FL": "  rw [add_assoc] at hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm",
                "NL": "  -- We flip the equation so that it reads 'x + (a + b) = x' instead of 'x = x + (a + b)'.",
                "FL": "  symm at hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm",
                "NL": "  -- If x + (a + b) = x, then a + b = 0 by since for all natural numbers a and n, n + a = n implies a = 0.",
                "FL": "  apply add_right_eq_self at hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm",
                "NL": "  -- If a + b = 0, then a = 0 and b = 0 by since for all natural numbers a and n, n + a = 0 implies a = 0.",
                "FL": "  apply add_right_eq_zero at hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm",
                "NL": "  -- We substitute a with zero in the goal.",
                "FL": "  rw [hb]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm",
                "NL": "  -- We simplify x + 0 to x.",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm",
                "NL": "  -- The goal is now to prove that x equals x, which is true by reflexivity.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "le_antisymm_dev_2": [
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "-- Proof Statement: Prove that if x is less than or equal to y and y is less than or equal to x, then x equals y.",
                "FL": "theorem le_antisymm_dev_2 (x y : \u2115) (hxy : x \u2264 y) (hyx : y \u2264 x) : x = y := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "  -- y = x + a",
                "FL": "  cases hxy with a ha",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "  -- x = y + b",
                "FL": "  cases hyx with b hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "  -- x = y -> x = x + a",
                "FL": "  rw [ha]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "  -- x = y + b -> x = (x + a) + b",
                "FL": "  rw [ha] at hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "  -- x = (x + a) + a -> x = x + (a + b)",
                "FL": "  rw [add_assoc] at hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "  -- x = x + (a + b) -> x + (a + b) = x",
                "FL": "  symm at hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "  -- x + (a + b) = x -> a + b = 0",
                "FL": "  apply add_right_eq_self at hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "  -- a + b = 0 -> a = 0",
                "FL": "  apply add_right_eq_zero at hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "  -- x = x + a -> x = x + 0",
                "FL": "  rw [hb]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "  -- x = x + 0 -> x = x",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_antisymm_dev_2",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "orr_symm": {
        "orr_symm": [
            {
                "theorem": "orr_symm",
                "NL": "-- Proof Statement: Prove that if x equals 37 or y equals 42, then y equals 42 or x equals 37.",
                "FL": "theorem orr_symm (x y : \u2115) (h : x = 37 \u2228 y = 42) : y = 42 \u2228 x = 37 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "orr_symm",
                "NL": "  --We consider the two possible cases given that either x equals 37 or y equals 42. For both cases, we aim to show that y equals 42 or x equals 37.",
                "FL": "  cases h with hx hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "orr_symm",
                "NL": "  -- We choose to prove the right side of the disjunction, which is x = 37.",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "orr_symm",
                "NL": "  -- We are given that x equals 37, so we can use this to prove the goal.",
                "FL": "  exact hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "orr_symm",
                "NL": "  -- We choose to prove the left side of the disjunction, which is y = 42.",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "orr_symm",
                "NL": "  -- We are given that y equals 42, so we can use this to prove the goal.",
                "FL": "  exact hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "orr_symm_dev_2": [
            {
                "theorem": "orr_symm_dev_2",
                "NL": "-- Proof Statement: Prove that if x equals 37 or y equals 42, then y equals 42 or x equals 37.",
                "FL": "theorem orr_symm_dev_2 (x y : \u2115) (h : x = 37 \u2228 y = 42) : y = 42 \u2228 x = 37 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "orr_symm_dev_2",
                "NL": "  -- x = 37 \u2228 y = 42 -> x = 37 (case 1) or y = 42 (case 2)",
                "FL": "  cases h with hx hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "orr_symm_dev_2",
                "NL": "  -- case 1: y = 42 \u2228 x = 37 \u2192 x = 37",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "orr_symm_dev_2",
                "NL": "  -- done",
                "FL": "  exact hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "orr_symm_dev_2",
                "NL": "  -- case 2: y = 42 \u2228 x = 37 \u2192 y = 42",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "orr_symm_dev_2",
                "NL": "  -- done",
                "FL": "  exact hy",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "le_total": {
        "le_total": [
            {
                "theorem": "le_total",
                "NL": "-- Proof Statement: Prove that for any natural numbers x and y, either x is less than or equal to y or y is less than or equal to x.",
                "FL": "theorem le_total (x y : \u2115) : x \u2264 y \u2228 y \u2264 x := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- Induct on y, with d = 0 as the base case and the inductive hypothesis x = d. There are now two proof goals, prove base case: x <= 0 or 0 <= x and inductive step: x <= d + 1 or d + 1 <= x.",
                "FL": "  induction y with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We choose to prove the right side of the disjunction, which is 0 \u2264 x.",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We assert that 0 is less than or equal to any natural number x, which completes the proof for this case.",
                "FL": "  exact zero_le x",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We consider the two cases: either 'x' is less than or equal to 'd', or 'd' is less than or equal to 'x'. For both cases, we aim to show that x is less than or equal to d + 1 or d + 1 is less than or equal to x.",
                "FL": "  cases hd with h1 h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We choose to prove the left side of the disjunction, which is x \u2264 d + 1.",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We consider the case that x is less than or equal to d. We know this is true because there exists a natural number e such that d equals x plus e.",
                "FL": "  cases h1 with e h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We substitute d with x + e in the goal, resulting in the equation x = x + e + 1.",
                "FL": "  rw [h1]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- Use the case of e + 1 to simplify the goal to succ (x + e) = x + (e + 1).",
                "FL": "  use e + 1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We first rewrite the left-hand side expression 'succ (x + e)' to 'x + e + 1' using the theorem that states the successor of a number is equal to the number plus one. Then, we use the theorem that addition is associative to rearrange 'x + e + 1' to 'x + (e + 1)'.",
                "FL": "  rw [succ_eq_add_one, add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- The goal is now to prove that x + (e + 1) = x + (e + 1), which is true by reflexivity.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We consider the case where d is less than or equal to x. We then break down this case into two subcases: one where x is equal to d plus some natural number e, and the other where x is greater than d by some natural number e.",
                "FL": "  cases h2 with e he",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We consider the cases that e is zero or the successor of a natural number a.",
                "FL": "  cases e with a",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We substitute x with d + 0 in the goal, resulting in the the goal d + 0 \u2264 succ d \u2228 succ d \u2264 d + 0.",
                "FL": "  rw [he]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We choose to prove the left side of the disjunction, which is d + 0 \u2264 succ d.",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We rewrite the left-hand side of the goal to d because d + 0 = d.",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We use the case of 1 to simplify the goal to succ d = d + 1.",
                "FL": "  use 1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- The goal is to prove that succ d equals d + 1. We directly apply the fact that the successor of a natural number d is equal to d + 1, which completes the proof for this goal.",
                "FL": "  exact succ_eq_add_one d",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We choose to prove the right side of the disjunction, which is succ d <= x.",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We use the case of a to rewrite the goal to succ x = succ d + a.",
                "FL": "  use a",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- The goal is to prove that succ d equals d + 1. We directly apply the fact that the successor of a natural number d is equal to d + 1.",
                "FL": "  rw [add_succ] at he",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- Rewrite the right hand side of the goal using the theorem that adding a successor to a natural number is the same as adding the natural number and then taking the successor. This leaves the goal unchanged in this case.",
                "FL": "  rw [succ_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total",
                "NL": "  -- We have shows that x = succ d + a, so we can use this to prove the goal.",
                "FL": "  exact he",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "le_total_dev_2": [
            {
                "theorem": "le_total_dev_2",
                "NL": "-- Proof Statement: Prove that for any natural numbers x and y, either x is less than or equal to y or y is less than or equal to x.",
                "FL": "theorem le_total_dev_2 (x y : \u2115) : x \u2264 y \u2228 y \u2264 x := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- induction on y",
                "FL": "  induction y with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- show the right side of the disjunction",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- 0 \u2264 x, so this case is done",
                "FL": "  exact zero_le x",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- x \u2264 d \u2228 d \u2264 x -> x \u2264 d (case 1) or d \u2264 x (case 2)",
                "FL": "  cases hd with h1 h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- x \u2264 succ d \u2228 succ d \u2264 x -> x \u2264 succ d",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- x \u2264 d -> d = x + e for some natural number e",
                "FL": "  cases h1 with e h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- x \u2264 succ d -> x \u2264 succ (x + e)",
                "FL": "  rw [h1]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- x \u2264 succ (x + e) -> succ (x + e) = x + (e + 1)",
                "FL": "  use e + 1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- succ (x + e) = x + (e + 1) -> (x + e) + 1 = x + (e + 1) -> x + (e + 1) = x + (e + 1)",
                "FL": "  rw [succ_eq_add_one, add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- d \u2264 x -> x = d + e for some natural number e",
                "FL": "  cases h2 with e he",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- e = 0 or e = succ a for some natural number a",
                "FL": "  cases e with a",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- x \u2264 succ d \u2228 succ d \u2264 x -> d + 0 \u2264 succ d \u2228 succ d \u2264 d + 0",
                "FL": "  rw [he]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- d + 0 \u2264 succ d \u2228 succ d \u2264 d + 0 -> d + 0 \u2264 succ d",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- d + 0 \u2264 succ d -> d \u2264 succ d",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- d \u2264 succ d -> succ d = d + 1",
                "FL": "  use 1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- succ d = d + 1 by a theorem",
                "FL": "  exact succ_eq_add_one d",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- x \u2264 succ d \u2228 succ d \u2264 x \u2192 succ d \u2264 x",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- succ d \u2264 x -> x = succ d + a",
                "FL": "  use a",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- x = d + succ a -> x = succ (d + a)",
                "FL": "  rw [add_succ] at he",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- x = succ d + a -> x = succ (d + a)",
                "FL": "  rw [succ_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_total_dev_2",
                "NL": "  -- x = succ (d + a) by a fact we know right now",
                "FL": "  exact he",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "succ_le_succ": {
        "succ_le_succ": [
            {
                "theorem": "succ_le_succ",
                "NL": "-- Proof Statement: Prove that if the successor of x is less than or equal to the successor of y, then x is less than or equal to y.",
                "FL": "theorem succ_le_succ (x y : \u2115) (hx : succ x \u2264 succ y) : x \u2264 y := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_le_succ",
                "NL": "  -- We consider the case where the successor of x is less than or equal to the successor of y. This implies that the successor of y is equal to the successor of x plus some natural number d.",
                "FL": "  cases hx with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_le_succ",
                "NL": "  -- We assume d as the difference such that when added to x results in y. The goal now is to prove that y is equal to x plus d.",
                "FL": "  use d",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_le_succ",
                "NL": "  -- We rewrite the right-hand side of succ y = succ x + d using the theorem that states the the successor of a sum of two natural numbers is the same as the successor of the first number added to the second number.",
                "FL": "  rw [succ_add] at hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_le_succ",
                "NL": "  -- We apply the property that if two natural numbers with successors are equal, then the original numbers are also equal.",
                "FL": "  apply succ_inj at hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_le_succ",
                "NL": "  -- We have shown that x = y + d, so we can use this to prove the goal.",
                "FL": "  exact hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "succ_le_succ_dev_2": [
            {
                "theorem": "succ_le_succ_dev_2",
                "NL": "-- Proof Statement: Prove that if the successor of x is less than or equal to the successor of y, then x is less than or equal to y.",
                "FL": "theorem succ_le_succ_dev_2 (x y : \u2115) (hx : succ x \u2264 succ y) : x \u2264 y := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_le_succ_dev_2",
                "NL": "  -- succ x \u2264 succ y -> succ y = succ x + d for some natural number d",
                "FL": "  cases hx with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_le_succ_dev_2",
                "NL": "  -- x \u2264 y -> y = x + d",
                "FL": "  use d",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_le_succ_dev_2",
                "NL": "  -- succ y = succ x + d -> succ y = succ (x + d)",
                "FL": "  rw [succ_add] at hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_le_succ_dev_2",
                "NL": "  -- succ y = succ (x + d) -> y = x + d",
                "FL": "  apply succ_inj at hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_le_succ_dev_2",
                "NL": "  -- thus, y = x + d, so we are done",
                "FL": "  exact hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "le_one": {
        "le_one": [
            {
                "theorem": "le_one",
                "NL": "-- Proof Statement: Prove that if x is less than or equal to 1, then x is equal to 0 or 1.",
                "FL": "theorem le_one (x : \u2115) (hx : x \u2264 1) : x = 0 \u2228 x = 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one",
                "NL": "  -- We consider the case where x is a natural number. We then break down this case into two subcases: one where x is equal to 0, and the other where x is equal to the successor of another natural number y.",
                "FL": "  cases x with y",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one",
                "NL": "  -- We choose to prove the left side of the disjunction, which is 0 = 0.",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one",
                "NL": "  -- We are given that 0 equals 0, so we can use reflexivity to prove the goal.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one",
                "NL": "  -- Replace 1 with the successor of 0. This means we are given that the succ y <= succ 0, and the updated goal is that the succ y = 0 or the succ y = succ 0.",
                "FL": "  rw [one_eq_succ_zero] at hx \u22a2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one",
                "NL": "  -- We use the property that if one natural number is less than or equal to another, then their successors also maintain this relationship. This means that y <= 0.",
                "FL": "  apply succ_le_succ at hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one",
                "NL": "  -- We apply the property that if x is less than or equal to 0, then x must be equal to 0 so y = 0.",
                "FL": "  apply le_zero at hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one",
                "NL": "  -- We substitute y with 0 in the goal, resulting in the goal succ 0 = 0 \u2228 succ 0 = succ 0.",
                "FL": "  rw [hx]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one",
                "NL": "  -- We choose to prove the right side of the disjunction, which is succ 0 = succ 0.",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one",
                "NL": "  -- We are given that succ 0 equals succ 0, so we can use reflexivity to prove the goal.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "le_one_dev_2": [
            {
                "theorem": "le_one_dev_2",
                "NL": "-- Proof Statement: Prove that if x is less than or equal to 1, then x is equal to 0 or 1.",
                "FL": "theorem le_one_dev_2 (x : \u2115) (hx : x \u2264 1) : x = 0 \u2228 x = 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one_dev_2",
                "NL": "  -- x = 0 (case 1) or x = succ y (case 2) for some natural number y",
                "FL": "  cases x with y",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one_dev_2",
                "NL": "  -- 0 = 0 \u2228 0 = 1 -> 0 = 0",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one_dev_2",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one_dev_2",
                "NL": "  -- succ y \u2264 1 -> succ y \u2264 succ 0; succ y = 0 \u2228 succ y = 1 -> succ y = 0 \u2228 succ y = succ 0",
                "FL": "  rw [one_eq_succ_zero] at hx \u22a2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one_dev_2",
                "NL": "  -- succ y \u2264 succ 0 -> y \u2264 0",
                "FL": "  apply succ_le_succ at hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one_dev_2",
                "NL": "  -- y \u2264 0 -> y = 0",
                "FL": "  apply le_zero at hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one_dev_2",
                "NL": "  -- succ y = 0 \u2228 succ y = succ 0 -> succ 0 = 0 \u2228 succ 0 = succ 0",
                "FL": "  rw [hx]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one_dev_2",
                "NL": "  -- succ 0 = 0 \u2228 succ 0 = succ 0 -> succ 0 = succ 0",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_one_dev_2",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "le_two": {
        "le_two_dev_1": [
            {
                "theorem": "le_two_dev_1",
                "NL": "-- Proof Statement: Prove that if x is less than or equal to 2, then x is equal to 0, 1, or 2.",
                "FL": "theorem le_two_dev_1 (x : \u2115) (hx : x \u2264 2) : x = 0 \u2228 x = 1 \u2228 x = 2 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- Either x = 0 or x = succ y for some natural number y.",
                "FL": "  cases x with y",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- In the former case, we need to show 0 = 0 \u2228 0 = 1 \u2228 0 = 2, and we choose to show 0 = 0.",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- This is clear by reflexivity.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- In the latter case, either y = 0 or y = succ z for some natural number z.",
                "FL": "  cases y with z",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- In the former case, we must show succ 0 = 0 \u2228 succ 0 = 1 \u2228 succ 0 = 2, and we choose to prove succ 0 = 1 \u2228 succ 0 = 2",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- To prove succ 0 = 1 \u2228 succ 0 = 2, we choose to prove succ 0 = 1",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- Rewriting using a theorem, need to show show succ 0 = succ 0.",
                "FL": "  rw [one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- This is clear by reflexivity.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- In the latter case, we substitute 2 = succ 1 and 1 = succ 0 into what we know and what we have to show.",
                "FL": "  rw [two_eq_succ_one, one_eq_succ_zero] at hx \u22a2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- We know that succ (succ z) \u2264 succ (succ 0), so usinig a theorem we know succ z \u2264 succ 0.",
                "FL": "  apply succ_le_succ at hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- We know that succ z \u2264 succ 0, so using a theorem we know that z \u2264 0.",
                "FL": "  apply succ_le_succ at hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- Since z \u2264 0, using a theorem, z = 0.",
                "FL": "  apply le_zero at hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- We subsitute z = 0 into what we want to show.",
                "FL": "  rw [hx]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- So, we need to show that succ (succ 0) = 0 \u2228 succ (succ 0) = succ 0 \u2228 succ (succ 0) = succ (succ 0), so we choose to show that succ (succ 0) = succ 0 \u2228 succ (succ 0) = succ (succ 0)",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- We need to show that succ (succ 0) = succ 0 \u2228 succ (succ 0) = succ (succ 0), so we choose to show that succ (succ 0) = succ (succ 0)",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_1",
                "NL": "  -- But LHS = RHS, so this follows by reflexivity.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "le_two_dev_2": [
            {
                "theorem": "le_two_dev_2",
                "NL": "-- Proof Statement: Prove that if x is less than or equal to 2, then x is equal to 0, 1, or 2.",
                "FL": "theorem le_two_dev_2 (x : \u2115) (hx : x \u2264 2) : x = 0 \u2228 x = 1 \u2228 x = 2 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- x = 0 (case 1) or x = succ y (case 2) for some natural number y",
                "FL": "  cases x with y",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- 0 = 0 \u2228 0 = 1 \u2228 0 = 2 -> 0 = 0",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- y = 0 (case 1) or y = succ z (case 2) for some natural number z",
                "FL": "  cases y with z",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- succ 0 = 0 \u2228 succ 0 = 1 \u2228 succ 0 = 2 -> succ 0 = 1 \u2228 succ 0 = 2",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- succ 0 = 1 \u2228 succ 0 = 2 -> succ 0 = 1",
                "FL": "  left",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- succ 0 = 1 -> succ 0 = succ 0",
                "FL": "  rw [one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- succ (succ z) \u2264 2 -> succ (succ z) \u2264 succ 1 -> succ (succ z) \u2264 succ (succ 0); ... = 0 \u2228 ... = 1 \u2228 ... = 2 -> ... = 0 \u2228 ... = 1 \u2228 ... = succ 1 -> ... = 0 \u2228 ... = succ 0 \u2228 ... = succ (succ 0)",
                "FL": "  rw [two_eq_succ_one, one_eq_succ_zero] at hx \u22a2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- succ (succ z) \u2264 succ (succ 0) -> succ z \u2264 succ 0",
                "FL": "  apply succ_le_succ at hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- succ z \u2264 succ 0 -> z \u2264 0",
                "FL": "  apply succ_le_succ at hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- z \u2264 0 -> z = 0",
                "FL": "  apply le_zero at hx",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- succ (succ z) = 0 \u2228 succ (succ z) = succ 0 \u2228 succ (succ z) = succ (succ 0) -> succ (succ 0) = 0 \u2228 succ (succ 0) = succ 0 \u2228 succ (succ 0) = succ (succ 0)",
                "FL": "  rw [hx]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- succ (succ 0) = 0 \u2228 succ (succ 0) = succ 0 \u2228 succ (succ 0) = succ (succ 0) -> succ (succ 0) = succ 0 \u2228 succ (succ 0) = succ (succ 0)",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- succ (succ 0) = succ 0 \u2228 succ (succ 0) = succ (succ 0) -> succ (succ 0) = succ (succ 0)",
                "FL": "  right",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_two_dev_2",
                "NL": "",
                "FL": "end MyNat",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_right_cancel": {
        "add_right_cancel_dev_1": [
            {
                "theorem": "add_right_cancel_dev_1",
                "NL": "-- Proof Statement: Prove that a + n = b + n implies a = b for all natural numbers",
                "FL": "theorem add_right_cancel_dev_1 (a b n : \u2115) : a + n = b + n \u2192 a = b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_1",
                "NL": "  -- induct on n",
                "FL": "  induction n with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_1",
                "NL": "  -- assume a + 0 = b + 0",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_1",
                "NL": "  -- a = b at hypothesis",
                "FL": "  repeat rw [add_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_1",
                "NL": "  -- a = b, as desired",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_1",
                "NL": "  -- assume a + succ d = b + succ d",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_1",
                "NL": "  -- succ(a + d) = b + succ d at hypothesis",
                "FL": "  rw [add_succ] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_1",
                "NL": "  -- succ(a + d) = succ(b + d) at hypothesis",
                "FL": "  rw [add_succ] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_1",
                "NL": "  -- a + d = b + d at hypothesis",
                "FL": "  apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_1",
                "NL": "  -- a = b by inductive hypothesis",
                "FL": "  apply hd at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_1",
                "NL": "  -- a = b from the inductive hypothesis",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_right_cancel_dev_2": [
            {
                "theorem": "add_right_cancel_dev_2",
                "NL": "  -- Proof Statement: Prove that a + n = b + n implies a = b for all natural numbers",
                "FL": "theorem add_right_cancel_dev_2 (a b n : \u2115) : a + n = b + n \u2192 a = b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_2",
                "NL": "  -- We start with induction on n.",
                "FL": "  induction n with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_2",
                "NL": "  -- For the base case, to show that a + 0 = b + 0 \u2192 a = b, we first assume a + 0 = b + 0.",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_2",
                "NL": "  -- we simplify the LHS in the hypothesis using the theorem that n + 0 = 0",
                "FL": "  rw [add_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_2",
                "NL": "  -- we simplify the RHS in the hypothesis using the theorem that n + 0 = 0",
                "FL": "  rw [add_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_2",
                "NL": "  -- So a = b, which concludes the base case.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_2",
                "NL": "  -- For the inductive step, we must show that a + succ d = b + succ d \u2192 a = b, so we start by assuming a + succ d = b + succ d.",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_2",
                "NL": "  -- We use the theorem that n + succ m = succ (n + m) to change a + succ d = b + succ d into succ (a + d) = succ (b + d).",
                "FL": "  repeat rw [add_succ] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_2",
                "NL": "  -- So, succ (a + d) = succ (b + d), but because succ is injective, we have that a + d = b + d.",
                "FL": "  apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_2",
                "NL": "  -- The inductive hypothesis states that a + d = b + d \u2192 a = b and we know a + d = b + d, so by modus ponens, a = b.",
                "FL": "  apply hd at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_cancel_dev_2",
                "NL": "  -- So a = b, which concludes the inductive step.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_left_cancel": {
        "add_left_cancel": [
            {
                "theorem": "add_left_cancel",
                "NL": "-- Proof Statement: Prove that a + n = b + n implies a = b for all natural numbers",
                "FL": "theorem add_left_cancel (a b n : \u2115) : n + a = n + b \u2192 a = b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel",
                "NL": "  -- Rewrite the goal by repeatedly swapping the addition operands in the left side of both equations, changing n + a = n + b to a + n = b + n.",
                "FL": "  repeat rw [add_comm n]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel",
                "NL": "  -- Assume that the statement 'a + n = b + n' is true and denote it as 'h'. Then, our new goal is to prove that 'a = b'.",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel",
                "NL": "  -- Simplify the hypothesis 'h' using the theorem 'add_right_cancel' assuming the theorem is true, which leaves the goal state unchanged as 'a = b'",
                "FL": "  apply add_right_cancel at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel",
                "NL": "  -- h proves the goal a = b so we can use it to finish the proof",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_left_cancel_dev_1": [
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "-- Proof Statement: Prove that a + n = b + n implies a = b for all natural numbers",
                "FL": "theorem add_left_cancel_dev_1 (a b n : \u2115) : n + a = n + b \u2192 a = b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  -- a + n = n + b implies a = b",
                "FL": "  rw [add_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  -- initiate induction on n",
                "FL": "  induction n with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  -- assume a + 0 = 0 + b",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  -- a + 0 = b in the hypothesis",
                "FL": "  rw [zero_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  -- a = b in the hypthesis",
                "FL": "  rw [add_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  -- a = b as desired",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  -- assume a + succ d = succ d + b",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  --  a + succ d = succ (d + b) in the hypothesis",
                "FL": "  rw [succ_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  -- succ (a + d) = succ (d + b) in the hypothesis",
                "FL": "  rw [add_succ] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  -- a + d = d + b in the hypothesis",
                "FL": "  apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  -- a = b by using the inductive hypotheis",
                "FL": "  apply hd at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_cancel_dev_1",
                "NL": "  -- a = b as desired",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_left_eq_self": {
        "add_left_eq_self_dev_1": [
            {
                "theorem": "add_left_eq_self_dev_1",
                "NL": "-- Proof Statement: Prove that x + y = y implies x = 0 for all natural numbers",
                "FL": "theorem add_left_eq_self_dev_1 (x y : \u2115) : x + y = y \u2192 x = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_1",
                "NL": "  -- intitiate induction on y",
                "FL": "  induction y with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_1",
                "NL": "  -- assume x + 0 = 0",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_1",
                "NL": "  -- x = 0 in our assumption",
                "FL": "  rw [add_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_1",
                "NL": "  -- we have x = 0 as desired",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_1",
                "NL": "  -- assume x + succ d = succ d",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_1",
                "NL": "  -- succ (x + d) = succ d in our assumption",
                "FL": "  rw [add_succ] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_1",
                "NL": "  -- x + d = d by injectivity in our assumption",
                "FL": "  apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_1",
                "NL": "  -- x = 0 by induction hypothesis",
                "FL": "  apply hd at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_1",
                "NL": "  -- we have x = 0 as desired",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_left_eq_self_dev_2": [
            {
                "theorem": "add_left_eq_self_dev_2",
                "NL": "-- Proof Statement: Prove that x + y = y implies x = 0 for all natural numbers",
                "FL": "theorem add_left_eq_self_dev_2 (x y : \u2115) : x + y = y \u2192 x = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_2",
                "NL": "  -- To show x + y = y \u2192 x = 0, we begin by assuming x + y = y.",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_2",
                "NL": "  -- We use the fact that 0 + n = n to change x + y = y into x + y = 0 + y.",
                "FL": "  nth_rewrite 2 [\u2190 zero_add y] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_2",
                "NL": "  -- We use the theorem that a + n = b + n implies a = b on the fact x + y = 0 + y.",
                "FL": "  apply add_right_cancel at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_self_dev_2",
                "NL": "  -- So, x = 0, as desired.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_right_eq_self": {
        "add_right_eq_self_dev_1": [
            {
                "theorem": "add_right_eq_self_dev_1",
                "NL": "-- Proof Statement: Prove that x + y = x implies y = 0 for all natural numbers",
                "FL": "theorem add_right_eq_self_dev_1 (x y : \u2115) : x + y = x \u2192 y = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_1",
                "NL": "  -- initiate induction on x",
                "FL": "  induction x with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_1",
                "NL": "  -- assume 0 + y = 0",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_1",
                "NL": "  -- y = 0 from our assumptiom",
                "FL": "  rw [zero_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_1",
                "NL": "  -- y = 0 as desired",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_1",
                "NL": "  -- assume y + succ d = succ d",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_1",
                "NL": "  -- succ (y + d) = succ d from our assumption",
                "FL": "  rw [succ_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_1",
                "NL": "  -- y + d = d from our assumption",
                "FL": "  apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_1",
                "NL": "  -- y = 0 using the induction hypothesis",
                "FL": "  apply hd at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_1",
                "NL": "  -- y = 0 as desired",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_right_eq_self_dev_2": [
            {
                "theorem": "add_right_eq_self_dev_2",
                "NL": "-- Proof Statement: Prove that x + y = x implies y = 0 for all natural numbers",
                "FL": "theorem add_right_eq_self_dev_2 (x y : \u2115) : x + y = x \u2192 y = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_2",
                "NL": "  -- To show x + y = x \u2192 y = 0, we start by assuming x + y = x.",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_2",
                "NL": "  -- By the commutativity of addition, we know that y + x = x.",
                "FL": "  rw [add_comm] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_2",
                "NL": "  -- We apply the theorem that a + b = b implies that a = 0.",
                "FL": "  apply add_left_eq_self at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_self_dev_2",
                "NL": "  -- So, y = 0, as desired.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_right_eq_zero": {
        "add_right_eq_zero": [
            {
                "theorem": "add_right_eq_zero",
                "NL": "-- Proof Statement: Prove that a + b = 0 implies a = 0 for all natural numbers",
                "FL": "theorem add_right_eq_zero (a b : \u2115) : a + b = 0 \u2192 a = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero",
                "NL": "  -- Split the natural number 'b' into two cases: 'b' is zero, and 'b' is the successor of another natural number 'd'.",
                "FL": "  cases b with d",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero",
                "NL": "  -- Assume that the hypothesis 'h' is true, that is, a + 0 = 0. The goal now is to prove that a = 0.",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero",
                "NL": "  -- Repeatedly apply the theorem that adding zero to any number does not change its value to the hypothesis h.",
                "FL": "  rw [add_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero",
                "NL": "  -- We use the hypothesis 'h' which is a proof that 'a = 0' to close the current goal. The new goal is now to prove that 'a + succ d = 0' implies 'a = 0'.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero",
                "NL": "  -- Assume that the hypothesis 'h' is true, that is, a + succ d = 0. The goal now is to prove that a = 0.",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero",
                "NL": "  -- For any natural numbers x and y, x + succ y = succ (x + y). Applying this repeatedly simplifies the hypothesis but leaves the goal state a = 0 unchanged.",
                "FL": "  rw [add_succ] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero",
                "NL": "  -- Swap the left-hand side and the right-hand side of the equality in the hypothesis.",
                "FL": "  symm at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero",
                "NL": "  -- Apply the theorem that states that the successor of any natural number cannot equal 0 to our hypothesis h which shows that h is false.",
                "FL": "  apply zero_ne_succ at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero",
                "NL": "  -- Since h is a proof of False, and there are no ways to construct False so we have our contradiction and can close the proof",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_right_eq_zero_dev_1": [
            {
                "theorem": "add_right_eq_zero_dev_1",
                "NL": "-- Proof Statement: Prove that a + b = 0 implies a = 0 for all natural numbers",
                "FL": "theorem add_right_eq_zero_dev_1 (a b : \u2115) : a + b = 0 \u2192 a = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero_dev_1",
                "NL": "  -- Proof by induction on b",
                "FL": "  induction a with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero_dev_1",
                "NL": "  -- 0 = 0 is trivially true",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero_dev_1",
                "NL": "  -- assume that succ d + b = 0",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero_dev_1",
                "NL": "  -- succ (d + b) = 0",
                "FL": "  rw [succ_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero_dev_1",
                "NL": "  -- 0 = succ (a + d)",
                "FL": "  symm at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero_dev_1",
                "NL": "  -- 0 = succ (a + d) is impossible as its false",
                "FL": "  apply zero_ne_succ at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_right_eq_zero_dev_1",
                "NL": "  -- This is vacuously true",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_left_eq_zero": {
        "add_left_eq_zero": [
            {
                "theorem": "add_left_eq_zero",
                "NL": "-- Proof Statement: Prove that a + b = 0 implies b = 0 for all natural numbers",
                "FL": "theorem add_left_eq_zero (a b : \u2115) : a + b = 0 \u2192 b = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero",
                "NL": "  -- Rewrite the goal by swapping the addition operands in the left side of both equations, changing a + b = 0 to b + a = 0.",
                "FL": "  rw [add_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero",
                "NL": "  -- Apply the theorem that states that if a + b = 0, then b = 0 for all natural numbers.",
                "FL": "  exact add_right_eq_zero b a",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_left_eq_zero_dev_2": [
            {
                "theorem": "add_left_eq_zero_dev_2",
                "NL": "-- Proof Statement: Prove that a + b = 0 implies b = 0 for all natural numbers",
                "FL": "theorem add_left_eq_zero_dev_2 (a b : \u2115) : a + b = 0 \u2192 b = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero_dev_2",
                "NL": "  -- initiate induction on a",
                "FL": "  induction a with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero_dev_2",
                "NL": "  -- assume that 0 + b = 0",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero_dev_2",
                "NL": "  -- use the fact that 0 + n = n to obtain b = 0",
                "FL": "  rw [zero_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero_dev_2",
                "NL": "  -- we have b = 0 as desired",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero_dev_2",
                "NL": "  -- assume that succ n + b = 0",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero_dev_2",
                "NL": "  -- we use that fact that succ a + b = succ (a + b) hence obtaining succ (n + b) = 0",
                "FL": "  rw [succ_add] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero_dev_2",
                "NL": "  -- apply the fact that a = b implies b = a to obtain  0 = succ (n + b)",
                "FL": "  symm at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero_dev_2",
                "NL": "  -- Apply the theorem that states that the successor of any natural number cannot equal 0 to our hypothesis h which shows that h is false.",
                "FL": "  apply zero_ne_succ at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero_dev_2",
                "NL": "  -- -- Since h is a proof of False, and there are no ways to construct False so we have our contradiction and can close the proof",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_eq_zero_dev_2",
                "NL": "",
                "FL": "end MyNat",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "zero_pow_zero": {
        "zero_pow_zero": [
            {
                "theorem": "zero_pow_zero",
                "NL": "-- Proof Statement: Prove that 0 to the power of 0 is 1",
                "FL": "theorem zero_pow_zero : (0 : \u2115) ^ 0 = 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_zero",
                "NL": "  -- Rewrite the left-hand side of the equation using the theorem that any number to the power of 0 is 1",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_zero",
                "NL": "  -- The goal is now to prove that 1 = 1, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "zero_pow_zero_dev_1": [
            {
                "theorem": "zero_pow_zero_dev_1",
                "NL": "",
                "FL": "theorem zero_pow_zero_dev_1 : (0 : \u2115) ^ 0 = 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_zero_dev_1",
                "NL": "  -- 1 = 1",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_zero_dev_1",
                "NL": "  -- lhs = rhs, so we are done.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "zero_pow_succ": {
        "zero_pow_succ": [
            {
                "theorem": "zero_pow_succ",
                "NL": "-- Proof Statement: Prove that 0^(succ m) = 0",
                "FL": "theorem zero_pow_succ (m : \u2115) : (0 : \u2115) ^ (succ m) = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_succ",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number raised to the power of the successor of another natural number is equal to that number raised to the power of the other number, multiplied by the original number.",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_succ",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number multiplied by 0 is 0",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_succ",
                "NL": "  -- The goal is now to prove that 0 = 0, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "zero_pow_succ_dev_2": [
            {
                "theorem": "zero_pow_succ_dev_2",
                "NL": "-- Proof Statement: Prove that 0^(succ m) = 0",
                "FL": "theorem zero_pow_succ_dev_2 (m : \u2115) : (0 : \u2115) ^ (succ m) = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_succ_dev_2",
                "NL": "  -- We can use induction on m. For the base case, we want to show that 0^succ(0) = 0.",
                "FL": "  induction m with h hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_succ_dev_2",
                "NL": "  -- Using the fact that 0 to the power of the successor of 1 is equal to 0 ^ 0 + 0.",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_succ_dev_2",
                "NL": "  -- We know that anything multiplied by 0 is equal to 0, so our goal becomes: 0 = 0",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_succ_dev_2",
                "NL": "  -- We can conclude the proof by reflexivity, as the LHS and RHS of our goal are identical.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_succ_dev_2",
                "NL": "  -- Next, we consider the inductive case, where we want to show that 0^succ(succ m) = 0. By the successor definition of the power function, we can write our goal as: 0^succ(m) * 0 = 0.",
                "FL": "  rw[pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_succ_dev_2",
                "NL": "  -- We see that we can apply our inductive hypothesis, that 0^succ(m) = 0, and our goal becomes: 0*0 = 0",
                "FL": "  rw[hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_succ_dev_2",
                "NL": "  -- Anything multiplied by zero is zero, so we simplify to: 0 = 0",
                "FL": "  rw[mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_pow_succ_dev_2",
                "NL": "  -- The lhs and rhs are identical, so we are done by reflexivity.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "pow_one": {
        "pow_one": [
            {
                "theorem": "pow_one",
                "NL": "-- Proof Statement: Prove that a^1 = a",
                "FL": "theorem pow_one (a : \u2115) : a ^ 1 = a  := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one",
                "NL": "  -- Rewrite the left hand side using the identity that 1 is equal to the successor of 0",
                "FL": "  rw [one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number raised to the power of the successor of another natural number is equal to that number raised to the power of the other number, multiplied by the original number.",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number to the power of 0 is 1",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number multiplied by 1 is equal to that natural number",
                "FL": "  rw [one_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one",
                "NL": "  -- The goal is now to prove that a = a, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "pow_one_dev_2": [
            {
                "theorem": "pow_one_dev_2",
                "NL": "-- Proof Statement: Prove that a^1 = a",
                "FL": "theorem pow_one_dev_2 (a : \u2115) : a ^ 1 = a  := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one_dev_2",
                "NL": "  -- Using the fact that we defined 1 to be the successor of zero, we can write this as: a^succ(0) = a.",
                "FL": "  rw[one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one_dev_2",
                "NL": "  -- We defined the power function with the axiom such that for any natural numbers a,b, a^succ(b) = a^b * a. Using this, we can write our goal as: a^0 * a = a",
                "FL": "  rw[pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one_dev_2",
                "NL": "  -- Since anything to the power of zero is also zero, we can simplify our goal to: 1 * a = a",
                "FL": "  rw[pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one_dev_2",
                "NL": "  -- Once again, we can use the fact that 1 is the successor 0, to write: succ(0) * a = a",
                "FL": "  rw[one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one_dev_2",
                "NL": "  -- Using the axioms with which we defined multiplication, namely the fact that for any natural numbers a,b, succ(b) * a = b* a + a, we can simplify to: 0 * a + a = a.",
                "FL": "  rw[succ_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one_dev_2",
                "NL": "  -- Since anything multiplied by zero is also zero, we simplify our goal to: 0 + a = a.",
                "FL": "  rw[zero_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one_dev_2",
                "NL": "  -- Since adding zero to any natural number does not change its, we can simplify our goal to: a=a.",
                "FL": "  rw[zero_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_one_dev_2",
                "NL": "  -- Since the LHS and RHS are prcisely the same expression, we are done by reflexivity.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "one_pow": {
        "one_pow": [
            {
                "theorem": "one_pow",
                "NL": "-- Proof Statement: Prove that 1^m = 1",
                "FL": "theorem one_pow (m : \u2115) : (1 : \u2115) ^ m = 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow",
                "NL": "  -- Induct on m, with d = 0 as the base case and the inductive hypothesis 1^d = 1. There are now two proof goals, prove base case: 1^0 = 1 and inductive step: 1^d = 1 implies 1^(succ d) = 1.",
                "FL": "  induction m with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number to the power of 0 is 1",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow",
                "NL": "  -- The goal is now to prove that 1 = 1, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number raised to the power of the successor of another natural number is equal to that number raised to the power of the other number, multiplied by the original number.",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow",
                "NL": "  -- Rewrite the left hand side using the induction hypothesis",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number multiplied by 1 is equal to that natural number",
                "FL": "  rw [mul_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow",
                "NL": "  -- The goal is now to prove that 1 = 1, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "one_pow_dev_1": [
            {
                "theorem": "one_pow_dev_1",
                "NL": "-- Proof Statement: Prove that 1^m = 1",
                "FL": "theorem one_pow_dev_1 (m : \u2115) : (1 : \u2115) ^ m = 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow_dev_1",
                "NL": "  -- We can use induction on m, with the inductive hypothesis 1^m = 1. Our base is 1^0 = 1, and our inductive case is 1^succ(m) = 1.",
                "FL": "  induction m with m hm",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow_dev_1",
                "NL": "  -- Simplify base case to 1 = 1",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow_dev_1",
                "NL": "  -- rhs = lhs, so we are done.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow_dev_1",
                "NL": "  -- Next, we consider the inductive case, which we write as 1^m * 1 = 1.",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow_dev_1",
                "NL": "  -- 1 * 1 = 1",
                "FL": "  rw [hm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow_dev_1",
                "NL": "  -- 1=1",
                "FL": "  rw [mul_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_pow_dev_1",
                "NL": "  -- rhs = lhs, so we are done.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "pow_two": {
        "pow_two": [
            {
                "theorem": "pow_two",
                "NL": "-- Proof Statement: Prove that a^2 = a * a",
                "FL": "theorem pow_two (a : \u2115) : a ^ 2 = a * a := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_two",
                "NL": "  -- Rewrite the left hand side using the identity that 2 is equal to the successor of 1",
                "FL": "  rw [two_eq_succ_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_two",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number raised to the power of the successor of another natural number is equal to that number raised to the power of the other number, multiplied by the original number.",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_two",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number to the power of 1 is equal to that natural number",
                "FL": "  rw [pow_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_two",
                "NL": "  -- The goal is now to prove that a * a = a * a, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "pow_two_dev_2": [
            {
                "theorem": "pow_two_dev_2",
                "NL": "-- Proof Statement: Prove that a^2 = a * a",
                "FL": "theorem pow_two_dev_2 (a : \u2115) : a ^ 2 = a * a := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_two_dev_2",
                "NL": "  -- First, we observe that two is the successor of one, and write our goal as: a^succ(1) = a*a.",
                "FL": "  rw[two_eq_succ_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_two_dev_2",
                "NL": "  -- We know that anything to the power of the successor of one is equal to that number multiplied by itself, so we can rewrite our goal as: a * a = a*a a",
                "FL": "  rw[pow_succ, pow_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_two_dev_2",
                "NL": "  -- LHS = RHS, so our proof is complete by the reflexive property of equality.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "pow_add": {
        "pow_add": [
            {
                "theorem": "pow_add",
                "NL": "-- Proof Statement: Prove that a^(m + n) = a^m * a^n",
                "FL": "theorem pow_add (a m n : \u2115) : a ^ (m + n) = a ^ m * a ^ n := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add",
                "NL": "  -- Induct on n, with d = 0 as the base case and the inductive hypothesis a^(m + d) = a^m * a^d. There are now two proof goals, prove base case: a^(m + 0) = a^m * a^0 and inductive step: a^(m + d) = a^m * a^d implies a^(m + succ d) = a^m * a^(succ d).",
                "FL": "  induction n with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add",
                "NL": "  -- Rewrite the left hand side using the identity that the sum of any natural number and 0 is equal to that natural number",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number to the power of 0 is 1",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add",
                "NL": "  -- Rewrite the right hand side using the identity that any natural number multiplied by 1 is equal to that natural number",
                "FL": "  rw [mul_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add",
                "NL": "  -- The goal is now to prove that a^m = a^m, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add",
                "NL": "  -- Rewrite the left hand side using the identity that the sum of any natural number and the successor of another natural number is equal to the successor of the sum of the two natural numbers",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number raised to the power of the successor of another natural number is equal to that number raised to the power of the other number, multiplied by the original number",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add",
                "NL": "  -- Rewrite the right hand side using the identity that any natural number raised to the power of the successor of another natural number is equal to that number raised to the power of the other number, multiplied by the original number",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add",
                "NL": "  -- Rewrite the left hand side using the induction hypothesis",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number multiplied by the product of two natural numbers is equal to the product of the first natural number multiplied by the second natural number multiplied by the third natural number",
                "FL": "  rw [mul_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add",
                "NL": "  -- The goal is now to prove that a^m * (a^d * a) = a^m * a^(d + 1), which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "pow_add_dev_2": [
            {
                "theorem": "pow_add_dev_2",
                "NL": "-- Proof Statement: Prove that a^(m + n) = a^m * a^n",
                "FL": "theorem pow_add_dev_2 (a m n : \u2115) : a ^ (m + n) = a ^ m * a ^ n := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add_dev_2",
                "NL": "  -- Induct on n, with t = 0 as the base case and the inductive hypothesis a^(m + t) = a^m * a^t. There are now two proof goals, prove base case: a^(m + 0) = a^m * a^0 and inductive step: a^(m + t) = a^m * a^t implies a^(m + succ t) = a^m * a^(succ t).",
                "FL": "  induction n with t ht",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add_dev_2",
                "NL": "  -- Rewrite the goal by first simplifying the expression m + 0 to m, then simplifying a raised to the power of 0 to 1, and finally simplifying any number multiplied by 1 to the number itself. This results in the goal a^m = a^m.",
                "FL": "  rw [add_zero, pow_zero, mul_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add_dev_2",
                "NL": "  -- The goal is now to prove that a^m = a^m, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add_dev_2",
                "NL": "  -- Rewrite the expression a^(m + succ t) as a^m * (a^t * a) using the fact that (m + succ t) is the same as (succ (m + t)), and that a raised to the power (succ (m + t)) is the same as (a^(m + t) * a). Also, use the inductive hypothesis that a^(m + t) is equivalent to a^m * a^t, and the fact that multiplication is associative",
                "FL": "  rw [add_succ, pow_succ, pow_succ, ht, mul_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_add_dev_2",
                "NL": "  -- The goal is now to prove that a^m * (a^d * a) = a^m * a^(d + 1), which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_pow": {
        "mul_pow": [
            {
                "theorem": "mul_pow",
                "NL": "-- Proof Statement: Prove that (a * b)^n = a^n * b^n",
                "FL": "theorem mul_pow (a b n : \u2115) : (a * b) ^ n = a ^ n * b ^ n := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Induct on n, with d = 0 as the base case and the inductive hypothesis (a * b)^d = a^d * b^d. There are now two proof goals, prove base case: (a * b)^0 = a^0 * b^0 and inductive step: (a * b)^d = a^d * b^d implies (a * b)^(succ d) = a^(succ d) * b^(succ d).",
                "FL": "  induction n with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number to the power of 0 is 1",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Rewrite the right hand side using the identity that any natural number to the power of 0 is 1",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Rewrite the right hand side using the identity that any natural number to the power of 0 is 1",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Rewrite the right hand side using the identity that any natural number multiplied by 1 is equal to that natural number",
                "FL": "  rw [mul_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- The goal is now to prove that 1 = 1, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Rewrite the left hand side using the identity that any natural number raised to the power of the successor of another natural number is equal to that number raised to the power of the other number, multiplied by the original number",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Rewrite the right hand side using the identity that any natural number raised to the power of the successor of another natural number is equal to that number raised to the power of the other number, multiplied by the original number",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Rewrite the right hand side using the identity that any natural number raised to the power of the successor of another natural number is equal to that number raised to the power of the other number, multiplied by the original number",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Rewrite the left hand side using the induction hypothesis",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Rearrange the multiplication in both sides of the equation to group them in a different order using the associative property of multiplication.",
                "FL": "  repeat rw [mul_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Rearrange the multiplication in the right-hand side of the equation, changing 'a * (b^d * b)' to 'b^d * b * a'",
                "FL": "  rw [mul_comm a (_ * b)]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- Rewrite the right-hand side of the equation to move the multiplication of b and a inside the parentheses, changing b^d * b * a to b^d * (b * a).",
                "FL": "  rw [mul_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- We rewrite the expression to swap the order of multiplication in b * a to a * b, since multiplication is commutative for natural numbers.",
                "FL": "  rw [mul_comm b a]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow",
                "NL": "  -- The goal is now to prove that a^d * (b^d * (a * b)) = a^d * (b^d * (a * b)), which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_pow_dev_1": [
            {
                "theorem": "mul_pow_dev_1",
                "NL": "-- Proof Statement: Prove that (a * b)^n = a^n * b^n",
                "FL": "theorem mul_pow_dev_1 (a b n : \u2115) : (a * b) ^ n = a ^ n * b ^ n := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- We can use induction on n. We begin with the base case, which is: 1 = a ^ 0 * b ^ 0",
                "FL": "  induction n with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  --1 = a ^ 0 * b ^ 0",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- 1 = 1 * b^0",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- 1 = 1*1",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- 1=1",
                "FL": "  rw [mul_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- lhs = rhs, so we have proven the base case.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- Next, we proceed with the inductive case, which states that: (a * b) ^ succ d = a ^ succ d * b ^ succ d. Thus becomes: (a * b) ^ d * (a * b) = a ^ succ d * b ^ succ d",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- (a * b) ^ d * (a * b) = a ^ d * a * b ^ succ d",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- (a * b) ^ d * (a * b) = a ^ d * a * (b ^ d * b)",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- With the inductive hypothesis hd, we get: a ^ d * b ^ d * (a * b) = a ^ d * a * (b ^ d * b)",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- a ^ d * (b ^ d * (a * b)) = a ^ d * (a * (b ^ d * b))",
                "FL": "  repeat rw [mul_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- a ^ d * (b ^ d * (a * b)) = a ^ d * (b ^ d * b * a)",
                "FL": "  rw [mul_comm a (_ * b)]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- a ^ d * (b ^ d * (a * b)) = a ^ d * (b ^ d * (b * a))",
                "FL": "  rw [mul_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- a ^ d * (b ^ d * (a * b)) = a ^ d * (b ^ d * (a * b))",
                "FL": "  rw [mul_comm b a]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_pow_dev_1",
                "NL": "  -- lhs = rhs, so we are done.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "pow_pow": {
        "pow_pow": [
            {
                "theorem": "pow_pow",
                "NL": "-- Proof Statement: Prove that any natural number to the power of the power of another natural number is equal to that natural number to the power of the first natural number, multiplied by that natural number to the power of the second natural number",
                "FL": "theorem pow_pow (a m n : \u2115) : (a ^ m) ^ n = a ^ (m * n) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow",
                "NL": "  -- Induct on n, with d = 0 as the base case and the inductive hypothesis (a ^ m) ^ t = a ^ (m * t). There are now two proof goals, prove base case: (a ^ m) ^ 0 = a ^ (m * 0) and inductive step: (a ^ m) ^ t = a ^ (m * t) implies (a ^ m) ^ succ t = a ^ (m * succ t).",
                "FL": "  induction n with t Ht",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow",
                "NL": "  -- Rewrite m * 0 to 0 in the right side",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow",
                "NL": "  -- Rewrite (a ^ m) ^ 0 to 1 in the left side",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow",
                "NL": "  -- Rewrite a ^ 0 to 1 in the right side",
                "FL": "  rw [pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow",
                "NL": "  -- The goal is now to prove that 1 = 1, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow",
                "NL": "  -- Rewrite the left-hand side using the theorem that states (x^n)^(succ t) = (x^n)^t * (x^n)",
                "FL": "  rw [pow_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow",
                "NL": "  -- Use the induction hypothesis to replace (a^m)^t with a^(m*t)",
                "FL": "  rw [Ht]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow",
                "NL": "  -- Rewrite the right-hand side using the theorem that states m*(succ t) = m*t + m",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow",
                "NL": "  -- Rewrite the right-hand side using the theorem that states x^(a+b) = x^a * x^b",
                "FL": "  rw [pow_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow",
                "NL": "  -- The goal is now to prove that a^(m\\*t) * a^m = a^(m*t) * a^m, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "pow_pow_dev_1": [
            {
                "theorem": "pow_pow_dev_1",
                "NL": "-- Proof Statement: Prove that any natural number to the power of the power of another natural number is equal to that natural number to the power of the first natural number, multiplied by that natural number to the power of the second natural number",
                "FL": "theorem pow_pow_dev_1 (a m n : \u2115) : (a ^ m) ^ n = a ^ (m * n) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow_dev_1",
                "NL": "  -- Induct on n, with (a ^ m) ^ 0 = a ^ (m * 0) as the base case and (a ^ m) ^ succ t = a ^ (m * succ t) as the inductive case.",
                "FL": "  induction n with t Ht",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow_dev_1",
                "NL": "  -- 1 = 1",
                "FL": "  rw [mul_zero, pow_zero, pow_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow_dev_1",
                "NL": "  -- LHS = RHS",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow_dev_1",
                "NL": "  -- (a ^ m) ^ succ t = a ^ (m * succ t)",
                "FL": "  rw [pow_succ, Ht, mul_succ, pow_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "pow_pow_dev_1",
                "NL": "  -- LHS = RHS",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_sq": {
        "add_sq_dev_1": [
            {
                "theorem": "add_sq_dev_1",
                "NL": "-- Proof Statement: Prove that (a + b)^2 = a^2 + b^2 + 2 * a * b",
                "FL": "theorem add_sq_dev_1 (a b : \u2115) : (a + b) ^ 2 = a ^ 2 + b ^ 2 + 2 * a * b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- (a + b) * (a + b) = a ^ 2 + b ^ 2 + 2 * a * b",
                "FL": "  rw [pow_two]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- (a + b) * (a + b) = a * a + b ^ 2 + 2 * a * b",
                "FL": "  rw [pow_two]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- (a + b) * (a + b) = a * a + b * b + 2 * a * b",
                "FL": "  rw [pow_two]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- (a + b) * (a + b) = a * a + 2 * a * b + b * b",
                "FL": "  rw [add_right_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- (a + b) * a + (a + b) * b = a * a + 2 * a * b + b * b",
                "FL": "  rw [mul_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- a * a + b * a + (a + b) * b = a * a + 2 * a * b + b * b",
                "FL": "  rw [add_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- a * a + b * a + (a * b + b * b) = a * a + 2 * a * b + b * b",
                "FL": "  rw [add_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- a * a + b * a + (a * b + b * b) = a * a + (a + a) * b + b * b",
                "FL": "  rw [two_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- a * a + b * a + (a * b + b * b) = a * a + (a * b + a * b) + b * b",
                "FL": "  rw [add_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- a * a + a * b + (a * b + b * b) = a * a + (a * b + a * b) + b * b",
                "FL": "  rw [mul_comm b a]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- a * a + a * b + a * b + b * b = a * a + (a * b + a * b) + b * b",
                "FL": "  rw [\u2190 add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- a * a + a * b + a * b + b * b = a * a + a * b + a * b + b * b",
                "FL": "  rw [\u2190 add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_1",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_sq_dev_2": [
            {
                "theorem": "add_sq_dev_2",
                "NL": "-- Proof Statement: Prove that (a + b)^2 = a^2 + b^2 + 2 * a * b",
                "FL": "theorem add_sq_dev_2 (a b : \u2115) : (a + b) ^ 2 = a ^ 2 + b ^ 2 + 2 * a * b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_2",
                "NL": "  -- Rewrite the expression for the square of (a + b), a^2, and b^2 to be (a + b) * (a + b), a * a, and b * b respectively.",
                "FL": "  rw [pow_two, pow_two, pow_two]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_2",
                "NL": "  -- Rearrange the terms on the right hand side of the equation, swapping the order of b * b and 2 * a * b. This is based on the commutative property of addition, which states that the order of the terms does not change the result of the addition.",
                "FL": "  rw [add_right_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_2",
                "NL": "  -- rewrite the left-hand side of the equation using the distributive property of multiplication over addition. This expands (a + b) * (a + b) to a * a + b * a + a * b + b * b.",
                "FL": "  rw [mul_add, add_mul, add_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_2",
                "NL": "  -- Rewrite the term 2 * a * b in the goal as (a * b + a * b) using the theorem that 2 times a number is the same as the number added to itself. Also, rewrite the term a * b + b * b as (a * b + a * b) + b * b using the theorem that the product of a sum is the sum of the products.",
                "FL": "  rw [two_mul, add_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_2",
                "NL": "  -- We rewrite the expression a * b as b * a in the goal. This is based on the commutative property of multiplication, which states that the order of the factors does not change the product. This results in the new goal: a * a + a * b + (a * b + b * b) = a * a + (a * b + a * b) + b * b.",
                "FL": "  rw [mul_comm b a]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_2",
                "NL": "  -- We use the theorem that states the associativity of addition twice to rearrange the left-hand side of the equation. This changes the goal to proving that a * a + a * b + a * b + b * b equals a * a + a * b + a * b + b * b.",
                "FL": "  rw [\u2190 add_assoc, \u2190 add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_2",
                "NL": "  -- The goal is now to prove that a * a + a * b + a * b + b * b = a * a + a * b + a * b + b * b, which is true by reflexivity",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_sq_dev_2",
                "NL": "",
                "FL": "end MyNat",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_one": {
        "mul_one": [
            {
                "theorem": "mul_one",
                "NL": "-- Proof Statement: Prove the multiplicative identity property, the multiplication of m * 1 is m, for all natural numbers",
                "FL": "theorem mul_one (m : \u2115) : m * 1 = m := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one",
                "NL": "  -- Rewrite 1 as succ 0, using the axiom that succ 0 = 1",
                "FL": "  rw [one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one",
                "NL": "  -- Rewrite LHS m * succ 0 to m * 0 + m using the definition of multiplication with a successor.",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one",
                "NL": "  -- Simplify m * 0 + m to 0 + m on LHS",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one",
                "NL": "  -- Rewrite the LHS 0 + m = m",
                "FL": "  rw [zero_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one",
                "NL": "  -- Prove LHS and RHS are equal, m = m, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_one_dev_1": [
            {
                "theorem": "mul_one_dev_1",
                "NL": "-- Proof Statement: Prove the multiplicative identity property, the multiplication of m * 1 is m, for all natural numbers",
                "FL": "theorem mul_one_dev_1 (m : \u2115) : m * 1 = m := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one_dev_1",
                "NL": "  -- m * succ 0 = m",
                "FL": "  rw [one_eq_succ_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one_dev_1",
                "NL": "  -- m * 0 + m = m",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one_dev_1",
                "NL": "  -- 0 + m = m",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one_dev_1",
                "NL": "  -- 0 + (0 + m) = 0 + m",
                "FL": "  rw [\u2190 zero_add m]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one_dev_1",
                "NL": "  -- 0 + m + 0 = 0 + m",
                "FL": "  rw [add_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one_dev_1",
                "NL": "  -- 0 + m = 0 + m",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_one_dev_1",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "zero_mul": {
        "zero_mul_dev_1": [
            {
                "theorem": "zero_mul_dev_1",
                "NL": "-- Proof Statement: Prove that 0 * m = m for all natural numbers",
                "FL": "theorem zero_mul_dev_1 (m : \u2115) : 0 * m = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_mul_dev_1",
                "NL": "  -- Proof by induction on m with base case 0 * 0 = 0 and inductive step 0 * d + 1 = 0",
                "FL": "  induction m with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_mul_dev_1",
                "NL": "  -- First prove base case. Simplify LHS 0 * 0 to 0",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_mul_dev_1",
                "NL": "  -- The base case is now complete.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_mul_dev_1",
                "NL": "  -- Now for the inductive step. Rewrite LHS 0 * succ (d) to 0 * d + 0, using the definition of multiplication",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_mul_dev_1",
                "NL": "  -- Simplify the LHS 0 * d + 0 to 0 * d using the definition of addition",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_mul_dev_1",
                "NL": "  -- This is exactly the inductive hypothesis so we can complete the proof.",
                "FL": "  exact hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "zero_mul_dev_2": [
            {
                "theorem": "zero_mul_dev_2",
                "NL": "-- Proof Statement: Prove that 0 * m = m for all natural numbers",
                "FL": "theorem zero_mul_dev_2 (m : \u2115) : 0 * m = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_mul_dev_2",
                "NL": "  -- Proof by induction on m with base case 0 * 0 = 0 and inductive step 0 * d + 1 = 0",
                "FL": "  induction m with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_mul_dev_2",
                "NL": "  -- the base case becomes 0 = 0",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_mul_dev_2",
                "NL": "  -- That proves the base case.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_mul_dev_2",
                "NL": "  -- the inductive case becomes 0 * d = 0",
                "FL": "  rw [mul_succ, add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "zero_mul_dev_2",
                "NL": "  -- This is exactly the inductive hypothesis so we can complete the proof.",
                "FL": "  exact hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "succ_mul": {
        "succ_mul": [
            {
                "theorem": "succ_mul",
                "NL": "-- Proof Statement: Prove that succ a * b = a * b + b for all natural numbers a, b",
                "FL": "theorem succ_mul (a b : \u2115) : succ a * b = a * b + b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "  -- Induct on b, with d = 0 as the base case and the inductive hypothesis succ a * d = a * d + d. There are now two proof goals, prove base case: succ a * 0 = a * 0 + 0, and inductive step: succ a * succ d = a * succ d + succ d.",
                "FL": "  induction b with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "  -- First we prove base case. Simplify the LHS from succ a * 0 to 0 using the fact that a * 0 = 0",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "  -- Simplify LHS a * 0 = 0 hence we obtain 0 = 0 + 0",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "-- Simplify RHS 0 + 0 to 0 hence we obtain 0 = 0",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "  -- Prove LHS and RHS are equal, 0 = 0, completing base case",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "  -- Now prove inductive step. We rewrite LHS succ a * succ d to succ a * d + succ a",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "  -- Expand the RHS from a * succ d + succ d to a * d + a + succ d",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "  -- Rewrite the LHS  succ a * d + succ a to a * d + d + succ a using the inductive hypothesis",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "  -- Rewrite the LHS  a * d + d + succ a to succ (a * d + d + a)",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "  -- Rewrite RHS, changing a * d + a + succ d to succ (a * d + a + d)",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "  -- Apply the fact that a + b + c = a + c + b on LHS obtaining a * d + d + a to a * d + a + d",
                "FL": "  rw [add_right_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul",
                "NL": "  -- Prove LHS and RHS are equal, succ (a * d + a + d) = succ (a * d + a + d), completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "succ_mul_dev_2": [
            {
                "theorem": "succ_mul_dev_2",
                "NL": "-- Proof Statement: Prove that succ a * b = a * b + b for all natural numbers a, b",
                "FL": "theorem succ_mul_dev_2 (a b : \u2115) : succ a * b = a * b + b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- Proof by induction on b, with succ a * 0 = a * 0 + 0 as the base case and the inductive case as succ a * d + 1 = a * d + 1 + d + 1.",
                "FL": "  induction b with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- 0 = a * 0 + 0",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- 0 = 0 + 0",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- 0 = 0",
                "FL": "  rw [add_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- Base case is complete.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- succ a * succ d = succ d + a * succ d",
                "FL": "  rw [add_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- succ a * d + succ a = succ d + a * succ d",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- succ (succ a * d + a) = succ d + a * succ d",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- succ (succ a * d + a) = succ d + (a * d + a)",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- succ (succ a * d + a) = succ (d + (a * d + a))",
                "FL": "  rw [succ_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- succ (a * d + d + a) = succ (d + (a * d + a))",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- succ (a * d + d + a) = succ (d + a * d + a)",
                "FL": "  rw [\u2190 add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- succ (a * d + d + a) = succ (a * d + d + a)",
                "FL": "  rw [add_comm d]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_mul_dev_2",
                "NL": "  -- This completes the inductive step.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_comm": {
        "mul_comm": [
            {
                "theorem": "mul_comm",
                "NL": "-- Proof Statement: Prove that multiplication is commutative, that is a * b  = b * a for all natural numbers",
                "FL": "theorem mul_comm (a b : \u2115) : a * b = b * a := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm",
                "NL": "  -- Induct on b, with d = 0 as the base case and the inductive hypothesis a * d = d * a. There are now two proof goals, prove base case: a * 0 = 0 * a, and inductive step: a * succ d = succ d * a.",
                "FL": "  induction b with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm",
                "NL": "  -- First we prove base case. Simplify RHS 0 * a to 0",
                "FL": "  rw [zero_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm",
                "NL": "  -- Simplify LHS a * 0 to 0",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm",
                "NL": "  -- Prove LHS and RHS are equal, 0 = 0, completing base case",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm",
                "NL": "  -- Next prove inductive step. Rewrite RHS succ d * a to d * a + a",
                "FL": "  rw [succ_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm",
                "NL": "  -- Rewrite the RHS from d * a + a to a * d + a using the inductive hypothesis",
                "FL": "  rw [\u2190 hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm",
                "NL": "  -- Rewrite the LHS, changing a * succ d to a * d + a",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm",
                "NL": "  -- Prove LHS and RHS are equal, a * d + a = a * d + a, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_comm_dev_1": [
            {
                "theorem": "mul_comm_dev_1",
                "NL": "-- Proof Statement: Prove that multiplication is commutative, that is a * b = b * a for all natural numbers",
                "FL": "theorem mul_comm_dev_1 (a b : \u2115) : a * b = b * a := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm_dev_1",
                "NL": "  -- Induct on b, with d = 0 as the base case and the inductive hypothesis a * d = d * a.",
                "FL": "  induction b with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm_dev_1",
                "NL": "  -- First prove base case: we obtain 0 = 0 * a",
                "FL": "  rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm_dev_1",
                "NL": "  -- 0 = 0",
                "FL": "  rw [zero_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm_dev_1",
                "NL": "  -- 0 = 0, completing base case.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm_dev_1",
                "NL": "  -- Next prove inductive step: we obtain a * d + a = succ d * a.",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm_dev_1",
                "NL": "  -- a * d + a = d * a + a",
                "FL": "  rw [succ_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm_dev_1",
                "NL": "  -- d * a + a = d * a + a",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_comm_dev_1",
                "NL": "  -- d * a + a = d * a + a, completing the proof.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "one_mul": {
        "one_mul": [
            {
                "theorem": "one_mul",
                "NL": "-- Proof Statement: Prove that 1 * m = m, for all natural numbers",
                "FL": "theorem one_mul (m : \u2115): 1 * m = m := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_mul",
                "NL": "  -- Apply the commutative property of multiplication to rewrite LHS from 1 * m to m * 1",
                "FL": "  rw [mul_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_mul",
                "NL": "  -- Simplify m * 1 to m",
                "FL": "  rw [mul_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_mul",
                "NL": "  -- Prove LHS and RHS are equal, m = m, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "one_mul_dev_2": [
            {
                "theorem": "one_mul_dev_2",
                "NL": "-- Proof Statement: Prove that 1 * m = m, for all natural numbers",
                "FL": "theorem one_mul_dev_2 (m : \u2115): 1 * m = m := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_mul_dev_2",
                "NL": "  -- we obtain m = m by the commutative property of multiplication",
                "FL": "  rw [mul_comm, mul_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_mul_dev_2",
                "NL": "  -- m = m, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "two_mul": {
        "two_mul": [
            {
                "theorem": "two_mul",
                "NL": "-- Proof Statement: Prove that 2 * m = m + m for all natural numbers",
                "FL": "theorem two_mul (m : \u2115): 2 * m = m + m := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_mul",
                "NL": "  -- Rewrite 2 as succ(1), changing LHS from 2 * m to succ 1 * m",
                "FL": "  rw [two_eq_succ_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_mul",
                "NL": "  -- Rewrite the LHS succ 1 * m to 1 * m + m",
                "FL": "  rw [succ_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_mul",
                "NL": "  -- Simplify LHS from 1 * m + m to m + m by identity property of multiplication",
                "FL": "  rw [one_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_mul",
                "NL": "  -- Prove LHS and RHS are equal, m + m = m + m, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "two_mul_dev_1": [
            {
                "theorem": "two_mul_dev_1",
                "NL": "-- Proof Statement: Prove that 2 * m = m + m for all natural numbers",
                "FL": "theorem two_mul_dev_1 (m : \u2115): 2 * m = m + m := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_mul_dev_1",
                "NL": "  -- Rewrite LHS from 2 * m to succ 1 * m and simplify to m + m using identity property of multiplication",
                "FL": "  rw [two_eq_succ_one, succ_mul, one_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "two_mul_dev_1",
                "NL": "  -- Prove LHS and RHS are equal, m + m = m + m, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_add": {
        "mul_add": [
            {
                "theorem": "mul_add",
                "NL": "-- Proof Statement: Prove that multiplication is distributive over addition. In other words, for all natural numbers a * (b + c) = a * b + a * c",
                "FL": "theorem mul_add (a b c : \u2115) : a * (b + c) = a * b + a * c := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add",
                "NL": "    -- Induct on b, with b = 0 as the base case and the inductive hypothesis a * b = a * b + a * c. There are now two proof goals, prove base case: a * (0 + c) = a * 0 + a * c, and inductive step: a * (succ b + c) = a * succ b + a * c",
                "FL": "    induction b with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add",
                "NL": "    -- First prove base case. Simplify LHS a * (0 + c) to a * c and RHS a * 0 + a * c to 0 + a * c and then simplify to a * c",
                "FL": "    rw [zero_add, mul_zero, zero_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add",
                "NL": "    -- Prove LHS and RHS are equal, a * c = a * c, completing the base case",
                "FL": "    rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add",
                "NL": "    -- Next prove the inductive step. Rewrite LHS a * (succ b + c) to a * succ (b + c) and then to  a * (b + c) + a",
                "FL": "    rw [succ_add, mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add",
                "NL": "    -- Rewrite RHS from a * succ b + a * c to a * b + a + a * c and then rearrange terms to a * b + a * c + a",
                "FL": "    rw [mul_succ, add_right_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add",
                "NL": "    -- Rewrite the LHS a * (b + c) + a to a * b + a * c + a using the inductive hypothesis",
                "FL": "    rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add",
                "NL": "    -- Prove LHS and RHS are equal, a * b + a * c + a = a * b + a * c + a, completing the proof",
                "FL": "    rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_add_dev_2": [
            {
                "theorem": "mul_add_dev_2",
                "NL": "-- Proof Statement: Prove that multiplication is distributive over addition. In other words, for all natural numbers a * (b + c) = a * b + a * c",
                "FL": "theorem mul_add_dev_2 (a b c : \u2115) : a * (b + c) = a * b + a * c := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add_dev_2",
                "NL": "    -- Proof by induction on b, with a * (0 + c) = a * 0 + a * c as the base case and  a * (succ b + c) = a * succ b + a * c as the inductive step.",
                "FL": "    induction b with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add_dev_2",
                "NL": "    -- First prove base case. a * (0 + c) = a * 0 + a * c becomes a * c = a * c by definition of multiplication and addition",
                "FL": "    rw [zero_add, mul_zero, zero_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add_dev_2",
                "NL": "    -- The base case is complete.",
                "FL": "    rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add_dev_2",
                "NL": "    -- Next prove inductive step. a * (succ b + c) = a * succ b + a * c becomes a * (b + c) + a = a * succ b + a * c + a by definition of multiplication and addition",
                "FL": "    rw [succ_add, mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add_dev_2",
                "NL": "    -- a * (b + c) + a = a * b + a * c + a becomes a * (b + c) + a = a * b + a * c + a by the definition of multiplication and the commutative property of addition",
                "FL": "    rw [mul_succ, add_right_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add_dev_2",
                "NL": "    -- a * (b + c) + a = a * b + a * c + a becomes a * b + a * c + a = a * b + a * c + a using the inductive hypothesis",
                "FL": "    rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_add_dev_2",
                "NL": "    -- The inductive step is complete. So the whole proof is complete.",
                "FL": "    rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_mul": {
        "add_mul": [
            {
                "theorem": "add_mul",
                "NL": "-- Proof Statement: Prove that multiplication is distributive over addition. In other words, for all natural numbers (a + b) * c = a * c + b * c",
                "FL": "theorem add_mul (a b c : \u2115) : (a + b) * c = a * c + b * c := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_mul",
                "NL": "  -- Rewrite LHS using the commutative property of multiplication and the distributive property of multiplication over addition. This changes (a + b) * c to c * a + c * b.",
                "FL": "  rw [mul_comm, mul_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_mul",
                "NL": "  -- Apply the commutative property of multiplication everywhere to LHS, changing c * a + c * b to a * c + b * c",
                "FL": "  repeat rw [mul_comm c]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_mul",
                "NL": "  -- Prove LHS and RHS are equal, a * c + b * c = a * c + b * c, completing base case",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_mul_dev_1": [
            {
                "theorem": "add_mul_dev_1",
                "NL": "-- Proof Statement: Prove that multiplication is distributive over addition. In other words, for all natural numbers (a + b) * c = a * c + b * c",
                "FL": "theorem add_mul_dev_1 (a b c : \u2115) : (a + b) * c = a * c + b * c := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_mul_dev_1",
                "NL": "  -- c * (a + b) = a * c + b * c",
                "FL": "  rw [mul_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_mul_dev_1",
                "NL": "  -- c * a + c * b = a * c + b * c",
                "FL": "  rw [mul_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_mul_dev_1",
                "NL": "  -- a * c + c * b = a * c + b * c",
                "FL": "  rw [mul_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_mul_dev_1",
                "NL": "  -- a * c + c * b = a * c + c * b",
                "FL": "  rw [mul_comm b]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_mul_dev_1",
                "NL": "  -- Prove LHS and RHS are equal, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_assoc": {
        "mul_assoc": [
            {
                "theorem": "mul_assoc",
                "NL": "-- Proof Statement: Prove that multiplication is associative for all natural numbers, that is (a * b) * c = a * (b * c)",
                "FL": "theorem mul_assoc (a b c : \u2115) : (a * b) * c = a * (b * c) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc",
                "NL": "  -- Induct on c, with d = 0 as the base case and the inductive hypothesis a * b * d = a * (b * d). There are now two proof goals, prove base case: a * b * 0 = a * (b * 0), and inductive step: a * b * succ d = a * (b * succ d).",
                "FL": "  induction c with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc",
                "NL": "  -- First prove base case. Rewrite LHS and RHS using the fact that any natural number multiplied by zero equals zero, simplifying the equation to 0 = 0",
                "FL": "  repeat rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc",
                "NL": "  -- Prove LHS and RHS are equal, 0 = 0, completing base case",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc",
                "NL": "  -- Next prove inductive step. Rewrite LHS from a * b * succ d to a * b * d + a * b",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc",
                "NL": "  -- Rewrite RHS from a * (b * succ d) to a * (b * d + b)",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc",
                "NL": "  -- Rewrite LHS a * b * d + a * b using the inductive hypothesis to a * (b * d) + a * b",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc",
                "NL": "  -- Rewrite RHS using the distributive property of multiplication over addition, changing a * (b * d + b) to a * (b * d) + a * b",
                "FL": "  rw [mul_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc",
                "NL": "  -- Prove LHS and RHS are equal, a * (b * d) + a * b = a * (b * d) + a * b, completing base case",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_assoc_dev_2": [
            {
                "theorem": "mul_assoc_dev_2",
                "NL": "-- Proof Statement: Prove that multiplication is associative for all natural numbers, that is (a * b) * c = a * (b * c)",
                "FL": "theorem mul_assoc_dev_2 (a b c : \u2115) : (a * b) * c = a * (b * c) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc_dev_2",
                "NL": "  -- Induct on c, with (a * b) * 0 = a * (b * 0) as the base case and (a * b) * succ d = a * (b * succ d) as the inductive step.",
                "FL": "  induction c with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc_dev_2",
                "NL": "  -- First prove base case. Rewrite LHS and RHS using the definition of multiplication with zero, simplifying the equation to 0 = 0",
                "FL": "  repeat rw [mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc_dev_2",
                "NL": "  -- Prove LHS and RHS are equal, 0 = 0, completing base case",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc_dev_2",
                "NL": "  -- For the inductive step, a * b * succ d = a * (b * succ d) simplifies to a * b * d + a * b = a * (b * d + b) using the definition of multiplication with succ",
                "FL": "  repeat rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc_dev_2",
                "NL": "  -- Use the inductive hypothesis to simplify this further to a * (b * d) + a * b = a * (b * d + b)",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc_dev_2",
                "NL": "  -- simplify to a * (b * d) + a * b = a * (b * d) + a * b using the distributive property of multiplication over addition",
                "FL": "  rw [mul_add]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_assoc_dev_2",
                "NL": "  -- The LHS and RHS are equal, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "add_left_comm": {
        "add_left_comm_dev_1": [
            {
                "theorem": "add_left_comm_dev_1",
                "NL": "-- Proof Statement: Prove that for natural numbers a, b, and c, a + (b + c) = b + (a + c).",
                "FL": "theorem add_left_comm_dev_1 (a b c : \u2115) : a + (b + c) = b + (a + c) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_comm_dev_1",
                "NL": "  -- By associativity of addition, rewrite LHS a + (b + c) into a + b + c",
                "FL": "  rw [\u2190 add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_comm_dev_1",
                "NL": "  -- By the commutativity and associativity of addition, rewrite a + b + c to b + (a + c)",
                "FL": "  rw [add_comm a b, add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_comm_dev_1",
                "NL": "  -- So we just need to show b + (a + c) = b + (a + c), which is true by reflexivity and proof is complete.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "add_left_comm_dev_2": [
            {
                "theorem": "add_left_comm_dev_2",
                "NL": "-- Proof Statement: Prove that for natural numbers a, b, and c, a + (b + c) = b + (a + c).",
                "FL": "theorem add_left_comm_dev_2 (a b c : \u2115) : a + (b + c) = b + (a + c) := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_comm_dev_2",
                "NL": "  -- a + (b + c) = b + (a + c) -> a + b + c = b + (a + c)",
                "FL": "  rw [\u2190 add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_comm_dev_2",
                "NL": "  -- a + b + c = b + (a + c) -> a + b + c = a + b + c",
                "FL": "  rw [\u2190 add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_comm_dev_2",
                "NL": "  -- a + b + c = b + a + c",
                "FL": "  rw [add_comm a b]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "add_left_comm_dev_2",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "var_swap": {
        "var_swap_dev_1": [
            {
                "theorem": "var_swap_dev_1",
                "NL": "-- Proof Statement: Prove (a + b) + (c + d) = ((a + c) + d) + b for natural numbers a, b, c, d",
                "FL": "theorem var_swap_dev_1 (a b c d : \u2115) : a + b + (c + d) = a + c + d + b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "var_swap_dev_1",
                "NL": "  -- Use associativity of addition to change a + b + (c + d) into a + (b + (c + d)) and a + c + d + b into a + (c + (d + b))",
                "FL": "  repeat rw [add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "var_swap_dev_1",
                "NL": "  -- Change b + (c + d) into c + (b + d) using a previous theorem.",
                "FL": "  rw [add_left_comm b c]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "var_swap_dev_1",
                "NL": "  -- Use commutativity of addition to change b + d into d + b",
                "FL": "  rw [add_comm b d]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "var_swap_dev_1",
                "NL": "  -- So we must show that a + (c + (d + b)) = a + (c + (d + b)), which is true by reflexivity.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "var_swap_dev_2": [
            {
                "theorem": "var_swap_dev_2",
                "NL": "-- Proof Statement: Prove (a + b) + (c + d) = ((a + c) + d) + b for natural numbers a, b, c, d",
                "FL": "theorem var_swap_dev_2 (a b c d : \u2115) : a + b + (c + d) = a + c + d + b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "var_swap_dev_2",
                "NL": "  -- a + b + (c + d) = a + c + d + b -> a + (b + (c + d)) = a + (c + (d + b))",
                "FL": "  repeat rw [add_assoc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "var_swap_dev_2",
                "NL": "  -- a + (b + (c + d)) = a + (c + (d + b)) -> a + (c + (b + d)) = a + (c + (d + b))",
                "FL": "  rw [add_left_comm b c]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "var_swap_dev_2",
                "NL": "  -- a + (c + (b + d)) = a + (c + (d + b)) -> a + (c + (d + b)) = a + (c + (d + b))",
                "FL": "  rw [add_comm b d]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "var_swap_dev_2",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "succ_peano": {
        "succ_peano_dev_1": [
            {
                "theorem": "succ_peano_dev_1",
                "NL": "-- Proof Statement: Prove that for natural numbers a, b, a = b, given that succ a = succ b",
                "FL": "theorem succ_peano_dev_1 (a b : \u2115) (h : succ a = succ b) : a = b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_peano_dev_1",
                "NL": "  -- We can change a into pred (succ a) in the goal a = b",
                "FL": "  rw [\u2190 pred_succ a]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_peano_dev_1",
                "NL": "  -- Since succ a = succ b by hypothesis, we can instead show pred (succ b) = b",
                "FL": "  rw [h]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_peano_dev_1",
                "NL": "  -- But we can change pred (succ b) into b.",
                "FL": "  rw [pred_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_peano_dev_1",
                "NL": "  -- So we must show b = b, which is true by reflexivity.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "succ_peano_dev_2": [
            {
                "theorem": "succ_peano_dev_2",
                "NL": "-- Proof Statement: Prove that for natural numbers a, b, a = b, given that succ a = succ b",
                "FL": "theorem succ_peano_dev_2 (a b : \u2115) (h : succ a = succ b) : a = b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_peano_dev_2",
                "NL": "  -- a = b -> pred (succ a) = b",
                "FL": "  rw [\u2190 pred_succ a]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_peano_dev_2",
                "NL": "  -- pred (succ a) = b -> pred (succ b) = b",
                "FL": "  rw [h]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_peano_dev_2",
                "NL": "  -- pred (succ b) = b -> b = b",
                "FL": "  rw [pred_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_peano_dev_2",
                "NL": "  -- lhs = rhs",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "succ_ne_zero": {
        "succ_ne_zero_dev_1": [
            {
                "theorem": "succ_ne_zero_dev_1",
                "NL": "-- Proof Statement: Prove the Peano axiom that the successor of a natural number cannot be 0 for all natural numbers \"a\".",
                "FL": "theorem succ_ne_zero_dev_1 (a : \u2115) : succ a \u2260 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_zero_dev_1",
                "NL": "  -- To show succ a \u2260 0, we need to assume succ a = 0 and derive a contradiction/falsehood.",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_zero_dev_1",
                "NL": "  -- False and is_zero (succ 0) are equivalent, so we chose to show the latter.",
                "FL": "  rw [\u2190 is_zero_succ a]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_zero_dev_1",
                "NL": "  -- By assumption, we can change succ a into 0.",
                "FL": "  rw [h]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_zero_dev_1",
                "NL": "  -- is_zero 0 is equivalent to True, so we can show True instead.",
                "FL": "  rw [is_zero_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_zero_dev_1",
                "NL": "  -- True has the trivial proof.",
                "FL": "  trivial",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "succ_ne_zero_dev_2": [
            {
                "theorem": "succ_ne_zero_dev_2",
                "NL": "-- Proof Statement: Prove the Peano axiom that the successor of a natural number cannot be 0 for all natural numbers \"a\".",
                "FL": "theorem succ_ne_zero_dev_2 (a : \u2115) : succ a \u2260 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_zero_dev_2",
                "NL": "  -- assume succ a = 0",
                "FL": "  intro h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_zero_dev_2",
                "NL": "  -- False -> is_zero (succ 0)",
                "FL": "  rw [\u2190 is_zero_succ a]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_zero_dev_2",
                "NL": "  -- is_zero (succ 0) -> is_zero 0",
                "FL": "  rw [h]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_zero_dev_2",
                "NL": "  -- is_zero 0 -> True",
                "FL": "  rw [is_zero_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_zero_dev_2",
                "NL": "  -- clearly, True",
                "FL": "  trivial",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "succ_ne_succ": {
        "succ_ne_succ": [
            {
                "theorem": "succ_ne_succ",
                "NL": "-- Proof Statement: Prove the Peano axiom that if two natural numbers are not equal, their successors are not equal",
                "FL": "theorem succ_ne_succ (m n : \u2115) (h : m \u2260 n) : succ m \u2260 succ n := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_succ",
                "NL": "  -- Introduce the contrapositive, proving that m = n, given that succ m = succ n",
                "FL": "  contrapose! h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_succ",
                "NL": "  -- Simplify succ m = succ n to m = n, using the injectivity of the successor",
                "FL": "  apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_succ",
                "NL": "  -- We can exactly prove that m = n, with our given fact, to complete the proof",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "succ_ne_succ_dev_1": [
            {
                "theorem": "succ_ne_succ_dev_1",
                "NL": "-- Proof Statement: Prove the Peano axiom that two numbers of which the successors are equal are themselves equal for natural numbers m, n",
                "FL": "theorem succ_ne_succ_dev_1 (m n : \u2115) (h : m \u2260 n) : succ m \u2260 succ n := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_succ_dev_1",
                "NL": "  -- We use proof by contraposition. So, we assume succ m = succ n and show m = n.",
                "FL": "  contrapose! h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_succ_dev_1",
                "NL": "  -- By the injectivity of succ, we have m = n.",
                "FL": "  apply succ_inj at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "succ_ne_succ_dev_1",
                "NL": "  -- So, m = n, which is exactly what we wanted to show.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_le_mul_right": {
        "mul_le_mul_right_dev_1": [
            {
                "theorem": "mul_le_mul_right_dev_1",
                "NL": "-- Proof Statement: Prove that if a is less than or equal to b, then a times t is less than or equal to b times t.",
                "FL": "theorem mul_le_mul_right_dev_1 (a b t : \u2115) (h : a \u2264 b) : a * t \u2264 b * t := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_le_mul_right_dev_1",
                "NL": "  -- We know that a \u2264 b, so we can express b as a + d for some natural number d.",
                "FL": "  cases h with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_le_mul_right_dev_1",
                "NL": "  -- Rewrite b as a + d using the previous statement",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_le_mul_right_dev_1",
                "NL": "  -- simplify to a * t \u2264 a * t + d * t using the distributive property of multiplication over addition",
                "FL": "  rw [add_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_le_mul_right_dev_1",
                "NL": "  -- Use d * t as a specific natural number that can be used to rewrite a * t \u2264 b * t as b * t = a * t + d * t.",
                "FL": "  use d * t",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_le_mul_right_dev_1",
                "NL": "  -- The LHS and RHS are equal, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_le_mul_right_dev_2": [
            {
                "theorem": "mul_le_mul_right_dev_2",
                "NL": "-- Proof Statement: Prove that if a is less than or equal to b, then a times t is less than or equal to b times t.",
                "FL": "theorem mul_le_mul_right_dev_2 (a b t : \u2115) (h : a \u2264 b) : a * t \u2264 b * t := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_le_mul_right_dev_2",
                "NL": "  -- We know that a \u2264 b, so we can express b as a + d for some natural number d.",
                "FL": "  cases h with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_le_mul_right_dev_2",
                "NL": "  -- set d to be d * t and simplify the inequality to b * t = a * t + d * t",
                "FL": "  use d * t",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_le_mul_right_dev_2",
                "NL": "  -- subsitute b with a + d using what we haven shown above and apply the distributive property of multiplication over addition",
                "FL": "  rw [hd, add_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_le_mul_right_dev_2",
                "NL": "  -- The LHS and RHS are equal, completing the proof",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_left_ne_zero": {
        "mul_left_ne_zero": [
            {
                "theorem": "mul_left_ne_zero",
                "NL": "-- Proof Statement: Prove that if a times b is not equal to 0, then b is not equal to 0.",
                "FL": "theorem mul_left_ne_zero (a b : \u2115) (h : a * b \u2260 0) : b \u2260 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_ne_zero",
                "NL": "  -- Assume that b equals 0. The goal is now to show that this leads to a contradiction.",
                "FL": "  intro hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_ne_zero",
                "NL": "  -- We are given that a * b \u2260 0, the negation of this is a * b = 0, if we prove this we will have a contradiction.",
                "FL": "  apply h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_ne_zero",
                "NL": "  -- We know that b = 0, so we can substitute b with 0 in the goal. Then, multipling a natural number a by 0 gives us 0, so our new goal is 0 = 0.",
                "FL": "  rw [hd, mul_zero]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_ne_zero",
                "NL": "  -- We use reflexivity to prove the goal of 0 = 0.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_left_ne_zero_dev_2": [
            {
                "theorem": "mul_left_ne_zero_dev_2",
                "NL": "-- Proof Statement: Prove that if a times b is not equal to 0, then b is not equal to 0.",
                "FL": "theorem mul_left_ne_zero_dev_2 (a b : \u2115) (h : a * b \u2260 0) : b \u2260 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_ne_zero_dev_2",
                "NL": "  -- Assume that b equals 0.",
                "FL": "  intro hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_ne_zero_dev_2",
                "NL": "  -- subtitute b with 0 which gives us a * 0 != 0",
                "FL": "  rw [hd] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_ne_zero_dev_2",
                "NL": "  -- a * 0 != 0 -> 0 != 0",
                "FL": "  rw [mul_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_ne_zero_dev_2",
                "NL": "  -- We have 0 != 0 which is a contradiction.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "eq_succ_of_ne_zero": {
        "eq_succ_of_ne_zero_dev_1": [
            {
                "theorem": "eq_succ_of_ne_zero_dev_1",
                "NL": "-- Proof Statement: Prove that if a is not equal to 0, then a is the successor of some natural number.",
                "FL": "theorem eq_succ_of_ne_zero_dev_1 (a : \u2115) (ha : a \u2260 0) : \u2203 n, a = succ n := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "eq_succ_of_ne_zero_dev_1",
                "NL": "  -- We use induction on a.",
                "FL": "  induction a with d _",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "eq_succ_of_ne_zero_dev_1",
                "NL": "  -- For the base case, a = 0, the theorem doesn't hold because we know a != 0.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "eq_succ_of_ne_zero_dev_1",
                "NL": "  -- For the inductive step, we set n to be d.",
                "FL": "  use d",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "eq_succ_of_ne_zero_dev_1",
                "NL": "  -- We use reflexivity to prove that 'succ d' equals 'succ d'.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "eq_succ_of_ne_zero_dev_2": [
            {
                "theorem": "eq_succ_of_ne_zero_dev_2",
                "NL": "-- Proof Statement: Prove that if a is not equal to 0, then a is the successor of some natural number.",
                "FL": "theorem eq_succ_of_ne_zero_dev_2 (a : \u2115) (ha : a \u2260 0) : \u2203 n, a = succ n := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "eq_succ_of_ne_zero_dev_2",
                "NL": "  -- We use induction on a.",
                "FL": "  induction a with d _",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "eq_succ_of_ne_zero_dev_2",
                "NL": "  -- For the base case, a = 0, the theorem doesn't hold because we know a != 0.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "eq_succ_of_ne_zero_dev_2",
                "NL": "  -- For the inductive step, we set n to be d which gives us succ d = succ d",
                "FL": "  use d",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "eq_succ_of_ne_zero_dev_2",
                "NL": "  -- Since the LHS and RHS are equal, we can use reflexivity to prove the goal.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "one_le_of_ne_zero": {
        "one_le_of_ne_zero_dev_1": [
            {
                "theorem": "one_le_of_ne_zero_dev_1",
                "NL": "-- Proof Statement: Prove that if a is not equal to 0, then 1 is less than or equal to a.",
                "FL": "theorem one_le_of_ne_zero_dev_1 (a : \u2115) (ha : a \u2260 0) : 1 \u2264 a := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_1",
                "NL": "  -- a is either 0 or the successor of some natural number d.",
                "FL": "  cases a with d",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_1",
                "NL": "  -- When a = 0, the theorem doesn't hold because we know a != 0.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_1",
                "NL": "  -- 1 <= succ d -> 1 <= d + 1",
                "FL": "  rw [succ_eq_add_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_1",
                "NL": "  -- 1 <= d + 1 -> 1 + d = d + 1",
                "FL": "  use d",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_1",
                "NL": "  -- 1 + d = d + 1 -> 1 + d = 1 + d",
                "FL": "  rw [add_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_1",
                "NL": "  -- The LHS and RHS are equal, so we can use reflexivity to prove the goal.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "one_le_of_ne_zero_dev_2": [
            {
                "theorem": "one_le_of_ne_zero_dev_2",
                "NL": "-- Proof Statement: Prove that if a is not equal to 0, then 1 is less than or equal to a.",
                "FL": "theorem one_le_of_ne_zero_dev_2 (a : \u2115) (ha : a \u2260 0) : 1 \u2264 a := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_2",
                "NL": "  -- We use induction on a.",
                "FL": "  induction a with d _",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_2",
                "NL": "  -- For the base case, a = 0, the theorem doesn't hold because we know a != 0.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_2",
                "NL": "  -- we know that 1 <= succ d -> 1 <= d + 1",
                "FL": "  rw [succ_eq_add_one]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_2",
                "NL": "  -- 1 <= d + 1 -> 1 + a = d + 1 where a is some natural number by the definition of inequality. set a to be d.",
                "FL": "  use d",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_2",
                "NL": "  -- 1 + d = d + 1 -> 1 + d = 1 + d by the commutative property of addition.",
                "FL": "  rw [add_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "one_le_of_ne_zero_dev_2",
                "NL": "  -- The LHS and RHS are equal, so we can use reflexivity to prove the goal.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "le_mul_right": {
        "le_mul_right": [
            {
                "theorem": "le_mul_right",
                "NL": "-- Proof Statement: Prove that if a times b is not equal to 0, then a is less than or equal to a times b.",
                "FL": "theorem le_mul_right (a b : \u2115) (h : a * b \u2260 0) : a \u2264 a * b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right",
                "NL": "  -- We are given that the product of a and b is not zero. Therefore, we can conclude that b is not zero.",
                "FL": "  apply mul_left_ne_zero at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right",
                "NL": "  -- We showed that b is not zero, so we can use this to show that b is at least 1.",
                "FL": "  apply one_le_of_ne_zero at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right",
                "NL": "  -- We showed that b is at least 1, so we can use this to show that a * 1 <= a * b.",
                "FL": "  apply mul_le_mul_right 1 b a at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right",
                "NL": "  -- We showed that a * 1 <= a * b. We can change 1 * a to just a. Then we switch the order of the multiplication on the right side, changing b * a to a * b. Now our assumption states that a <= a * b",
                "FL": "  rw [one_mul, mul_comm] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right",
                "NL": "  -- We have that a times b = a times b, so we can use reflexivity to prove the goal.",
                "FL": "  exact h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "le_mul_right_dev_2": [
            {
                "theorem": "le_mul_right_dev_2",
                "NL": "-- Proof Statement: Prove that if a times b is not equal to 0, then a is less than or equal to a times b.",
                "FL": "theorem le_mul_right_dev_2 (a b : \u2115) (h : a * b \u2260 0) : a \u2264 a * b := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right_dev_2",
                "NL": "  -- proof by induction on b",
                "FL": "  induction b with d _",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right_dev_2",
                "NL": "  -- for the base case, a * 0 != 0 -> 0 != 0",
                "FL": "  apply mul_left_ne_zero at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right_dev_2",
                "NL": "  -- 0 != 0 is false so the theorem doesn't hold for this case.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right_dev_2",
                "NL": "  -- For the inductive step, we have a <= a * succ d -> a <= a * d + a by the definition of multiplication.",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right_dev_2",
                "NL": "  -- a <= a * d + a -> a * d + a = a + a * d by the definition of inequality, if we set a * d to be a.",
                "FL": "  use a * d",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right_dev_2",
                "NL": "  -- a * d + a = a + a * d -> a * d + a = a + a * d by the commutative property of addition.",
                "FL": "  rw [add_comm]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "le_mul_right_dev_2",
                "NL": "  -- The LHS and RHS are equal, so we can use reflexivity to prove the goal.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_right_eq_one": {
        "mul_right_eq_one": [
            {
                "theorem": "mul_right_eq_one",
                "NL": "-- Proof Statement: Prove that if x times y is equal to 1, then x is equal to 1.",
                "FL": "theorem mul_right_eq_one (x y : \u2115) (h : x * y = 1) : x = 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one",
                "NL": "  -- assume that x * y is not equal to 0",
                "FL": "  have h2 : x * y \u2260 0",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one",
                "NL": "  -- rewrite the goal with the previous assumption so the new goal is 1 is not equal to 0",
                "FL": "  rw [h]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one",
                "NL": "  -- We know that 1 is not equal to 0, so we can use this to prove the goal.",
                "FL": "  exact one_ne_zero",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one",
                "NL": "  -- We have shown that for any natural number x, if x * y not equal to 0, x <= x * y. so we know that x \u2264 x * y",
                "FL": "  apply le_mul_right at h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one",
                "NL": "  -- We are given that x * y = 1, so we know that x \u2264 1",
                "FL": "  rw [h] at h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one",
                "NL": "  -- Since x <= 1, x must be 1 or 0.",
                "FL": "  apply le_one at h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one",
                "NL": "  -- We consider the two possible cases for x given by the disjunction in h2: either x equals 0 or x equals 1.",
                "FL": "  cases h2 with h0 h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one",
                "NL": "  -- If x equals 0, then x * y = 0, which implies that 0 = 1.",
                "FL": "  rw [h0, zero_mul] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one",
                "NL": "  -- 0 = 1 is false, so we can use this to show that x is not equal to 0.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one",
                "NL": "  -- We have shown that x = 1 which proves the goal.",
                "FL": "  exact h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_right_eq_one_dev_2": [
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "-- Proof Statement: Prove that if x times y is equal to 1, then x is equal to 1.",
                "FL": "theorem mul_right_eq_one_dev_2 (x y : \u2115) (h : x * y = 1) : x = 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "  -- assume that x * y is not equal to 0",
                "FL": "  have h2 : x * y \u2260 0",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "  -- rewrite the goal with the previous assumption so the new goal is 1 is not equal to 0",
                "FL": "  rw [h]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "  -- We know that 1 is not equal to 0, so we can use this to prove the goal.",
                "FL": "  exact one_ne_zero",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "  -- We have shown that for any natural number x, if x * y not equal to 0, x <= x * y. so we know that x \u2264 x * y",
                "FL": "  apply le_mul_right at h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "  -- We are given that x * y = 1, so we know that x \u2264 1",
                "FL": "  rw [h] at h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "  -- Since x <= 1, x must be 1 or 0.",
                "FL": "  apply le_one at h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "  -- We consider the two possible cases for x given by the disjunction in h2: either x equals 0 or x equals 1.",
                "FL": "  cases h2 with h0 h1",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "  -- we know that x * y = 1. Plugging in x = 0, we get 0 * y = 0.",
                "FL": "  rw [h0] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "  -- we know that 0 * n = 0 for any natural number n, so we have 0 = 1.",
                "FL": "  rw [zero_mul] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "  -- 0 = 1 is false, so we can use this to show that x is not equal to 0.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_one_dev_2",
                "NL": "  -- We have shown that x = 1 which proves the goal.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_ne_zero": {
        "mul_ne_zero": [
            {
                "theorem": "mul_ne_zero",
                "NL": "-- Proof Statement: Prove that if a is not equal to 0 and b is not equal to 0, then a times b is not equal to 0.",
                "FL": "theorem mul_ne_zero (a b : \u2115) (ha : a \u2260 0) (hb : b \u2260 0) : a * b \u2260 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero",
                "NL": "  -- We are given that a != 0. So, there exists a natural number 'n' such that 'a' equals 'n' plus 1, given that 'a' is not equal to zero.",
                "FL": "  apply eq_succ_of_ne_zero at ha",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero",
                "NL": "  -- We are given that b != 0. So, there exists a natural number 'n' such that 'b' equals n plus 1, given that 'b' is not equal to zero.",
                "FL": "  apply eq_succ_of_ne_zero at hb",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero",
                "NL": "  -- There exists a natural number 'c' such that 'a' is equal to the successor of 'c'.",
                "FL": "  cases ha with c hc",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero",
                "NL": "  -- There exists a natural number 'd' such that 'b' is equal to the successor of 'd'.",
                "FL": "  cases hb with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero",
                "NL": "  -- We substitute the variable 'a' with 'succ c' in the goal.",
                "FL": "  rw [hc]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero",
                "NL": "  -- We substitute the variable 'b' with 'succ d' in the goal.",
                "FL": "  rw [hd]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero",
                "NL": "  -- Rewrite the succ c * succ d as succ c * d + succ c.",
                "FL": "  rw [mul_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero",
                "NL": "  -- Rewrite succ c * d + succ c as succ (succ c * d + c).",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero",
                "NL": "  -- flip the sides of the goal so that the new goal is 0 is not equal to succ (succ c * d + c)",
                "FL": "  symm",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero",
                "NL": "  -- We know that 0 is not equal to the successor of any natural number, so we can use this to prove the goal.",
                "FL": "  apply zero_ne_succ",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_ne_zero_dev_1": [
            {
                "theorem": "mul_ne_zero_dev_1",
                "NL": "-- Proof Statement: Prove that if a is not equal to 0 and b is not equal to 0, then a times b is not equal to 0.",
                "FL": "theorem mul_ne_zero_dev_1 (a b : \u2115) (ha : a \u2260 0) (hb : b \u2260 0) : a * b \u2260 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero_dev_1",
                "NL": "  -- Since a is a natural number, it is either 0 or the successor of some natural number.",
                "FL": "  cases a with a",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero_dev_1",
                "NL": "  -- If a is 0, this theorem doesn't hold.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero_dev_1",
                "NL": "  -- succ a * succ b \u2260 0 -> succ a * b + succ a \u2260 0 by the definition of multiplication",
                "FL": "  rw [succ_mul]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero_dev_1",
                "NL": "  -- Since b is a natural number, it is either 0 or the successor of some natural number.",
                "FL": "  cases b with b",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero_dev_1",
                "NL": "  -- If b is 0, this theorem doesn't hold.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero_dev_1",
                "NL": "  -- succ a * b + succ a \u2260 0 -> succ (succ a * b + a) \u2260 0 by the definition of addition",
                "FL": "  rw [add_succ]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero_dev_1",
                "NL": "  -- succ (succ a * b + a) \u2260 0 -> 0 \u2260 succ (succ a * b + a) by the symmetry property of inequality",
                "FL": "  symm",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_ne_zero_dev_1",
                "NL": "  -- We know that 0 is not equal to the successor of any natural number, so we can use this to prove the goal.",
                "FL": "  apply zero_ne_succ",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_eq_zero": {
        "mul_eq_zero_dev_1": [
            {
                "theorem": "mul_eq_zero_dev_1",
                "NL": "-- Proof Statement: Prove that if a times b is equal to 0, then a is equal to 0 or b is equal to 0.",
                "FL": "theorem mul_eq_zero_dev_1 (a b : \u2115) (h : a * b = 0) : a = 0 \u2228 b = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_eq_zero_dev_1",
                "NL": "  -- We introduce a new fact stating that if neither a nor b is zero, then their product cannot be zero.",
                "FL": "  have h2 := mul_ne_zero a b",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_eq_zero_dev_1",
                "NL": "  -- a * b \u2260 0 -> 0 -> a * b \u2260 a * b by substituting that a * b = 0",
                "FL": "  nth_rewrite 3 [\u2190 h] at h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_eq_zero_dev_1",
                "NL": "  -- a * b \u2260 a * b is a contradiction, so either a = 0 or b = 0",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_eq_zero_dev_2": [
            {
                "theorem": "mul_eq_zero_dev_2",
                "NL": "-- Proof Statement: Prove that if a times b is equal to 0, then a is equal to 0 or b is equal to 0.",
                "FL": "theorem mul_eq_zero_dev_2 (a b : \u2115) (h : a * b = 0) : a = 0 \u2228 b = 0 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_eq_zero_dev_2",
                "NL": "  -- We introduce a new fact stating that if neither a nor b is zero, then their product cannot be zero.",
                "FL": "  have h2 := mul_ne_zero a b",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_eq_zero_dev_2",
                "NL": "  -- a * b \u2260 0 -> 0 -> 0 \u2260 0",
                "FL": "  rw [h] at h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_eq_zero_dev_2",
                "NL": "  -- 0 \u2260 0 is a contradiction, so either a = 0 or b = 0",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_left_cancel": {
        "mul_left_cancel": [
            {
                "theorem": "mul_left_cancel",
                "NL": "-- Proof Statement: Prove that if a times b is equal to a times c, then b is equal to c.",
                "FL": "theorem mul_left_cancel (a b c : \u2115) (ha : a \u2260 0) (h : a * b = a * c) : b = c := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- Assume that b is a natural number and use induction on b. In the base case, b is 0. We also generalize over c, which means that we assume that c is an arbitrary but fixed natural number. Now, the goal is to show that 0 equals c given that a is a non-zero natural number and a times 0 equals a times c.",
                "FL": "  induction b with d hd generalizing c",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We know that a * 0 = 0 so, 0 = a * c.",
                "FL": "  rw [mul_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We flip the sides so that a * c = 0.",
                "FL": "  symm at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We apply the fact that if a times b is equal to 0, then either a is equal to 0 or b is equal to 0.",
                "FL": "  apply mul_eq_zero at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We consider the two possible cases for h: either a is equal to 0 or b is equal to 0.",
                "FL": "  cases h with h1 h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- If a is equal to 0, then we have a contradiction because we are given that a is not equal to 0.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- If b is equal to 0, then we have that 0 = c.",
                "FL": "  rw [h2]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We have that 0 = 0 by substituting 0 for c, so we can use reflexivity to prove the goal.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We consider two subcases for c: when c is 0 and when c is a successor of another natural number e. For the first subcase, we need to show that the successor of d equals 0 given the hypothesis that a times the successor of d equals a times 0.",
                "FL": "  cases c with e",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We know that a * succ d = a * 0, so a * d + a = 0, because for any natural numbers a and d, a * succ d = a * d + a and for any natural number a, a * 0 = 0.",
                "FL": "  rw [mul_succ, mul_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We apply the fact that for any natural numbers a and b, if a + b = 0, then b = 0 to get that a = 0.",
                "FL": "  apply add_left_eq_zero at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We have that a = 0, so we can use this to prove the goal.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- Rewrite the equation a * succ d = a * succ e to a * d + a = a * e + a, using the theorem that multiplication of a natural number a with the successor of another natural number d (or e) is equal to the sum of a * d (or e) and a.",
                "FL": "  rw [mul_succ, mul_succ] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We use the fact that if two sums are equal and they both have the same term added to them, then the original sums before the addition must have been equal. This simplifies a * d + a = a * e + a to a * d = a * e.",
                "FL": "  apply add_right_cancel at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We apply the induction hypothesis hd to the equation a * d = a * e which gives us d = e.",
                "FL": "  apply hd at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- We substitute e for d in the goal which gives us the new goal succ e = succ e.",
                "FL": "  rw [h]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel",
                "NL": "  -- The goal that succ e = succ e is true by reflexivity.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_left_cancel_dev_2": [
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "-- Proof Statement: Prove that if a times b is equal to a times c, then b is equal to c.",
                "FL": "theorem mul_left_cancel_dev_2 (a b c : \u2115) (ha : a \u2260 0) (h : a * b = a * c) : b = c := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- proof by induction on b",
                "FL": "  induction b with d hd generalizing c",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- for the base case, a * 0 = a * c -> 0 = a * c",
                "FL": "  rw [mul_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- 0 = a * c -> a * c = 0",
                "FL": "  symm at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- a * c = 0 -> a = 0 \u2228 c = 0",
                "FL": "  apply mul_eq_zero at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- either a is equal to 0 or c is equal to 0.",
                "FL": "  cases h with h1 h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- if a is equal to 0, then we have a contradiction.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- if c is equal to 0, then we have that 0 = 0.",
                "FL": "  rw [h2]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- 0 = 0 closes the base case.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- consider two subcases for c: when c is 0 and when c is a successor of another natural number e.",
                "FL": "  cases c with e he",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- a * succ d = a * 0 -> a * succ d = 0",
                "FL": "  rw [mul_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- a * succ d = 0 -> a * succ d = 0",
                "FL": "  apply mul_eq_zero at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- either a is equal to 0 or c is equal to 0.",
                "FL": "  cases h with h1 h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- if a is equal to 0, then we have a contradiction.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- if c = 0, then we have that ucc d  = 0.",
                "FL": "  exact h2",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- a * succ d = a * succ e -> a * d + a = a * succ e -> a * d + a = a * e + a",
                "FL": "  rw [mul_succ, mul_succ] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- a * d + a = a * e + a -> a * d = a * e",
                "FL": "  apply add_right_cancel at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- a * d = a * e -> d = e",
                "FL": "  apply hd at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- succ d = succ e -> succ e = succ d",
                "FL": "  rw [h]",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_left_cancel_dev_2",
                "NL": "  -- The LHS and RHS are equal, so we can use reflexivity to prove the goal.",
                "FL": "  rfl",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    },
    "mul_right_eq_self": {
        "mul_right_eq_self": [
            {
                "theorem": "mul_right_eq_self",
                "NL": "-- Proof Statement: Prove that if a is not equal to 0 and a times b equals a, then b equals 1.",
                "FL": "theorem mul_right_eq_self (a b : \u2115) (ha : a \u2260 0) (h : a * b = a) : b = 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_self",
                "NL": "  -- Rewrite the goal with the hypothesis a * b = a using the fact that a times 1 equals a.",
                "FL": "  nth_rewrite 2 [\u2190 mul_one a] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_self",
                "NL": "  -- Apply the the theorem that states that for all natural numbers a and b, a times b is equal to a times c, then b is equal to c which shows that b = 1.",
                "FL": "  exact mul_left_cancel a b 1 ha h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ],
        "mul_right_eq_self_dev_1": [
            {
                "theorem": "mul_right_eq_self_dev_1",
                "NL": "-- Proof Statement: Prove that if a is not equal to 0 and a times b equals a, then b equals 1.",
                "FL": "theorem mul_right_eq_self_dev_1 (a b : \u2115) (ha : a \u2260 0) (h : a * b = a) : b = 1 := by",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_self_dev_1",
                "NL": "  -- Since b is a natural number, it is either 0 or the successor of some natural number.",
                "FL": "  cases b with d hd",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_self_dev_1",
                "NL": "  -- if a = 0, then a * 0 = a -> 0 = a",
                "FL": "  rw [mul_zero] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_self_dev_1",
                "NL": "  -- 0 = a is a contradiction, so we don't need to consider this case.",
                "FL": "  tauto",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_self_dev_1",
                "NL": "  -- if a is not equal to 0, then a * succ d = a -> a * succ d = a * 1",
                "FL": "  nth_rewrite 2 [\u2190 mul_one a] at h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            },
            {
                "theorem": "mul_right_eq_self_dev_1",
                "NL": "  -- by properties of multiplication, we know that this implication is true.",
                "FL": "  exact mul_left_cancel a (succ d) 1 ha h",
                "state": "You might need to open '/home/manooshree/PeanoFormalizer/NNG4' as a workspace in your editor\n"
            }
        ]
    }
}