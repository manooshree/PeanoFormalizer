from openai import OpenAI
import json
from .RAG import RAG
from transformers import pipeline, AutoTokenizer, AutoModelForCausalLM
import os


key = ""


def parse_lean_proof(proof_text):
    """Parse Lean proof into list of (comment, tactic) pairs."""
    lines = proof_text.strip().split('\n')
    pairs = []
    
    current_comment = None
    current_tactic = []
    
    for line in lines:
        line = line.rstrip()
        if not line:
            continue
            
        # Look for comments by stripping all whitespace first
        stripped_line = line.lstrip(' ·')  # Strip both spaces and bullet points
        if stripped_line.startswith('--'):
            # Save previous step if we have a comment and tactic
            if current_comment is not None and current_tactic:
                pairs.append((
                    current_comment,
                    '\n'.join(current_tactic).rstrip()
                ))
                current_tactic = []
            current_comment = stripped_line[2:].strip()
        else:
            if current_comment is not None:
                # Keep original line with indentation
                current_tactic.append(line.strip())
    

    if current_comment is not None and current_tactic:
        pairs.append((
            current_comment,
            '\n'.join(current_tactic).rstrip()
        ))
    
    return pairs

def parse_nl_proof(proof_lines):
    """Parse natural language input into a list of (comment, tactic) pairs.
    Each line is treated as a natural language description, and we'll pass it to the model
    to generate the corresponding Lean tactic."""
    pairs = []
    
    if isinstance(proof_lines, str):
        # If we get a string, split it into lines
        lines = proof_lines.strip().split('\n')
    else:
        # If we get a list, use it directly
        lines = proof_lines
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # Each line becomes a natural language comment
        # We'll leave the tactic empty initially - it will be generated by gpt_prompt
        pairs.append((line, ""))
    
    return pairs

def gpt_prompt(student):
    client = OpenAI(api_key=key)
    embeddings = 'NNG4/Game/LevelsClean/Manooshree_tests/addition_tactics_embeddings.json'
    tactic_rag = RAG(student, embeddings)
    # print('RAG Examples:', tactic_rag)
    NL_prompt = f'''
    You are doing a line by line translation of a student proof into Lean4. Your task is to output the Lean4 tactic that matches this student proof line, using the following suggested FL tactics as your guide.

    Student line to translate: {student}

    Suggested: {tactic_rag}

    ''' + '''IMPORTANT: Respond with ONLY a raw JSON object in the following format, without any code block formatting or additional text:
    {
    "Tactic": "Tactic"
    } 
    '''
    #print('PROMPT: \n', NL_prompt )
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a Lean4 expert translating lines from student proofs into Lean."},
                {"role": "user", "content": NL_prompt},
            ],
            temperature=0.5,
        )
        reply = response.choices[0].message.content
        if reply.startswith('```'):
            start = reply.find('{')
            end = reply.rfind('}') + 1
            if start != -1 and end != 0:
                reply = reply[start:end]
        reply_json = json.loads(reply)
        tactic = reply_json.get("Tactic", "")
        
        # Split the tactic string and take only the first part
        first_tactic = tactic.split('\n')[0].strip()
        
        return first_tactic
    except Exception as e:
        return f"An error occurred: {e}"

def deepseek_prompt(student):
    embeddings = '/Users/manooshreepatel/dev/LeanTutor/NNG4/Game/LevelsClean/Manooshree_tests/addition_tactics_embeddings.json'
    tactic_rag = RAG(student, embeddings)
    
    pipe = pipeline("text-generation", 
                   model="deepseek-ai/deepseek-math-7b-base")
    
    prompt = f'''
    You are doing a line by line translation of a student proof into Lean4. Your task is to output the Lean4 tactic that matches this student proof line, using the following suggested FL tactics as your guide.

    Student line to translate: {student}

    Suggested: {tactic_rag}

    IMPORTANT: Respond with ONLY a raw JSON object in the following format, without any code block formatting or additional text:
    {{
    "Tactic": "Tactic"
    }}
    '''
    
    try:
        response = pipe(prompt, 
                       max_length=200,
                       temperature=0.5,
                       num_return_sequences=1)[0]['generated_text']
        
        # Extract JSON from response
        start = response.find('{')
        end = response.rfind('}') + 1
        if start != -1 and end != 0:
            reply = response[start:end]
            reply_json = json.loads(reply)
            tactic = reply_json.get("Tactic", "")
            
            # Split the tactic string and take only the first part
            first_tactic = tactic.split('\n')[0].strip()
            
            return first_tactic
            
    except Exception as e:
        return f"An error occurred: {e}"

# proof = [
#     "Induct on n, with d = 0 as the base case and the inductive hypothesis 0 + d = d. There are now two proof goals, prove base case: 0 + 0 = 0, and inductive step: 0 + succ (d) = succ (d)induction n with d hd"]

#     "First prove base case. Reduce LHS 0 + 0 = 0.",
#     "Prove LHS and RHS are equal, 0 = 0, completing base case",
#     "Now prove inductive step. Rewrite 0 + succ d = succ (0 + d)",
#     "Simplify RHS succ (0 + d) = succ(d) using the inductive hypothesis.",
#     "Prove LHS and RHS are equal, succ(d) = succ(d), completing the proof"
# ]


# proof = ["Induct on b, with d = 0 as the base case and the inductive hypothesis a + d = d + a. There are now two proof goals, prove base case: a + 0 = 0 + a and the inductive step: a + succ d = succ d + a", 
# "First prove base case. Simplify LHS a + 0 = a.", 
# "Simplify RHS 0 + a = a", 
# "Prove LHS and RHS are equal, a = a, completing the base case.", 
# "Now prove the inductive step. Rewrite LHS a + succ (d) = succ (a + d)", 
# "Rewrite RHS succ (d) + a = succ (d + a)", 
# "Rewrite LHS succ (a + d) to succ (d + a) using the inductive hypothesis", 
# "Prove succ LHS and RHS are equal, (d + a) = succ (d + a), completing the proof"]




# lean_proof_1 = '''
# -- Initiate induction on b, the base case (b=0) succ(a) + 0 = succ(a + 0)
#   induction b with d hd
# -- We start by proving the base case using the fact that c + 0 = c ∀ c ∈ ℕ and setting c := a giving us succ(a) + 0 = succ(a)
#   rw [add_zero]
# -- Now we can set c = succ(a) and use c + 0 = c ∀ c ∈ ℕ again to get succ(a) = succ(a)
#   rw [add_zero]
# -- Since we have succ(a) = succ(a) we are done with the base case
#   rfl
# -- Now to prove the induction case, we use the fact that a + succ(b) = succ(a + b) ∀ a, b ∈ ℕ and set a := succ(a) and b := n giving us succ(succ(a) + n) = succ(a+succ(n))
#   rw [add_succ]
# -- We again use the fact that a + succ(b) = succ(a + b) ∀ a, b ∈ ℕ on the right hand side and set a := a and b := n giving us succ(succ(a) + n) = succ(succ(a+n))
#   rw [add_succ]
# -- Rewrite the left hand side using the hypothesis giving us succ(succ(a+n)) = succ(succ(a+n))
#   rw [hd]
# -- Hence we are done.
#   rfl'''

# lean_proof_2 = '''
# theorem succ_add_logical_deviation_1 (a b : ℕ) : succ a + b = succ (a + b)  := by
#   -- Initiate induction on b, the base case (b=0) succ(a) + 0 = succ(a + 0)
#   induction b with d hd
# -- We start by proving the base case using the fact that c + 0 = c ∀ c ∈ ℕ and setting c := a giving us succ(a) + 0 = succ(a)
#   rw [add_zero]
# -- Now we can set c = succ(a) and use c + 0 = c ∀ c ∈ ℕ again to get succ(a) = succ(a)
#   rw [add_zero]
# -- Since we have succ(a) = succ(a) we are done with the base case
#   rfl
# -- Now to prove the induction case, we use the fact that a + succ(b) = succ(a + b) ∀ a, b ∈ ℕ and set a := succ(a) and b := n giving us succ(succ(a) + n) = succ(a+succ(n))
#   rw [add_succ]
# -- We again use the fact that a + succ(b) = succ(a + b) ∀ a, b ∈ ℕ on the right hand side and set a := a and b := n giving us succ(succ(a) + n) = succ(succ(a+n))
#   rw [add_succ]
# -- Rewrite the right hand side using the hypothesis giving us succ(succ(a) + n) = succ(succ(a) + n)
#   rw [← hd]
# -- Hence we are done. 
#   rfl'''

# lean_proof_3 = '''theorem succ_add_logical_deviation_2 (a b : ℕ) : succ a + b = succ (a + b)  := by
#   -- Initiate induction on b, the base case (b=0) succ(a) + 0 = succ(a + 0)
#   induction b with d hd
# -- We start by proving the base case using the fact that succ(a+b) = a + succ(b) and setting b = 0 and substituting on the RHS
#   rw [← add_succ]
# -- We use the fact that c + 0 = c ∀ c ∈ ℕ and set c := succ(a) to get succ(a) = a + succ(0)
#   rw [add_zero]
# -- Now use the fact that a + succ(b) = succ(a+b) and set a := a and b := 0 to get a + succ(0) = succ(a+0) on the RHS
#   rw [add_succ]
# -- Now on the RHS we use the fact that c + 0 = c ∀ c ∈ ℕ and set c := a to get succ(a) = succ(a)
#   rw [add_zero]
# -- since succ(a) = succ(a) we are done with the base case
#   rfl
# -- Now to prove the induction case, we use the fact that a + succ(b) = succ(a + b) ∀ a, b ∈ ℕ and set a := succ(a) and b := n giving us succ(succ(a) + n) = succ(a+succ(n))
#   rw [add_succ]
# -- We again use the fact that a + succ(b) = succ(a + b) ∀ a, b ∈ ℕ on the right hand side and set a := a and b := n giving us succ(succ(a) + n) = succ(succ(a+n))
#   rw [add_succ]
# -- Rewrite the right hand side using the hypothesis giving us succ(succ(a) + n) = succ(succ(a) + n)
#   rw [← hd]
# -- Hence we are done.
#   rfl'''

# lean_proof_5 = '''-- Induct on b, with d = 0 as the base case and the inductive hypothesis succ (a) + d = succ (a + d). There are now two proof goals, prove base case: succ (a) + 0 = succ (a + 0) and inductive step: succ (a) + succ (d) = succ (a + succ (d))
#   induction b with d hd
#     -- First prove base case. Apply the simplification that a + 0 = a to everywhere appropriate. The simplified equation is succ a = succ a
#   · repeat rw [add_zero]
#   -- Prove succ (a) = succ (a), finishing the base case
#     rfl
#   -- Now prove the inductive step. Apply the definition of addition, succ (a) + b = succ (a + b) wherever appropriate. The simplified equation is succ (succ a + d) = succ (succ (a + d))
#   · repeat rw [add_succ]
#     -- Rewrite RHS succ (succ a + d) to succ (succ (a + d)) using the inductive hypothesis
#     rw [hd]
#     -- Prove succ (succ (a + d)) = succ (succ (a + d)), completing the proof
#     rfl
# '''

lean_proof = ''' 
theorem succ_add (a b : ℕ) : succ a + b = succ (a + b)  := by
-- Induct on b, with d = 0 as the base case and the inductive hypothesis succ (a) + d = succ (a + d). There are now two proof goals, prove base case: succ (a) + 0 = succ (a + 0) and inductive step: succ (a) + succ (d) = succ (a + succ (d))
  induction b with d hd
-- First prove base case. Reduce LHS succ (a) + 0 = succ (a)
  · rw [add_zero]
-- Reduce RHS succ(a + 0) = succ (a)
    rw [add_zero]
-- Prove succ (a) = succ (a), finishing the base case
    rfl
-- Now prove the inductive step. Rewrite succ (a) + succ (d) = succ (succ a + d)
  · rw [add_succ]
-- Rewrite succ (a + succ d) = succ (succ (a + d))
    rw [add_succ]
-- Rewrite RHS succ (succ a + d) to succ (succ (a + d)) using the inductive hypothesis
    rw [hd]
-- Prove succ (succ (a + d)) = succ (succ (a + d)), completing the proof
    rfl

'''
lean_proof = '''
-- a + b + c -> b + a + c 
rw [add_comm a b]
'''
# proof_pairs = parse_lean_proof(lean_proof)
# matches = 0
# total_pairs = len(proof_pairs)
# generated_tactics = []

# Without Lean Compile below

# for nl, target_tactic in proof_pairs:
#     predicted_tactic = gpt_prompt(nl)
#     # predicted_tactic = deepseek_prompt(nl)
#     print(f"\nNL: {nl}")
#     print(f"Target: {target_tactic}")
#     print(f"Predicted: {predicted_tactic}")
    

    # if predicted_tactic == target_tactic:
    #     matches += 1


# print(f"\n=== Final Score ===")
# print(f"Matching tactics: {matches}/{total_pairs}")
